
ProjektUCIM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007cf0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08007ec0  08007ec0  00017ec0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008168  08008168  00020270  2**0
                  CONTENTS
  4 .ARM          00000008  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008170  08008170  00020270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008170  08008170  00018170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000270  20000000  08008178  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007ec  20000270  080083e8  00020270  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000a5c  080083e8  00020a5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020270  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001004a  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000029a3  00000000  00000000  000302ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ff8  00000000  00000000  00032c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000e90  00000000  00000000  00033c88  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023344  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000d9db  00000000  00000000  00057e5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000d1e9f  00000000  00000000  00065837  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001376d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004ba0  00000000  00000000  00137754  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000270 	.word	0x20000270
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007ea8 	.word	0x08007ea8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000274 	.word	0x20000274
 800020c:	08007ea8 	.word	0x08007ea8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003fe:	f1a4 0401 	sub.w	r4, r4, #1
 8000402:	d1e9      	bne.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_d2uiz>:
 8000b6c:	004a      	lsls	r2, r1, #1
 8000b6e:	d211      	bcs.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b74:	d211      	bcs.n	8000b9a <__aeabi_d2uiz+0x2e>
 8000b76:	d50d      	bpl.n	8000b94 <__aeabi_d2uiz+0x28>
 8000b78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b80:	d40e      	bmi.n	8000ba0 <__aeabi_d2uiz+0x34>
 8000b82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	4770      	bx	lr
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b9e:	d102      	bne.n	8000ba6 <__aeabi_d2uiz+0x3a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	4770      	bx	lr
 8000ba6:	f04f 0000 	mov.w	r0, #0
 8000baa:	4770      	bx	lr

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b972 	b.w	8000f48 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9e08      	ldr	r6, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	4688      	mov	r8, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d14b      	bne.n	8000d22 <__udivmoddi4+0xa6>
 8000c8a:	428a      	cmp	r2, r1
 8000c8c:	4615      	mov	r5, r2
 8000c8e:	d967      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	b14a      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c96:	f1c2 0720 	rsb	r7, r2, #32
 8000c9a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c9e:	fa20 f707 	lsr.w	r7, r0, r7
 8000ca2:	4095      	lsls	r5, r2
 8000ca4:	ea47 0803 	orr.w	r8, r7, r3
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbb8 f7fe 	udiv	r7, r8, lr
 8000cb4:	fa1f fc85 	uxth.w	ip, r5
 8000cb8:	fb0e 8817 	mls	r8, lr, r7, r8
 8000cbc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cc0:	fb07 f10c 	mul.w	r1, r7, ip
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18eb      	adds	r3, r5, r3
 8000cca:	f107 30ff 	add.w	r0, r7, #4294967295
 8000cce:	f080 811b 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8118 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000cd8:	3f02      	subs	r7, #2
 8000cda:	442b      	add	r3, r5
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ce4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cf0:	45a4      	cmp	ip, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	192c      	adds	r4, r5, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8107 	bcs.w	8000f0c <__udivmoddi4+0x290>
 8000cfe:	45a4      	cmp	ip, r4
 8000d00:	f240 8104 	bls.w	8000f0c <__udivmoddi4+0x290>
 8000d04:	3802      	subs	r0, #2
 8000d06:	442c      	add	r4, r5
 8000d08:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000d0c:	eba4 040c 	sub.w	r4, r4, ip
 8000d10:	2700      	movs	r7, #0
 8000d12:	b11e      	cbz	r6, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c6 4300 	strd	r4, r3, [r6]
 8000d1c:	4639      	mov	r1, r7
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xbe>
 8000d26:	2e00      	cmp	r6, #0
 8000d28:	f000 80eb 	beq.w	8000f02 <__udivmoddi4+0x286>
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e9c6 0100 	strd	r0, r1, [r6]
 8000d32:	4638      	mov	r0, r7
 8000d34:	4639      	mov	r1, r7
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f783 	clz	r7, r3
 8000d3e:	2f00      	cmp	r7, #0
 8000d40:	d147      	bne.n	8000dd2 <__udivmoddi4+0x156>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd0>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80fa 	bhi.w	8000f40 <__udivmoddi4+0x2c4>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	4698      	mov	r8, r3
 8000d56:	2e00      	cmp	r6, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000d5a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xe8>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 808f 	bne.w	8000e8c <__udivmoddi4+0x210>
 8000d6e:	1b49      	subs	r1, r1, r5
 8000d70:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d74:	fa1f f885 	uxth.w	r8, r5
 8000d78:	2701      	movs	r7, #1
 8000d7a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d7e:	0c23      	lsrs	r3, r4, #16
 8000d80:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d84:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d88:	fb08 f10c 	mul.w	r1, r8, ip
 8000d8c:	4299      	cmp	r1, r3
 8000d8e:	d907      	bls.n	8000da0 <__udivmoddi4+0x124>
 8000d90:	18eb      	adds	r3, r5, r3
 8000d92:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d96:	d202      	bcs.n	8000d9e <__udivmoddi4+0x122>
 8000d98:	4299      	cmp	r1, r3
 8000d9a:	f200 80cd 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d9e:	4684      	mov	ip, r0
 8000da0:	1a59      	subs	r1, r3, r1
 8000da2:	b2a3      	uxth	r3, r4
 8000da4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000da8:	fb0e 1410 	mls	r4, lr, r0, r1
 8000dac:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000db0:	fb08 f800 	mul.w	r8, r8, r0
 8000db4:	45a0      	cmp	r8, r4
 8000db6:	d907      	bls.n	8000dc8 <__udivmoddi4+0x14c>
 8000db8:	192c      	adds	r4, r5, r4
 8000dba:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dbe:	d202      	bcs.n	8000dc6 <__udivmoddi4+0x14a>
 8000dc0:	45a0      	cmp	r8, r4
 8000dc2:	f200 80b6 	bhi.w	8000f32 <__udivmoddi4+0x2b6>
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	eba4 0408 	sub.w	r4, r4, r8
 8000dcc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000dd0:	e79f      	b.n	8000d12 <__udivmoddi4+0x96>
 8000dd2:	f1c7 0c20 	rsb	ip, r7, #32
 8000dd6:	40bb      	lsls	r3, r7
 8000dd8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000ddc:	ea4e 0e03 	orr.w	lr, lr, r3
 8000de0:	fa01 f407 	lsl.w	r4, r1, r7
 8000de4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000de8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000dec:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000df0:	4325      	orrs	r5, r4
 8000df2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000df6:	0c2c      	lsrs	r4, r5, #16
 8000df8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dfc:	fa1f fa8e 	uxth.w	sl, lr
 8000e00:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000e04:	fb09 f40a 	mul.w	r4, r9, sl
 8000e08:	429c      	cmp	r4, r3
 8000e0a:	fa02 f207 	lsl.w	r2, r2, r7
 8000e0e:	fa00 f107 	lsl.w	r1, r0, r7
 8000e12:	d90b      	bls.n	8000e2c <__udivmoddi4+0x1b0>
 8000e14:	eb1e 0303 	adds.w	r3, lr, r3
 8000e18:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e1c:	f080 8087 	bcs.w	8000f2e <__udivmoddi4+0x2b2>
 8000e20:	429c      	cmp	r4, r3
 8000e22:	f240 8084 	bls.w	8000f2e <__udivmoddi4+0x2b2>
 8000e26:	f1a9 0902 	sub.w	r9, r9, #2
 8000e2a:	4473      	add	r3, lr
 8000e2c:	1b1b      	subs	r3, r3, r4
 8000e2e:	b2ad      	uxth	r5, r5
 8000e30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e34:	fb08 3310 	mls	r3, r8, r0, r3
 8000e38:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000e3c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000e40:	45a2      	cmp	sl, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1da>
 8000e44:	eb1e 0404 	adds.w	r4, lr, r4
 8000e48:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e4c:	d26b      	bcs.n	8000f26 <__udivmoddi4+0x2aa>
 8000e4e:	45a2      	cmp	sl, r4
 8000e50:	d969      	bls.n	8000f26 <__udivmoddi4+0x2aa>
 8000e52:	3802      	subs	r0, #2
 8000e54:	4474      	add	r4, lr
 8000e56:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e5a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e5e:	eba4 040a 	sub.w	r4, r4, sl
 8000e62:	454c      	cmp	r4, r9
 8000e64:	46c2      	mov	sl, r8
 8000e66:	464b      	mov	r3, r9
 8000e68:	d354      	bcc.n	8000f14 <__udivmoddi4+0x298>
 8000e6a:	d051      	beq.n	8000f10 <__udivmoddi4+0x294>
 8000e6c:	2e00      	cmp	r6, #0
 8000e6e:	d069      	beq.n	8000f44 <__udivmoddi4+0x2c8>
 8000e70:	ebb1 050a 	subs.w	r5, r1, sl
 8000e74:	eb64 0403 	sbc.w	r4, r4, r3
 8000e78:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e7c:	40fd      	lsrs	r5, r7
 8000e7e:	40fc      	lsrs	r4, r7
 8000e80:	ea4c 0505 	orr.w	r5, ip, r5
 8000e84:	e9c6 5400 	strd	r5, r4, [r6]
 8000e88:	2700      	movs	r7, #0
 8000e8a:	e747      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f703 	lsr.w	r7, r0, r3
 8000e94:	4095      	lsls	r5, r2
 8000e96:	fa01 f002 	lsl.w	r0, r1, r2
 8000e9a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e9e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000ea2:	4338      	orrs	r0, r7
 8000ea4:	0c01      	lsrs	r1, r0, #16
 8000ea6:	fbb3 f7fe 	udiv	r7, r3, lr
 8000eaa:	fa1f f885 	uxth.w	r8, r5
 8000eae:	fb0e 3317 	mls	r3, lr, r7, r3
 8000eb2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000eb6:	fb07 f308 	mul.w	r3, r7, r8
 8000eba:	428b      	cmp	r3, r1
 8000ebc:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec0:	d907      	bls.n	8000ed2 <__udivmoddi4+0x256>
 8000ec2:	1869      	adds	r1, r5, r1
 8000ec4:	f107 3cff 	add.w	ip, r7, #4294967295
 8000ec8:	d22f      	bcs.n	8000f2a <__udivmoddi4+0x2ae>
 8000eca:	428b      	cmp	r3, r1
 8000ecc:	d92d      	bls.n	8000f2a <__udivmoddi4+0x2ae>
 8000ece:	3f02      	subs	r7, #2
 8000ed0:	4429      	add	r1, r5
 8000ed2:	1acb      	subs	r3, r1, r3
 8000ed4:	b281      	uxth	r1, r0
 8000ed6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000eda:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb00 f308 	mul.w	r3, r0, r8
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	d907      	bls.n	8000efa <__udivmoddi4+0x27e>
 8000eea:	1869      	adds	r1, r5, r1
 8000eec:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ef0:	d217      	bcs.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef2:	428b      	cmp	r3, r1
 8000ef4:	d915      	bls.n	8000f22 <__udivmoddi4+0x2a6>
 8000ef6:	3802      	subs	r0, #2
 8000ef8:	4429      	add	r1, r5
 8000efa:	1ac9      	subs	r1, r1, r3
 8000efc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000f00:	e73b      	b.n	8000d7a <__udivmoddi4+0xfe>
 8000f02:	4637      	mov	r7, r6
 8000f04:	4630      	mov	r0, r6
 8000f06:	e709      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f08:	4607      	mov	r7, r0
 8000f0a:	e6e7      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	e6fb      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f10:	4541      	cmp	r1, r8
 8000f12:	d2ab      	bcs.n	8000e6c <__udivmoddi4+0x1f0>
 8000f14:	ebb8 0a02 	subs.w	sl, r8, r2
 8000f18:	eb69 020e 	sbc.w	r2, r9, lr
 8000f1c:	3801      	subs	r0, #1
 8000f1e:	4613      	mov	r3, r2
 8000f20:	e7a4      	b.n	8000e6c <__udivmoddi4+0x1f0>
 8000f22:	4660      	mov	r0, ip
 8000f24:	e7e9      	b.n	8000efa <__udivmoddi4+0x27e>
 8000f26:	4618      	mov	r0, r3
 8000f28:	e795      	b.n	8000e56 <__udivmoddi4+0x1da>
 8000f2a:	4667      	mov	r7, ip
 8000f2c:	e7d1      	b.n	8000ed2 <__udivmoddi4+0x256>
 8000f2e:	4681      	mov	r9, r0
 8000f30:	e77c      	b.n	8000e2c <__udivmoddi4+0x1b0>
 8000f32:	3802      	subs	r0, #2
 8000f34:	442c      	add	r4, r5
 8000f36:	e747      	b.n	8000dc8 <__udivmoddi4+0x14c>
 8000f38:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f3c:	442b      	add	r3, r5
 8000f3e:	e72f      	b.n	8000da0 <__udivmoddi4+0x124>
 8000f40:	4638      	mov	r0, r7
 8000f42:	e708      	b.n	8000d56 <__udivmoddi4+0xda>
 8000f44:	4637      	mov	r7, r6
 8000f46:	e6e9      	b.n	8000d1c <__udivmoddi4+0xa0>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0

  hcrc.Instance = CRC;
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <MX_CRC_Init+0x20>)
 8000f52:	4a07      	ldr	r2, [pc, #28]	; (8000f70 <MX_CRC_Init+0x24>)
 8000f54:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f56:	4805      	ldr	r0, [pc, #20]	; (8000f6c <MX_CRC_Init+0x20>)
 8000f58:	f002 fca5 	bl	80038a6 <HAL_CRC_Init>
 8000f5c:	4603      	mov	r3, r0
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d001      	beq.n	8000f66 <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 8000f62:	f002 f8af 	bl	80030c4 <Error_Handler>
  }

}
 8000f66:	bf00      	nop
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200002e8 	.word	0x200002e8
 8000f70:	40023000 	.word	0x40023000

08000f74 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b085      	sub	sp, #20
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]

  if(crcHandle->Instance==CRC)
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <HAL_CRC_MspInit+0x3c>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d10d      	bne.n	8000fa2 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
 8000f8a:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	4a09      	ldr	r2, [pc, #36]	; (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f90:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f94:	6313      	str	r3, [r2, #48]	; 0x30
 8000f96:	4b07      	ldr	r3, [pc, #28]	; (8000fb4 <HAL_CRC_MspInit+0x40>)
 8000f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f9e:	60fb      	str	r3, [r7, #12]
 8000fa0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000fa2:	bf00      	nop
 8000fa4:	3714      	adds	r7, #20
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	40023000 	.word	0x40023000
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	607b      	str	r3, [r7, #4]
 8000fc2:	4b0c      	ldr	r3, [pc, #48]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	4a0b      	ldr	r2, [pc, #44]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fce:	4b09      	ldr	r3, [pc, #36]	; (8000ff4 <MX_DMA_Init+0x3c>)
 8000fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2010      	movs	r0, #16
 8000fe0:	f002 fc2b 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fe4:	2010      	movs	r0, #16
 8000fe6:	f002 fc44 	bl	8003872 <HAL_NVIC_EnableIRQ>

}
 8000fea:	bf00      	nop
 8000fec:	3708      	adds	r7, #8
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40023800 	.word	0x40023800

08000ff8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ffe:	f107 0314 	add.w	r3, r7, #20
 8001002:	2200      	movs	r2, #0
 8001004:	601a      	str	r2, [r3, #0]
 8001006:	605a      	str	r2, [r3, #4]
 8001008:	609a      	str	r2, [r3, #8]
 800100a:	60da      	str	r2, [r3, #12]
 800100c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
 8001012:	4b4c      	ldr	r3, [pc, #304]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001016:	4a4b      	ldr	r2, [pc, #300]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001018:	f043 0304 	orr.w	r3, r3, #4
 800101c:	6313      	str	r3, [r2, #48]	; 0x30
 800101e:	4b49      	ldr	r3, [pc, #292]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001022:	f003 0304 	and.w	r3, r3, #4
 8001026:	613b      	str	r3, [r7, #16]
 8001028:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	4b45      	ldr	r3, [pc, #276]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a44      	ldr	r2, [pc, #272]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b42      	ldr	r3, [pc, #264]	; (8001144 <MX_GPIO_Init+0x14c>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	60bb      	str	r3, [r7, #8]
 800104a:	4b3e      	ldr	r3, [pc, #248]	; (8001144 <MX_GPIO_Init+0x14c>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a3d      	ldr	r2, [pc, #244]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b3b      	ldr	r3, [pc, #236]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	60bb      	str	r3, [r7, #8]
 8001060:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	607b      	str	r3, [r7, #4]
 8001066:	4b37      	ldr	r3, [pc, #220]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a36      	ldr	r2, [pc, #216]	; (8001144 <MX_GPIO_Init+0x14c>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b34      	ldr	r3, [pc, #208]	; (8001144 <MX_GPIO_Init+0x14c>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	607b      	str	r3, [r7, #4]
 800107c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800107e:	2200      	movs	r2, #0
 8001080:	2120      	movs	r1, #32
 8001082:	4831      	ldr	r0, [pc, #196]	; (8001148 <MX_GPIO_Init+0x150>)
 8001084:	f003 fc34 	bl	80048f0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001088:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800108c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800108e:	4b2f      	ldr	r3, [pc, #188]	; (800114c <MX_GPIO_Init+0x154>)
 8001090:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001092:	2300      	movs	r3, #0
 8001094:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	4619      	mov	r1, r3
 800109c:	482c      	ldr	r0, [pc, #176]	; (8001150 <MX_GPIO_Init+0x158>)
 800109e:	f003 fa95 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80010a2:	2320      	movs	r3, #32
 80010a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010a6:	2301      	movs	r3, #1
 80010a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010aa:	2300      	movs	r3, #0
 80010ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010ae:	2300      	movs	r3, #0
 80010b0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4823      	ldr	r0, [pc, #140]	; (8001148 <MX_GPIO_Init+0x150>)
 80010ba:	f003 fa87 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN3_Pin|BTN2_Pin|BTN1_Pin;
 80010be:	f44f 73b0 	mov.w	r3, #352	; 0x160
 80010c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_GPIO_Init+0x154>)
 80010c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010c8:	2301      	movs	r3, #1
 80010ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010cc:	f107 0314 	add.w	r3, r7, #20
 80010d0:	4619      	mov	r1, r3
 80010d2:	481f      	ldr	r0, [pc, #124]	; (8001150 <MX_GPIO_Init+0x158>)
 80010d4:	f003 fa7a 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN6_Pin;
 80010d8:	2304      	movs	r3, #4
 80010da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010dc:	4b1b      	ldr	r3, [pc, #108]	; (800114c <MX_GPIO_Init+0x154>)
 80010de:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010e0:	2301      	movs	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BTN6_GPIO_Port, &GPIO_InitStruct);
 80010e4:	f107 0314 	add.w	r3, r7, #20
 80010e8:	4619      	mov	r1, r3
 80010ea:	481a      	ldr	r0, [pc, #104]	; (8001154 <MX_GPIO_Init+0x15c>)
 80010ec:	f003 fa6e 	bl	80045cc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = BTN5_Pin|BTN4_Pin;
 80010f0:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80010f4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010f6:	4b15      	ldr	r3, [pc, #84]	; (800114c <MX_GPIO_Init+0x154>)
 80010f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010fe:	f107 0314 	add.w	r3, r7, #20
 8001102:	4619      	mov	r1, r3
 8001104:	4810      	ldr	r0, [pc, #64]	; (8001148 <MX_GPIO_Init+0x150>)
 8001106:	f003 fa61 	bl	80045cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 800110a:	2200      	movs	r2, #0
 800110c:	2100      	movs	r1, #0
 800110e:	2008      	movs	r0, #8
 8001110:	f002 fb93 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001114:	2008      	movs	r0, #8
 8001116:	f002 fbac 	bl	8003872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800111a:	2200      	movs	r2, #0
 800111c:	2100      	movs	r1, #0
 800111e:	2017      	movs	r0, #23
 8001120:	f002 fb8b 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001124:	2017      	movs	r0, #23
 8001126:	f002 fba4 	bl	8003872 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800112a:	2200      	movs	r2, #0
 800112c:	2100      	movs	r1, #0
 800112e:	2028      	movs	r0, #40	; 0x28
 8001130:	f002 fb83 	bl	800383a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001134:	2028      	movs	r0, #40	; 0x28
 8001136:	f002 fb9c 	bl	8003872 <HAL_NVIC_EnableIRQ>

}
 800113a:	bf00      	nop
 800113c:	3728      	adds	r7, #40	; 0x28
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40020000 	.word	0x40020000
 800114c:	10210000 	.word	0x10210000
 8001150:	40020800 	.word	0x40020800
 8001154:	40020400 	.word	0x40020400

08001158 <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == B1_Pin)
 8001162:	88fb      	ldrh	r3, [r7, #6]
 8001164:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001168:	d107      	bne.n	800117a <HAL_GPIO_EXTI_Callback+0x22>
	{
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 800116a:	2120      	movs	r1, #32
 800116c:	482d      	ldr	r0, [pc, #180]	; (8001224 <HAL_GPIO_EXTI_Callback+0xcc>)
 800116e:	f003 fbd8 	bl	8004922 <HAL_GPIO_TogglePin>
		Send("test\r\n");
 8001172:	482d      	ldr	r0, [pc, #180]	; (8001228 <HAL_GPIO_EXTI_Callback+0xd0>)
 8001174:	f001 ff32 	bl	8002fdc <Send>
	else if(GPIO_Pin == BTN6_Pin && !interrupted) //Przycisk 6
	{
		interrupted = 1;
		CCP();
	}
}
 8001178:	e050      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN1_Pin && !interrupted) //Przycisk 1
 800117a:	88fb      	ldrh	r3, [r7, #6]
 800117c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001180:	d109      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x3e>
 8001182:	4b2a      	ldr	r3, [pc, #168]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001184:	781b      	ldrb	r3, [r3, #0]
 8001186:	2b00      	cmp	r3, #0
 8001188:	d105      	bne.n	8001196 <HAL_GPIO_EXTI_Callback+0x3e>
		interrupted = 1;
 800118a:	4b28      	ldr	r3, [pc, #160]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 800118c:	2201      	movs	r2, #1
 800118e:	701a      	strb	r2, [r3, #0]
		CCN();
 8001190:	f001 f832 	bl	80021f8 <CCN>
 8001194:	e042      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN2_Pin && !interrupted) //Przycisk 2
 8001196:	88fb      	ldrh	r3, [r7, #6]
 8001198:	2b40      	cmp	r3, #64	; 0x40
 800119a:	d109      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0x58>
 800119c:	4b23      	ldr	r3, [pc, #140]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 800119e:	781b      	ldrb	r3, [r3, #0]
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d105      	bne.n	80011b0 <HAL_GPIO_EXTI_Callback+0x58>
		interrupted = 1;
 80011a4:	4b21      	ldr	r3, [pc, #132]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011a6:	2201      	movs	r2, #1
 80011a8:	701a      	strb	r2, [r3, #0]
		CMN();
 80011aa:	f000 fff5 	bl	8002198 <CMN>
 80011ae:	e035      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN3_Pin && !interrupted) //Przycisk 3
 80011b0:	88fb      	ldrh	r3, [r7, #6]
 80011b2:	2b20      	cmp	r3, #32
 80011b4:	d109      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0x72>
 80011b6:	4b1d      	ldr	r3, [pc, #116]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d105      	bne.n	80011ca <HAL_GPIO_EXTI_Callback+0x72>
		interrupted = 1;
 80011be:	4b1b      	ldr	r3, [pc, #108]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011c0:	2201      	movs	r2, #1
 80011c2:	701a      	strb	r2, [r3, #0]
		CSU();
 80011c4:	f001 f8d4 	bl	8002370 <CSU>
 80011c8:	e028      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN4_Pin && !interrupted) //Przycisk 4
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80011d0:	d109      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x8e>
 80011d2:	4b16      	ldr	r3, [pc, #88]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d105      	bne.n	80011e6 <HAL_GPIO_EXTI_Callback+0x8e>
		interrupted = 1;
 80011da:	4b14      	ldr	r3, [pc, #80]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011dc:	2201      	movs	r2, #1
 80011de:	701a      	strb	r2, [r3, #0]
		CBU();
 80011e0:	f001 f84e 	bl	8002280 <CBU>
 80011e4:	e01a      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN5_Pin && !interrupted) //Przycisk 5
 80011e6:	88fb      	ldrh	r3, [r7, #6]
 80011e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80011ec:	d109      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0xaa>
 80011ee:	4b0f      	ldr	r3, [pc, #60]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011f0:	781b      	ldrb	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d105      	bne.n	8001202 <HAL_GPIO_EXTI_Callback+0xaa>
		interrupted = 1;
 80011f6:	4b0d      	ldr	r3, [pc, #52]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
		CMP();
 80011fc:	f000 ffe4 	bl	80021c8 <CMP>
 8001200:	e00c      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
	else if(GPIO_Pin == BTN6_Pin && !interrupted) //Przycisk 6
 8001202:	88fb      	ldrh	r3, [r7, #6]
 8001204:	2b04      	cmp	r3, #4
 8001206:	d109      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
 8001208:	4b08      	ldr	r3, [pc, #32]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b00      	cmp	r3, #0
 800120e:	d105      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
		interrupted = 1;
 8001210:	4b06      	ldr	r3, [pc, #24]	; (800122c <HAL_GPIO_EXTI_Callback+0xd4>)
 8001212:	2201      	movs	r2, #1
 8001214:	701a      	strb	r2, [r3, #0]
		CCP();
 8001216:	f001 f811 	bl	800223c <CCP>
}
 800121a:	e7ff      	b.n	800121c <HAL_GPIO_EXTI_Callback+0xc4>
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020000 	.word	0x40020000
 8001228:	08007ec0 	.word	0x08007ec0
 800122c:	200002ac 	.word	0x200002ac

08001230 <Sys_1ms_Tick>:

void Sys_1ms_Tick() //Funkcja wywoływana co 1ms
{
 8001230:	b480      	push	{r7}
 8001232:	af00      	add	r7, sp, #0
	Tick++;
 8001234:	4b0e      	ldr	r3, [pc, #56]	; (8001270 <Sys_1ms_Tick+0x40>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	3301      	adds	r3, #1
 800123a:	4a0d      	ldr	r2, [pc, #52]	; (8001270 <Sys_1ms_Tick+0x40>)
 800123c:	6013      	str	r3, [r2, #0]

	if(interrupted) //Sprawdzenie czy przerwanie zostało wywołane
 800123e:	4b0d      	ldr	r3, [pc, #52]	; (8001274 <Sys_1ms_Tick+0x44>)
 8001240:	781b      	ldrb	r3, [r3, #0]
 8001242:	2b00      	cmp	r3, #0
 8001244:	d00f      	beq.n	8001266 <Sys_1ms_Tick+0x36>
	{
		interruptTick++;
 8001246:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <Sys_1ms_Tick+0x48>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	3301      	adds	r3, #1
 800124c:	4a0a      	ldr	r2, [pc, #40]	; (8001278 <Sys_1ms_Tick+0x48>)
 800124e:	6013      	str	r3, [r2, #0]
		if(interruptTick > 300) //Sprawdzenie czy minął czas od ostatniego wciśnięcia przycisku
 8001250:	4b09      	ldr	r3, [pc, #36]	; (8001278 <Sys_1ms_Tick+0x48>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8001258:	d905      	bls.n	8001266 <Sys_1ms_Tick+0x36>
		{
			interruptTick = 0; //Reset zmiennej Tick
 800125a:	4b07      	ldr	r3, [pc, #28]	; (8001278 <Sys_1ms_Tick+0x48>)
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
			interrupted = 0; //reset zmiennej interrupted
 8001260:	4b04      	ldr	r3, [pc, #16]	; (8001274 <Sys_1ms_Tick+0x44>)
 8001262:	2200      	movs	r2, #0
 8001264:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8001266:	bf00      	nop
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr
 8001270:	200002a4 	.word	0x200002a4
 8001274:	200002ac 	.word	0x200002ac
 8001278:	200002b0 	.word	0x200002b0

0800127c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800127c:	b5b0      	push	{r4, r5, r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001280:	f002 f98e 	bl	80035a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001284:	f000 f86a 	bl	800135c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001288:	f7ff feb6 	bl	8000ff8 <MX_GPIO_Init>
  MX_DMA_Init();
 800128c:	f7ff fe94 	bl	8000fb8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001290:	f002 f8e2 	bl	8003458 <MX_USART2_UART_Init>
  MX_CRC_Init();
 8001294:	f7ff fe5a 	bl	8000f4c <MX_CRC_Init>
  MX_TIM2_Init();
 8001298:	f001 fffa 	bl	8003290 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  HAL_UART_Receive_IT(&huart2, &buf_RX[RX_EMPTY], 1); //Uruchomienie oczekiwania na znak
 800129c:	4b25      	ldr	r3, [pc, #148]	; (8001334 <main+0xb8>)
 800129e:	881b      	ldrh	r3, [r3, #0]
 80012a0:	b29b      	uxth	r3, r3
 80012a2:	461a      	mov	r2, r3
 80012a4:	4b24      	ldr	r3, [pc, #144]	; (8001338 <main+0xbc>)
 80012a6:	4413      	add	r3, r2
 80012a8:	2201      	movs	r2, #1
 80012aa:	4619      	mov	r1, r3
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <main+0xc0>)
 80012ae:	f004 fea7 	bl	8006000 <HAL_UART_Receive_IT>

  getNextFreeFlashWord(); //Znalezienie ostatnich zapisanych zmiennych w FLASH
 80012b2:	f001 f8f9 	bl	80024a8 <getNextFreeFlashWord>
  bringback(); //Odczytanie ostatnich zapisanych zmiennych z FLASH
 80012b6:	f000 fa09 	bl	80016cc <bringback>

  innit_aLight(); //Inicjalizacja bufora LED z kolorem czarnym
 80012ba:	f000 f947 	bl	800154c <innit_aLight>
  HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, control_buffer, n_bit); //Uruchomienie PWM z DMA
 80012be:	23fc      	movs	r3, #252	; 0xfc
 80012c0:	4a1f      	ldr	r2, [pc, #124]	; (8001340 <main+0xc4>)
 80012c2:	2100      	movs	r1, #0
 80012c4:	481f      	ldr	r0, [pc, #124]	; (8001344 <main+0xc8>)
 80012c6:	f004 f89f 	bl	8005408 <HAL_TIM_PWM_Start_DMA>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  communicationProtocol(); //Sprawdzenie protokołu komunikacyjnego
 80012ca:	f001 f9d3 	bl	8002674 <communicationProtocol>

	  //Sprawdzenie czy zmienne operacyjne uległy zmianie lub minął ustalony czas
	  if(somethingChanged || Tick > 50*(1.2-speed))
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <main+0xcc>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d124      	bne.n	8001320 <main+0xa4>
 80012d6:	4b1d      	ldr	r3, [pc, #116]	; (800134c <main+0xd0>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff f942 	bl	8000564 <__aeabi_i2d>
 80012e0:	4604      	mov	r4, r0
 80012e2:	460d      	mov	r5, r1
 80012e4:	4b1a      	ldr	r3, [pc, #104]	; (8001350 <main+0xd4>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f94d 	bl	8000588 <__aeabi_f2d>
 80012ee:	4602      	mov	r2, r0
 80012f0:	460b      	mov	r3, r1
 80012f2:	f04f 3033 	mov.w	r0, #858993459	; 0x33333333
 80012f6:	4917      	ldr	r1, [pc, #92]	; (8001354 <main+0xd8>)
 80012f8:	f7fe ffe6 	bl	80002c8 <__aeabi_dsub>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	4b13      	ldr	r3, [pc, #76]	; (8001358 <main+0xdc>)
 800130a:	f7ff f995 	bl	8000638 <__aeabi_dmul>
 800130e:	4602      	mov	r2, r0
 8001310:	460b      	mov	r3, r1
 8001312:	4620      	mov	r0, r4
 8001314:	4629      	mov	r1, r5
 8001316:	f7ff fc1f 	bl	8000b58 <__aeabi_dcmpgt>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d007      	beq.n	8001330 <main+0xb4>
	  {
		  exeLED();
 8001320:	f000 faba 	bl	8001898 <exeLED>
		  Tick = 0; //Reset czasu
 8001324:	4b09      	ldr	r3, [pc, #36]	; (800134c <main+0xd0>)
 8001326:	2200      	movs	r2, #0
 8001328:	601a      	str	r2, [r3, #0]
		  somethingChanged = 0; //Reset flagi zmiany
 800132a:	4b07      	ldr	r3, [pc, #28]	; (8001348 <main+0xcc>)
 800132c:	2200      	movs	r2, #0
 800132e:	701a      	strb	r2, [r3, #0]
	  communicationProtocol(); //Sprawdzenie protokołu komunikacyjnego
 8001330:	e7cb      	b.n	80012ca <main+0x4e>
 8001332:	bf00      	nop
 8001334:	2000028c 	.word	0x2000028c
 8001338:	20000358 	.word	0x20000358
 800133c:	200009f4 	.word	0x200009f4
 8001340:	20000458 	.word	0x20000458
 8001344:	200009b4 	.word	0x200009b4
 8001348:	20000084 	.word	0x20000084
 800134c:	200002a4 	.word	0x200002a4
 8001350:	2000001c 	.word	0x2000001c
 8001354:	3ff33333 	.word	0x3ff33333
 8001358:	40490000 	.word	0x40490000

0800135c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b094      	sub	sp, #80	; 0x50
 8001360:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001362:	f107 031c 	add.w	r3, r7, #28
 8001366:	2234      	movs	r2, #52	; 0x34
 8001368:	2100      	movs	r1, #0
 800136a:	4618      	mov	r0, r3
 800136c:	f005 fc70 	bl	8006c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001370:	f107 0308 	add.w	r3, r7, #8
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
 8001378:	605a      	str	r2, [r3, #4]
 800137a:	609a      	str	r2, [r3, #8]
 800137c:	60da      	str	r2, [r3, #12]
 800137e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001380:	2300      	movs	r3, #0
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	4b2a      	ldr	r3, [pc, #168]	; (8001430 <SystemClock_Config+0xd4>)
 8001386:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001388:	4a29      	ldr	r2, [pc, #164]	; (8001430 <SystemClock_Config+0xd4>)
 800138a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800138e:	6413      	str	r3, [r2, #64]	; 0x40
 8001390:	4b27      	ldr	r3, [pc, #156]	; (8001430 <SystemClock_Config+0xd4>)
 8001392:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001398:	607b      	str	r3, [r7, #4]
 800139a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800139c:	2300      	movs	r3, #0
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <SystemClock_Config+0xd8>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80013a8:	4a22      	ldr	r2, [pc, #136]	; (8001434 <SystemClock_Config+0xd8>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6013      	str	r3, [r2, #0]
 80013b0:	4b20      	ldr	r3, [pc, #128]	; (8001434 <SystemClock_Config+0xd8>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013bc:	2302      	movs	r3, #2
 80013be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013c0:	2301      	movs	r3, #1
 80013c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80013c4:	2310      	movs	r3, #16
 80013c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c8:	2302      	movs	r3, #2
 80013ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013cc:	2300      	movs	r3, #0
 80013ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80013d0:	2310      	movs	r3, #16
 80013d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80013d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80013d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80013da:	2304      	movs	r3, #4
 80013dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80013de:	2302      	movs	r3, #2
 80013e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013e2:	2302      	movs	r3, #2
 80013e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013e6:	f107 031c 	add.w	r3, r7, #28
 80013ea:	4618      	mov	r0, r3
 80013ec:	f003 fd86 	bl	8004efc <HAL_RCC_OscConfig>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d001      	beq.n	80013fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013f6:	f001 fe65 	bl	80030c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013fa:	230f      	movs	r3, #15
 80013fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013fe:	2302      	movs	r3, #2
 8001400:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001410:	f107 0308 	add.w	r3, r7, #8
 8001414:	2102      	movs	r1, #2
 8001416:	4618      	mov	r0, r3
 8001418:	f003 fab6 	bl	8004988 <HAL_RCC_ClockConfig>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001422:	f001 fe4f 	bl	80030c4 <Error_Handler>
  }
}
 8001426:	bf00      	nop
 8001428:	3750      	adds	r7, #80	; 0x50
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	40007000 	.word	0x40007000

08001438 <get_aLight>:
			break;
		  }
}

void get_aLight(uint8_t * color_vector, uint16_t ledID, uint16_t ledAmount)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	60f8      	str	r0, [r7, #12]
 8001440:	460b      	mov	r3, r1
 8001442:	817b      	strh	r3, [r7, #10]
 8001444:	4613      	mov	r3, r2
 8001446:	813b      	strh	r3, [r7, #8]
	uint8_t green = color_vector[1] * brightness * 0.02;
	uint8_t blue = color_vector[2] * brightness * 0.02;*/

	//rozdzielenie kolorów i przemnożenie wartości przez zmienną jasności

	uint8_t red = color_vector[0] * brightness;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	ee07 3a90 	vmov	s15, r3
 8001450:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <get_aLight+0x108>)
 8001456:	edd3 7a00 	vldr	s15, [r3]
 800145a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800145e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001462:	edc7 7a01 	vstr	s15, [r7, #4]
 8001466:	793b      	ldrb	r3, [r7, #4]
 8001468:	75fb      	strb	r3, [r7, #23]
	uint8_t green = color_vector[1] * brightness;
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	3301      	adds	r3, #1
 800146e:	781b      	ldrb	r3, [r3, #0]
 8001470:	ee07 3a90 	vmov	s15, r3
 8001474:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001478:	4b31      	ldr	r3, [pc, #196]	; (8001540 <get_aLight+0x108>)
 800147a:	edd3 7a00 	vldr	s15, [r3]
 800147e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001482:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001486:	edc7 7a01 	vstr	s15, [r7, #4]
 800148a:	793b      	ldrb	r3, [r7, #4]
 800148c:	75bb      	strb	r3, [r7, #22]
	uint8_t blue = color_vector[2] * brightness;
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	3302      	adds	r3, #2
 8001492:	781b      	ldrb	r3, [r3, #0]
 8001494:	ee07 3a90 	vmov	s15, r3
 8001498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800149c:	4b28      	ldr	r3, [pc, #160]	; (8001540 <get_aLight+0x108>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014aa:	edc7 7a01 	vstr	s15, [r7, #4]
 80014ae:	793b      	ldrb	r3, [r7, #4]
 80014b0:	757b      	strb	r3, [r7, #21]


	uint32_t k = 0; //Zmienna pomocnicza
 80014b2:	2300      	movs	r3, #0
 80014b4:	61fb      	str	r3, [r7, #28]
	uint8_t c = 0; //Zmienna pomocnicza
 80014b6:	2300      	movs	r3, #0
 80014b8:	753b      	strb	r3, [r7, #20]
	uint32_t color = getColorInBit(red,green,blue); //Przetworzenie kolorów na postać bitową
 80014ba:	7d7a      	ldrb	r2, [r7, #21]
 80014bc:	7db9      	ldrb	r1, [r7, #22]
 80014be:	7dfb      	ldrb	r3, [r7, #23]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 f8af 	bl	8001624 <getColorInBit>
 80014c6:	6138      	str	r0, [r7, #16]
	for (int i = reset_bit + (24*ledID); i < reset_bit + (24*ledID) + (24*ledAmount); i++)
 80014c8:	897a      	ldrh	r2, [r7, #10]
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	00db      	lsls	r3, r3, #3
 80014d2:	333c      	adds	r3, #60	; 0x3c
 80014d4:	61bb      	str	r3, [r7, #24]
 80014d6:	e01e      	b.n	8001516 <get_aLight+0xde>
	{
		if (i >= reset_bit) //Uzupełnienie bitów z kolorami
 80014d8:	69bb      	ldr	r3, [r7, #24]
 80014da:	2b3b      	cmp	r3, #59	; 0x3b
 80014dc:	dd18      	ble.n	8001510 <get_aLight+0xd8>
		{
			 c = k % 24; //zmienna C wyznacza miejsce bit'u
 80014de:	69f9      	ldr	r1, [r7, #28]
 80014e0:	4b18      	ldr	r3, [pc, #96]	; (8001544 <get_aLight+0x10c>)
 80014e2:	fba3 2301 	umull	r2, r3, r3, r1
 80014e6:	091a      	lsrs	r2, r3, #4
 80014e8:	4613      	mov	r3, r2
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4413      	add	r3, r2
 80014ee:	00db      	lsls	r3, r3, #3
 80014f0:	1aca      	subs	r2, r1, r3
 80014f2:	4613      	mov	r3, r2
 80014f4:	753b      	strb	r3, [r7, #20]
			 control_buffer[i] = mapBitInNZR(color,c); //konwersja na NZR
 80014f6:	7d3b      	ldrb	r3, [r7, #20]
 80014f8:	4619      	mov	r1, r3
 80014fa:	6938      	ldr	r0, [r7, #16]
 80014fc:	f000 f870 	bl	80015e0 <mapBitInNZR>
 8001500:	4601      	mov	r1, r0
 8001502:	4a11      	ldr	r2, [pc, #68]	; (8001548 <get_aLight+0x110>)
 8001504:	69bb      	ldr	r3, [r7, #24]
 8001506:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			 k++;
 800150a:	69fb      	ldr	r3, [r7, #28]
 800150c:	3301      	adds	r3, #1
 800150e:	61fb      	str	r3, [r7, #28]
	for (int i = reset_bit + (24*ledID); i < reset_bit + (24*ledID) + (24*ledAmount); i++)
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	3301      	adds	r3, #1
 8001514:	61bb      	str	r3, [r7, #24]
 8001516:	897a      	ldrh	r2, [r7, #10]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	f103 013c 	add.w	r1, r3, #60	; 0x3c
 8001524:	893a      	ldrh	r2, [r7, #8]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	00db      	lsls	r3, r3, #3
 800152e:	440b      	add	r3, r1
 8001530:	69ba      	ldr	r2, [r7, #24]
 8001532:	429a      	cmp	r2, r3
 8001534:	dbd0      	blt.n	80014d8 <get_aLight+0xa0>
		}
	}
}
 8001536:	bf00      	nop
 8001538:	3720      	adds	r7, #32
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000018 	.word	0x20000018
 8001544:	aaaaaaab 	.word	0xaaaaaaab
 8001548:	20000458 	.word	0x20000458

0800154c <innit_aLight>:

void innit_aLight() //Funkcja inicjalizuje bufor z kolorem czarnym
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
	uint8_t red = 0; //rozdzielenie kolorów
 8001552:	2300      	movs	r3, #0
 8001554:	71fb      	strb	r3, [r7, #7]
	uint8_t green = 0;
 8001556:	2300      	movs	r3, #0
 8001558:	71bb      	strb	r3, [r7, #6]
	uint8_t blue = 0;
 800155a:	2300      	movs	r3, #0
 800155c:	717b      	strb	r3, [r7, #5]
	uint32_t k = 0;
 800155e:	2300      	movs	r3, #0
 8001560:	60fb      	str	r3, [r7, #12]
	uint8_t c = 0;
 8001562:	2300      	movs	r3, #0
 8001564:	713b      	strb	r3, [r7, #4]
	uint32_t color = getColorInBit(red,green,blue); //Przetworzenie kolorów na postać bitową
 8001566:	797a      	ldrb	r2, [r7, #5]
 8001568:	79b9      	ldrb	r1, [r7, #6]
 800156a:	79fb      	ldrb	r3, [r7, #7]
 800156c:	4618      	mov	r0, r3
 800156e:	f000 f859 	bl	8001624 <getColorInBit>
 8001572:	6038      	str	r0, [r7, #0]
	for (int i = 0; i < n_bit; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
 8001578:	e025      	b.n	80015c6 <innit_aLight+0x7a>
	{
		  if (i < reset_bit) //Uzupełnienie bitów reset
 800157a:	68bb      	ldr	r3, [r7, #8]
 800157c:	2b3b      	cmp	r3, #59	; 0x3b
 800157e:	dc06      	bgt.n	800158e <innit_aLight+0x42>
			  control_buffer[i] = reset;
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <innit_aLight+0x88>)
 8001582:	681a      	ldr	r2, [r3, #0]
 8001584:	4914      	ldr	r1, [pc, #80]	; (80015d8 <innit_aLight+0x8c>)
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800158c:	e018      	b.n	80015c0 <innit_aLight+0x74>
		  else
		  { //Uzupełnienie bitów z kolorami
			  c = k % 24; //zmienna C wyznacza miejsce bit'u
 800158e:	68f9      	ldr	r1, [r7, #12]
 8001590:	4b12      	ldr	r3, [pc, #72]	; (80015dc <innit_aLight+0x90>)
 8001592:	fba3 2301 	umull	r2, r3, r3, r1
 8001596:	091a      	lsrs	r2, r3, #4
 8001598:	4613      	mov	r3, r2
 800159a:	005b      	lsls	r3, r3, #1
 800159c:	4413      	add	r3, r2
 800159e:	00db      	lsls	r3, r3, #3
 80015a0:	1aca      	subs	r2, r1, r3
 80015a2:	4613      	mov	r3, r2
 80015a4:	713b      	strb	r3, [r7, #4]
			  control_buffer[i] = mapBitInNZR(color,c); //konwersja na NZR
 80015a6:	793b      	ldrb	r3, [r7, #4]
 80015a8:	4619      	mov	r1, r3
 80015aa:	6838      	ldr	r0, [r7, #0]
 80015ac:	f000 f818 	bl	80015e0 <mapBitInNZR>
 80015b0:	4601      	mov	r1, r0
 80015b2:	4a09      	ldr	r2, [pc, #36]	; (80015d8 <innit_aLight+0x8c>)
 80015b4:	68bb      	ldr	r3, [r7, #8]
 80015b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
			  k++;
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	3301      	adds	r3, #1
 80015be:	60fb      	str	r3, [r7, #12]
	for (int i = 0; i < n_bit; i++)
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	3301      	adds	r3, #1
 80015c4:	60bb      	str	r3, [r7, #8]
 80015c6:	68bb      	ldr	r3, [r7, #8]
 80015c8:	2bfb      	cmp	r3, #251	; 0xfb
 80015ca:	ddd6      	ble.n	800157a <innit_aLight+0x2e>
		  }
	}
}
 80015cc:	bf00      	nop
 80015ce:	3710      	adds	r7, #16
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20000298 	.word	0x20000298
 80015d8:	20000458 	.word	0x20000458
 80015dc:	aaaaaaab 	.word	0xaaaaaaab

080015e0 <mapBitInNZR>:

uint32_t mapBitInNZR(uint32_t color, uint8_t c) //Funkcja koduje bit w NZR odpowiednią kombinacją stanów wysokich i niskich
{
 80015e0:	b480      	push	{r7}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	70fb      	strb	r3, [r7, #3]
	if (((color & (1 << c)) >> c) == 1) //Sprawdzenie bitu c czy jest logicznym 1 lub 0
 80015ec:	78fb      	ldrb	r3, [r7, #3]
 80015ee:	2201      	movs	r2, #1
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	461a      	mov	r2, r3
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	401a      	ands	r2, r3
 80015fa:	78fb      	ldrb	r3, [r7, #3]
 80015fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001600:	2b01      	cmp	r3, #1
 8001602:	d102      	bne.n	800160a <mapBitInNZR+0x2a>
		return high;
 8001604:	4b05      	ldr	r3, [pc, #20]	; (800161c <mapBitInNZR+0x3c>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	e001      	b.n	800160e <mapBitInNZR+0x2e>
	else
		return low;
 800160a:	4b05      	ldr	r3, [pc, #20]	; (8001620 <mapBitInNZR+0x40>)
 800160c:	681b      	ldr	r3, [r3, #0]
}
 800160e:	4618      	mov	r0, r3
 8001610:	370c      	adds	r7, #12
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000000 	.word	0x20000000
 8001620:	20000004 	.word	0x20000004

08001624 <getColorInBit>:

uint32_t getColorInBit(uint8_t red,uint8_t green,uint8_t blue) //Funkcja zmienia kolejnośc kolorów z RGB na GRB
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b084      	sub	sp, #16
 8001628:	af00      	add	r7, sp, #0
 800162a:	4603      	mov	r3, r0
 800162c:	71fb      	strb	r3, [r7, #7]
 800162e:	460b      	mov	r3, r1
 8001630:	71bb      	strb	r3, [r7, #6]
 8001632:	4613      	mov	r3, r2
 8001634:	717b      	strb	r3, [r7, #5]
	uint8_t red_s = switchBitOrder(red); //Zamiana kolejności bitów
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4618      	mov	r0, r3
 800163a:	f000 f819 	bl	8001670 <switchBitOrder>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
	uint8_t green_s = switchBitOrder(green);
 8001642:	79bb      	ldrb	r3, [r7, #6]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 f813 	bl	8001670 <switchBitOrder>
 800164a:	4603      	mov	r3, r0
 800164c:	73bb      	strb	r3, [r7, #14]
	uint8_t blue_s = switchBitOrder(blue);
 800164e:	797b      	ldrb	r3, [r7, #5]
 8001650:	4618      	mov	r0, r3
 8001652:	f000 f80d 	bl	8001670 <switchBitOrder>
 8001656:	4603      	mov	r3, r0
 8001658:	737b      	strb	r3, [r7, #13]
	return (green_s + (red_s << 8) + (blue_s << 16)); //Zwrócenie odpowiednio ułożonych barw
 800165a:	7bba      	ldrb	r2, [r7, #14]
 800165c:	7bfb      	ldrb	r3, [r7, #15]
 800165e:	021b      	lsls	r3, r3, #8
 8001660:	441a      	add	r2, r3
 8001662:	7b7b      	ldrb	r3, [r7, #13]
 8001664:	041b      	lsls	r3, r3, #16
 8001666:	4413      	add	r3, r2
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <switchBitOrder>:

uint8_t switchBitOrder(uint8_t var) //Funkcja odwraca kolejność bitów
{
 8001670:	b480      	push	{r7}
 8001672:	b085      	sub	sp, #20
 8001674:	af00      	add	r7, sp, #0
 8001676:	4603      	mov	r3, r0
 8001678:	71fb      	strb	r3, [r7, #7]
    uint8_t rav = 0; //Zmienna zwracana
 800167a:	2300      	movs	r3, #0
 800167c:	73fb      	strb	r3, [r7, #15]
    for(int i=0;i<8;i++) //Przejście przez każde 8 bitów
 800167e:	2300      	movs	r3, #0
 8001680:	60bb      	str	r3, [r7, #8]
 8001682:	e013      	b.n	80016ac <switchBitOrder+0x3c>
    {
    	rav |= ((var>>i) & 0b1)<<(7-i); //Przeniesienie bitu na drugą stronę
 8001684:	79fa      	ldrb	r2, [r7, #7]
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	fa42 f303 	asr.w	r3, r2, r3
 800168c:	f003 0201 	and.w	r2, r3, #1
 8001690:	68bb      	ldr	r3, [r7, #8]
 8001692:	f1c3 0307 	rsb	r3, r3, #7
 8001696:	fa02 f303 	lsl.w	r3, r2, r3
 800169a:	b25a      	sxtb	r2, r3
 800169c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016a0:	4313      	orrs	r3, r2
 80016a2:	b25b      	sxtb	r3, r3
 80016a4:	73fb      	strb	r3, [r7, #15]
    for(int i=0;i<8;i++) //Przejście przez każde 8 bitów
 80016a6:	68bb      	ldr	r3, [r7, #8]
 80016a8:	3301      	adds	r3, #1
 80016aa:	60bb      	str	r3, [r7, #8]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	2b07      	cmp	r3, #7
 80016b0:	dde8      	ble.n	8001684 <switchBitOrder+0x14>
    }
	return rav; //Zwrócenie odbitej zmiennej
 80016b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <save>:
//================================================WS2812B====================================================================

//================================================LED ANIMACJE====================================================================

void save() //Funkcja zapisuje obecne zmienne
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
	SaveVarsToFlash();
 80016c4:	f000 ff20 	bl	8002508 <SaveVarsToFlash>
}
 80016c8:	bf00      	nop
 80016ca:	bd80      	pop	{r7, pc}

080016cc <bringback>:

void bringback() //Funkcja wczytuje ostatnie zachowane zmienne
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	af00      	add	r7, sp, #0
	getVarsFromFlash();
 80016d0:	f000 ff8e 	bl	80025f0 <getVarsFromFlash>
}
 80016d4:	bf00      	nop
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <init>:

void init() //Funkcja ustawia wartości zmiennych operacyjnych na nowe i je zapisuje
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	brightness = 0.6; //jasność (od 0 do 1 - mnoży kolory)
 80016dc:	4b09      	ldr	r3, [pc, #36]	; (8001704 <init+0x2c>)
 80016de:	4a0a      	ldr	r2, [pc, #40]	; (8001708 <init+0x30>)
 80016e0:	601a      	str	r2, [r3, #0]
	speed = 0.6; //prędkość animacji (od 0 do 1 - mnoży kolory)
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <init+0x34>)
 80016e4:	4a08      	ldr	r2, [pc, #32]	; (8001708 <init+0x30>)
 80016e6:	601a      	str	r2, [r3, #0]
	colourID = 2; //ID koloru
 80016e8:	4b09      	ldr	r3, [pc, #36]	; (8001710 <init+0x38>)
 80016ea:	2202      	movs	r2, #2
 80016ec:	701a      	strb	r2, [r3, #0]
	modeID = 1; //ID trybu wyświetlania (0 to tryb testowania)
 80016ee:	4b09      	ldr	r3, [pc, #36]	; (8001714 <init+0x3c>)
 80016f0:	2201      	movs	r2, #1
 80016f2:	701a      	strb	r2, [r3, #0]
	save(); //Zapisanie wartości zmiennych operacyjnych
 80016f4:	f7ff ffe4 	bl	80016c0 <save>
	somethingChanged = 1;  //Zmiana flagi zmiany wartości operacyjnych na true
 80016f8:	4b07      	ldr	r3, [pc, #28]	; (8001718 <init+0x40>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	701a      	strb	r2, [r3, #0]
}
 80016fe:	bf00      	nop
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	20000018 	.word	0x20000018
 8001708:	3f19999a 	.word	0x3f19999a
 800170c:	2000001c 	.word	0x2000001c
 8001710:	20000020 	.word	0x20000020
 8001714:	20000021 	.word	0x20000021
 8001718:	20000084 	.word	0x20000084

0800171c <testInit>:

void testInit() //Funkcja przygotowująca matryce do trybu testowego
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	bringback(); //Odczytanie wartości poprzednich zmiennych operacyjnych
 8001720:	f7ff ffd4 	bl	80016cc <bringback>
	save(); //Zapisanie wartości zmiennych operacyjnych
 8001724:	f7ff ffcc 	bl	80016c0 <save>

	modeID = 0; //Ustawienie wartości pod tryb testowy
 8001728:	4b14      	ldr	r3, [pc, #80]	; (800177c <testInit+0x60>)
 800172a:	2200      	movs	r2, #0
 800172c:	701a      	strb	r2, [r3, #0]
	colourID = 0;
 800172e:	4b14      	ldr	r3, [pc, #80]	; (8001780 <testInit+0x64>)
 8001730:	2200      	movs	r2, #0
 8001732:	701a      	strb	r2, [r3, #0]
	brightness = 1;
 8001734:	4b13      	ldr	r3, [pc, #76]	; (8001784 <testInit+0x68>)
 8001736:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800173a:	601a      	str	r2, [r3, #0]
	speed = 0.1;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <testInit+0x6c>)
 800173e:	4a13      	ldr	r2, [pc, #76]	; (800178c <testInit+0x70>)
 8001740:	601a      	str	r2, [r3, #0]

	inputColour[0] = 0; //Reset wprowadzanych kolorów i pozycji
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <testInit+0x74>)
 8001744:	2200      	movs	r2, #0
 8001746:	701a      	strb	r2, [r3, #0]
	inputColour[1] = 0;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <testInit+0x74>)
 800174a:	2200      	movs	r2, #0
 800174c:	705a      	strb	r2, [r3, #1]
	inputColour[2] = 0;
 800174e:	4b10      	ldr	r3, [pc, #64]	; (8001790 <testInit+0x74>)
 8001750:	2200      	movs	r2, #0
 8001752:	709a      	strb	r2, [r3, #2]
	x = 1;
 8001754:	4b0f      	ldr	r3, [pc, #60]	; (8001794 <testInit+0x78>)
 8001756:	2201      	movs	r2, #1
 8001758:	601a      	str	r2, [r3, #0]
	y = 1;
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <testInit+0x7c>)
 800175c:	2201      	movs	r2, #1
 800175e:	601a      	str	r2, [r3, #0]
	x2 = 1;
 8001760:	4b0e      	ldr	r3, [pc, #56]	; (800179c <testInit+0x80>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]
	y2 = 1;
 8001766:	4b0e      	ldr	r3, [pc, #56]	; (80017a0 <testInit+0x84>)
 8001768:	2201      	movs	r2, #1
 800176a:	601a      	str	r2, [r3, #0]

	innit_aLight(); //Inicjalizacja bufora kolorów od nowa
 800176c:	f7ff feee 	bl	800154c <innit_aLight>
	somethingChanged = 1; //Zmiana flagi zmiany wartości operacyjnych na true
 8001770:	4b0c      	ldr	r3, [pc, #48]	; (80017a4 <testInit+0x88>)
 8001772:	2201      	movs	r2, #1
 8001774:	701a      	strb	r2, [r3, #0]
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	20000021 	.word	0x20000021
 8001780:	20000020 	.word	0x20000020
 8001784:	20000018 	.word	0x20000018
 8001788:	2000001c 	.word	0x2000001c
 800178c:	3dcccccd 	.word	0x3dcccccd
 8001790:	200002a0 	.word	0x200002a0
 8001794:	20000008 	.word	0x20000008
 8001798:	20000010 	.word	0x20000010
 800179c:	2000000c 	.word	0x2000000c
 80017a0:	20000014 	.word	0x20000014
 80017a4:	20000084 	.word	0x20000084

080017a8 <checkArgs>:

void checkArgs() //Funkcja sprawdza poprawność zakresu zmiennych operacyjnych
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
	//Warunki sprawdzające zakresy jasności, prędkości, trybu, koloru i zapętlanie ich
	//Kolor
	if(colourID-2 < 0)
 80017ac:	4b33      	ldr	r3, [pc, #204]	; (800187c <checkArgs+0xd4>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	3b02      	subs	r3, #2
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	da06      	bge.n	80017c4 <checkArgs+0x1c>
	{
		colourID = noOfColours + 1;
 80017b6:	4b32      	ldr	r3, [pc, #200]	; (8001880 <checkArgs+0xd8>)
 80017b8:	781b      	ldrb	r3, [r3, #0]
 80017ba:	3301      	adds	r3, #1
 80017bc:	b2da      	uxtb	r2, r3
 80017be:	4b2f      	ldr	r3, [pc, #188]	; (800187c <checkArgs+0xd4>)
 80017c0:	701a      	strb	r2, [r3, #0]
 80017c2:	e00a      	b.n	80017da <checkArgs+0x32>
	}
	else if(colourID-2 > noOfColours-1)
 80017c4:	4b2d      	ldr	r3, [pc, #180]	; (800187c <checkArgs+0xd4>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	1e9a      	subs	r2, r3, #2
 80017ca:	4b2d      	ldr	r3, [pc, #180]	; (8001880 <checkArgs+0xd8>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dd02      	ble.n	80017da <checkArgs+0x32>
	{
		colourID = 2;
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <checkArgs+0xd4>)
 80017d6:	2202      	movs	r2, #2
 80017d8:	701a      	strb	r2, [r3, #0]
	}

	//Tryb
	if(modeID < 1)
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <checkArgs+0xdc>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d107      	bne.n	80017f2 <checkArgs+0x4a>
	{
		modeID = noOfAnimations-1;
 80017e2:	4b29      	ldr	r3, [pc, #164]	; (8001888 <checkArgs+0xe0>)
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	3b01      	subs	r3, #1
 80017ea:	b2da      	uxtb	r2, r3
 80017ec:	4b25      	ldr	r3, [pc, #148]	; (8001884 <checkArgs+0xdc>)
 80017ee:	701a      	strb	r2, [r3, #0]
 80017f0:	e00a      	b.n	8001808 <checkArgs+0x60>
	}
	else if(modeID > noOfAnimations-1)
 80017f2:	4b24      	ldr	r3, [pc, #144]	; (8001884 <checkArgs+0xdc>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	461a      	mov	r2, r3
 80017f8:	4b23      	ldr	r3, [pc, #140]	; (8001888 <checkArgs+0xe0>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	429a      	cmp	r2, r3
 8001800:	dd02      	ble.n	8001808 <checkArgs+0x60>
	{
		modeID = 1;
 8001802:	4b20      	ldr	r3, [pc, #128]	; (8001884 <checkArgs+0xdc>)
 8001804:	2201      	movs	r2, #1
 8001806:	701a      	strb	r2, [r3, #0]
	}

	//Jasność
	if(brightness <= 0)
 8001808:	4b20      	ldr	r3, [pc, #128]	; (800188c <checkArgs+0xe4>)
 800180a:	edd3 7a00 	vldr	s15, [r3]
 800180e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001812:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001816:	d804      	bhi.n	8001822 <checkArgs+0x7a>
	{
		brightness = 1;
 8001818:	4b1c      	ldr	r3, [pc, #112]	; (800188c <checkArgs+0xe4>)
 800181a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	e00c      	b.n	800183c <checkArgs+0x94>
	}
	else if(brightness > 1)
 8001822:	4b1a      	ldr	r3, [pc, #104]	; (800188c <checkArgs+0xe4>)
 8001824:	edd3 7a00 	vldr	s15, [r3]
 8001828:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800182c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001830:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001834:	dd02      	ble.n	800183c <checkArgs+0x94>
	{
		brightness = 0.2;
 8001836:	4b15      	ldr	r3, [pc, #84]	; (800188c <checkArgs+0xe4>)
 8001838:	4a15      	ldr	r2, [pc, #84]	; (8001890 <checkArgs+0xe8>)
 800183a:	601a      	str	r2, [r3, #0]
	}

	//Prędkość
	if(speed <= 0)
 800183c:	4b15      	ldr	r3, [pc, #84]	; (8001894 <checkArgs+0xec>)
 800183e:	edd3 7a00 	vldr	s15, [r3]
 8001842:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800184a:	d804      	bhi.n	8001856 <checkArgs+0xae>
	{
		speed = 1;
 800184c:	4b11      	ldr	r3, [pc, #68]	; (8001894 <checkArgs+0xec>)
 800184e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001852:	601a      	str	r2, [r3, #0]
	}
	else if(speed > 1)
	{
		speed = 0.2;
	}
}
 8001854:	e00d      	b.n	8001872 <checkArgs+0xca>
	else if(speed > 1)
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <checkArgs+0xec>)
 8001858:	edd3 7a00 	vldr	s15, [r3]
 800185c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001860:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001864:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001868:	dc00      	bgt.n	800186c <checkArgs+0xc4>
}
 800186a:	e002      	b.n	8001872 <checkArgs+0xca>
		speed = 0.2;
 800186c:	4b09      	ldr	r3, [pc, #36]	; (8001894 <checkArgs+0xec>)
 800186e:	4a08      	ldr	r2, [pc, #32]	; (8001890 <checkArgs+0xe8>)
 8001870:	601a      	str	r2, [r3, #0]
}
 8001872:	bf00      	nop
 8001874:	46bd      	mov	sp, r7
 8001876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187a:	4770      	bx	lr
 800187c:	20000020 	.word	0x20000020
 8001880:	2000004f 	.word	0x2000004f
 8001884:	20000021 	.word	0x20000021
 8001888:	20000088 	.word	0x20000088
 800188c:	20000018 	.word	0x20000018
 8001890:	3e4ccccd 	.word	0x3e4ccccd
 8001894:	2000001c 	.word	0x2000001c

08001898 <exeLED>:

void exeLED() //Funkcja wybiera odpowiedni tryb
{
 8001898:	b580      	push	{r7, lr}
 800189a:	af00      	add	r7, sp, #0
	//Swicth, który wybiera odpowiedni tryb na bazie zmiennej operacyjnej modeID
	switch(modeID)
 800189c:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <exeLED+0x58>)
 800189e:	781b      	ldrb	r3, [r3, #0]
 80018a0:	2b05      	cmp	r3, #5
 80018a2:	d821      	bhi.n	80018e8 <exeLED+0x50>
 80018a4:	a201      	add	r2, pc, #4	; (adr r2, 80018ac <exeLED+0x14>)
 80018a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018aa:	bf00      	nop
 80018ac:	080018c5 	.word	0x080018c5
 80018b0:	080018cb 	.word	0x080018cb
 80018b4:	080018d1 	.word	0x080018d1
 80018b8:	080018d7 	.word	0x080018d7
 80018bc:	080018dd 	.word	0x080018dd
 80018c0:	080018e3 	.word	0x080018e3
	{
	case 0:
		testMode(); //Tryb testowy metrycy
 80018c4:	f000 f8e4 	bl	8001a90 <testMode>
		break;
 80018c8:	e00f      	b.n	80018ea <exeLED+0x52>
	case 1:
		oneColour(); //animacja 1
 80018ca:	f000 f941 	bl	8001b50 <oneColour>
		break;
 80018ce:	e00c      	b.n	80018ea <exeLED+0x52>
	case 2:
		colourPulse(); //animacja 2
 80018d0:	f000 f952 	bl	8001b78 <colourPulse>
		break;
 80018d4:	e009      	b.n	80018ea <exeLED+0x52>
	case 3:
		colourFade(); //animacja 3
 80018d6:	f000 f9f3 	bl	8001cc0 <colourFade>
		break;
 80018da:	e006      	b.n	80018ea <exeLED+0x52>
	case 4:
		rainbow(); //animacja 4
 80018dc:	f000 fa6a 	bl	8001db4 <rainbow>
		break;
 80018e0:	e003      	b.n	80018ea <exeLED+0x52>
	case 5:
		iconMode(); //animacja 5 - animacja ikon
 80018e2:	f000 fb17 	bl	8001f14 <iconMode>
		break;
 80018e6:	e000      	b.n	80018ea <exeLED+0x52>
	default:
		break;
 80018e8:	bf00      	nop
	}
}
 80018ea:	bf00      	nop
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20000021 	.word	0x20000021

080018f4 <colorSwitch>:

//Animacje

uint8_t * colorSwitch(uint8_t * color_vector1, uint8_t * color_vector2, uint8_t jump) //Funkcja przechodzi płynnie między dwoma kolorami
{
 80018f4:	b480      	push	{r7}
 80018f6:	b087      	sub	sp, #28
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	60f8      	str	r0, [r7, #12]
 80018fc:	60b9      	str	r1, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	71fb      	strb	r3, [r7, #7]

	static uint8_t returnColor[3]; //Zwracany kolor
	static float newColor[3]; //Kolor pomocniczy do dokładnego obliczenia wartości
	static float dif[3]; //Różnica

	if(somethingChanged) //Sprawdzenie czy zmienne operacyjnie się zmieniły
 8001902:	4b5e      	ldr	r3, [pc, #376]	; (8001a7c <colorSwitch+0x188>)
 8001904:	781b      	ldrb	r3, [r3, #0]
 8001906:	2b00      	cmp	r3, #0
 8001908:	d034      	beq.n	8001974 <colorSwitch+0x80>
	{
		for(int e = 0; e<3; e++)
 800190a:	2300      	movs	r3, #0
 800190c:	617b      	str	r3, [r7, #20]
 800190e:	e02e      	b.n	800196e <colorSwitch+0x7a>
		{
			newColor[e] = color_vector1[e]; //Przepisanie wartości koloru pierwszego
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	68fa      	ldr	r2, [r7, #12]
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	ee07 3a90 	vmov	s15, r3
 800191c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001920:	4a57      	ldr	r2, [pc, #348]	; (8001a80 <colorSwitch+0x18c>)
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	009b      	lsls	r3, r3, #2
 8001926:	4413      	add	r3, r2
 8001928:	edc3 7a00 	vstr	s15, [r3]
			dif[e] = (float)abs(color_vector1[e] - color_vector2[e])/jump; //Ustawienie różnicy animacji
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	68fa      	ldr	r2, [r7, #12]
 8001930:	4413      	add	r3, r2
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	4619      	mov	r1, r3
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	68ba      	ldr	r2, [r7, #8]
 800193a:	4413      	add	r3, r2
 800193c:	781b      	ldrb	r3, [r3, #0]
 800193e:	1acb      	subs	r3, r1, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	bfb8      	it	lt
 8001944:	425b      	neglt	r3, r3
 8001946:	ee07 3a90 	vmov	s15, r3
 800194a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	ee07 3a90 	vmov	s15, r3
 8001954:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	4a49      	ldr	r2, [pc, #292]	; (8001a84 <colorSwitch+0x190>)
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	009b      	lsls	r3, r3, #2
 8001962:	4413      	add	r3, r2
 8001964:	edc3 7a00 	vstr	s15, [r3]
		for(int e = 0; e<3; e++)
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	3301      	adds	r3, #1
 800196c:	617b      	str	r3, [r7, #20]
 800196e:	697b      	ldr	r3, [r7, #20]
 8001970:	2b02      	cmp	r3, #2
 8001972:	ddcd      	ble.n	8001910 <colorSwitch+0x1c>
		}
	}


	for(int e = 0; e<3; e++)
 8001974:	2300      	movs	r3, #0
 8001976:	613b      	str	r3, [r7, #16]
 8001978:	e076      	b.n	8001a68 <colorSwitch+0x174>
	{
		//Warunek wybiera odpowiedni kierunek zmiany koloru na podstawie różnicy argumentów funkcji
		if(color_vector1[e] > color_vector2[e])
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	4413      	add	r3, r2
 8001980:	781a      	ldrb	r2, [r3, #0]
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	68b9      	ldr	r1, [r7, #8]
 8001986:	440b      	add	r3, r1
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	429a      	cmp	r2, r3
 800198c:	d92a      	bls.n	80019e4 <colorSwitch+0xf0>
		{
			//Zmniejszenie wartości barwy e
			newColor[e] -= dif[e];
 800198e:	4a3c      	ldr	r2, [pc, #240]	; (8001a80 <colorSwitch+0x18c>)
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	009b      	lsls	r3, r3, #2
 8001994:	4413      	add	r3, r2
 8001996:	ed93 7a00 	vldr	s14, [r3]
 800199a:	4a3a      	ldr	r2, [pc, #232]	; (8001a84 <colorSwitch+0x190>)
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	edd3 7a00 	vldr	s15, [r3]
 80019a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019aa:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <colorSwitch+0x18c>)
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	009b      	lsls	r3, r3, #2
 80019b0:	4413      	add	r3, r2
 80019b2:	edc3 7a00 	vstr	s15, [r3]
			//Sprawdzenie czy wartość z argumentu drugiego została osiągnięta
			if(newColor[e] < color_vector2[e])
 80019b6:	4a32      	ldr	r2, [pc, #200]	; (8001a80 <colorSwitch+0x18c>)
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	009b      	lsls	r3, r3, #2
 80019bc:	4413      	add	r3, r2
 80019be:	ed93 7a00 	vldr	s14, [r3]
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	68ba      	ldr	r2, [r7, #8]
 80019c6:	4413      	add	r3, r2
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	ee07 3a90 	vmov	s15, r3
 80019ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80019d2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80019d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019da:	d52d      	bpl.n	8001a38 <colorSwitch+0x144>
			{
				//Oznaczenie flagi końca zmiany koloru na 1
				colorSwitchStatus = 1;
 80019dc:	4b2a      	ldr	r3, [pc, #168]	; (8001a88 <colorSwitch+0x194>)
 80019de:	2201      	movs	r2, #1
 80019e0:	601a      	str	r2, [r3, #0]
 80019e2:	e029      	b.n	8001a38 <colorSwitch+0x144>
			}
		}
		else
		{
			//Zwiększenie wartości barwy e
			newColor[e] += dif[e];
 80019e4:	4a26      	ldr	r2, [pc, #152]	; (8001a80 <colorSwitch+0x18c>)
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	ed93 7a00 	vldr	s14, [r3]
 80019f0:	4a24      	ldr	r2, [pc, #144]	; (8001a84 <colorSwitch+0x190>)
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	009b      	lsls	r3, r3, #2
 80019f6:	4413      	add	r3, r2
 80019f8:	edd3 7a00 	vldr	s15, [r3]
 80019fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a00:	4a1f      	ldr	r2, [pc, #124]	; (8001a80 <colorSwitch+0x18c>)
 8001a02:	693b      	ldr	r3, [r7, #16]
 8001a04:	009b      	lsls	r3, r3, #2
 8001a06:	4413      	add	r3, r2
 8001a08:	edc3 7a00 	vstr	s15, [r3]
			//Sprawdzenie czy wartość z argumentu drugiego została osiągnięta
			if(newColor[e] > color_vector2[e])
 8001a0c:	4a1c      	ldr	r2, [pc, #112]	; (8001a80 <colorSwitch+0x18c>)
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	4413      	add	r3, r2
 8001a14:	ed93 7a00 	vldr	s14, [r3]
 8001a18:	693b      	ldr	r3, [r7, #16]
 8001a1a:	68ba      	ldr	r2, [r7, #8]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	ee07 3a90 	vmov	s15, r3
 8001a24:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a28:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a30:	dd02      	ble.n	8001a38 <colorSwitch+0x144>
			{
				//Oznaczenie flagi końca zmiany koloru na 1
				colorSwitchStatus = 1;
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <colorSwitch+0x194>)
 8001a34:	2201      	movs	r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
			}
		}
		if(!colorSwitchStatus) //Sprawdzenie czy kolor 2 został osiągnięty
 8001a38:	4b13      	ldr	r3, [pc, #76]	; (8001a88 <colorSwitch+0x194>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d110      	bne.n	8001a62 <colorSwitch+0x16e>
		{
			returnColor[e] = newColor[e]; //Przepisanie zmienionej wartości koloru
 8001a40:	4a0f      	ldr	r2, [pc, #60]	; (8001a80 <colorSwitch+0x18c>)
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	009b      	lsls	r3, r3, #2
 8001a46:	4413      	add	r3, r2
 8001a48:	edd3 7a00 	vldr	s15, [r3]
 8001a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a50:	edc7 7a00 	vstr	s15, [r7]
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	b2d9      	uxtb	r1, r3
 8001a58:	4a0c      	ldr	r2, [pc, #48]	; (8001a8c <colorSwitch+0x198>)
 8001a5a:	693b      	ldr	r3, [r7, #16]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	460a      	mov	r2, r1
 8001a60:	701a      	strb	r2, [r3, #0]
	for(int e = 0; e<3; e++)
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3301      	adds	r3, #1
 8001a66:	613b      	str	r3, [r7, #16]
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	2b02      	cmp	r3, #2
 8001a6c:	dd85      	ble.n	800197a <colorSwitch+0x86>
		}
	}
	return returnColor; //Zwrócenie uzyskanego koloru
 8001a6e:	4b07      	ldr	r3, [pc, #28]	; (8001a8c <colorSwitch+0x198>)
}
 8001a70:	4618      	mov	r0, r3
 8001a72:	371c      	adds	r7, #28
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr
 8001a7c:	20000084 	.word	0x20000084
 8001a80:	200002b4 	.word	0x200002b4
 8001a84:	200002c0 	.word	0x200002c0
 8001a88:	200002a8 	.word	0x200002a8
 8001a8c:	200002cc 	.word	0x200002cc

08001a90 <testMode>:

void testMode() //Funkcja zapala na matrycy ledy na bazie wprowadzonych współrzędnych macierzy
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
	if(somethingChanged) //Sprawdzenie czy obliczenia są konieczne
 8001a96:	4b27      	ldr	r3, [pc, #156]	; (8001b34 <testMode+0xa4>)
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d045      	beq.n	8001b2a <testMode+0x9a>
	{
		for(int i = 1; i<=16; i++) //Przejście po kolumnach matrycy
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	607b      	str	r3, [r7, #4]
 8001aa2:	e03f      	b.n	8001b24 <testMode+0x94>
		{
			if(i >= x && i <= x2) //Sprawdzenie czy w kolumnie znajduje się nowy kolor
 8001aa4:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <testMode+0xa8>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	db37      	blt.n	8001b1e <testMode+0x8e>
 8001aae:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <testMode+0xac>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	687a      	ldr	r2, [r7, #4]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	dc32      	bgt.n	8001b1e <testMode+0x8e>
			{
				uint16_t startLed; //Deklaracja ledu startującego
				if(i%2!=0) //Sprawdzenie czy kolumna jest nieparzysta
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	f003 0301 	and.w	r3, r3, #1
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d00c      	beq.n	8001adc <testMode+0x4c>
				{
					startLed = 16*(i-1) + (y-1); //przypisanie wartości ledu startującego
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3b01      	subs	r3, #1
 8001ac6:	b29b      	uxth	r3, r3
 8001ac8:	011b      	lsls	r3, r3, #4
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b1c      	ldr	r3, [pc, #112]	; (8001b40 <testMode+0xb0>)
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	b29b      	uxth	r3, r3
 8001ad2:	4413      	add	r3, r2
 8001ad4:	b29b      	uxth	r3, r3
 8001ad6:	3b01      	subs	r3, #1
 8001ad8:	807b      	strh	r3, [r7, #2]
 8001ada:	e00b      	b.n	8001af4 <testMode+0x64>
				}
				else
				{
					startLed = 16*(i-1) + (16-y2); //przypisanie wartości ledu startującego
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	3b01      	subs	r3, #1
 8001ae0:	b29b      	uxth	r3, r3
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	4b17      	ldr	r3, [pc, #92]	; (8001b44 <testMode+0xb4>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	b29b      	uxth	r3, r3
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	b29b      	uxth	r3, r3
 8001af0:	3310      	adds	r3, #16
 8001af2:	807b      	strh	r3, [r7, #2]
				}
				uint16_t ledNo = y2 - y + 1; //przypisanie ilości ledów do zapalenia w danej kolumnie
 8001af4:	4b13      	ldr	r3, [pc, #76]	; (8001b44 <testMode+0xb4>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <testMode+0xb0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	1ad3      	subs	r3, r2, r3
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	3301      	adds	r3, #1
 8001b06:	803b      	strh	r3, [r7, #0]
				get_aLight(colourPtr[colourID],startLed,ledNo); //Zapalenie ledów
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <testMode+0xb8>)
 8001b0a:	781b      	ldrb	r3, [r3, #0]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <testMode+0xbc>)
 8001b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b14:	883a      	ldrh	r2, [r7, #0]
 8001b16:	8879      	ldrh	r1, [r7, #2]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff fc8d 	bl	8001438 <get_aLight>
		for(int i = 1; i<=16; i++) //Przejście po kolumnach matrycy
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3301      	adds	r3, #1
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	2b10      	cmp	r3, #16
 8001b28:	ddbc      	ble.n	8001aa4 <testMode+0x14>
			}
		}
	}
}
 8001b2a:	bf00      	nop
 8001b2c:	3708      	adds	r7, #8
 8001b2e:	46bd      	mov	sp, r7
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	20000084 	.word	0x20000084
 8001b38:	20000008 	.word	0x20000008
 8001b3c:	2000000c 	.word	0x2000000c
 8001b40:	20000010 	.word	0x20000010
 8001b44:	20000014 	.word	0x20000014
 8001b48:	20000020 	.word	0x20000020
 8001b4c:	20000050 	.word	0x20000050

08001b50 <oneColour>:

void oneColour() //funkcja wyświetla jeden kolor
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
	get_aLight(colourPtr[colourID],0,n_led);
 8001b54:	4b06      	ldr	r3, [pc, #24]	; (8001b70 <oneColour+0x20>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	461a      	mov	r2, r3
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <oneColour+0x24>)
 8001b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b60:	2208      	movs	r2, #8
 8001b62:	2100      	movs	r1, #0
 8001b64:	4618      	mov	r0, r3
 8001b66:	f7ff fc67 	bl	8001438 <get_aLight>
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	20000020 	.word	0x20000020
 8001b74:	20000050 	.word	0x20000050

08001b78 <colourPulse>:

void colourPulse() //Funkcja wyswietla pulsujący kolor
{
 8001b78:	b590      	push	{r4, r7, lr}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
	static uint8_t animationToggle = 0; //Przejście do kolejnego etapu animacji
	static uint8_t nextColor[3]; //kolejny kolor

	if(somethingChanged) //Sprawdzenie czy zmienne operacyjne uległy zmianie
 8001b7e:	4b4a      	ldr	r3, [pc, #296]	; (8001ca8 <colourPulse+0x130>)
 8001b80:	781b      	ldrb	r3, [r3, #0]
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d04a      	beq.n	8001c1c <colourPulse+0xa4>
	{
		uint8_t *color_vector = colourPtr[colourID]; //Przepisanie nowego koloru
 8001b86:	4b49      	ldr	r3, [pc, #292]	; (8001cac <colourPulse+0x134>)
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b48      	ldr	r3, [pc, #288]	; (8001cb0 <colourPulse+0x138>)
 8001b8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b92:	607b      	str	r3, [r7, #4]
		nextColor[0] = color_vector[0] * 0.15;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	781b      	ldrb	r3, [r3, #0]
 8001b98:	4618      	mov	r0, r3
 8001b9a:	f7fe fce3 	bl	8000564 <__aeabi_i2d>
 8001b9e:	a340      	add	r3, pc, #256	; (adr r3, 8001ca0 <colourPulse+0x128>)
 8001ba0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ba4:	f7fe fd48 	bl	8000638 <__aeabi_dmul>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	460c      	mov	r4, r1
 8001bac:	4618      	mov	r0, r3
 8001bae:	4621      	mov	r1, r4
 8001bb0:	f7fe ffdc 	bl	8000b6c <__aeabi_d2uiz>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	b2da      	uxtb	r2, r3
 8001bb8:	4b3e      	ldr	r3, [pc, #248]	; (8001cb4 <colourPulse+0x13c>)
 8001bba:	701a      	strb	r2, [r3, #0]
		nextColor[1] = color_vector[1] * 0.15;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	3301      	adds	r3, #1
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	f7fe fcce 	bl	8000564 <__aeabi_i2d>
 8001bc8:	a335      	add	r3, pc, #212	; (adr r3, 8001ca0 <colourPulse+0x128>)
 8001bca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bce:	f7fe fd33 	bl	8000638 <__aeabi_dmul>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	460c      	mov	r4, r1
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	4621      	mov	r1, r4
 8001bda:	f7fe ffc7 	bl	8000b6c <__aeabi_d2uiz>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b34      	ldr	r3, [pc, #208]	; (8001cb4 <colourPulse+0x13c>)
 8001be4:	705a      	strb	r2, [r3, #1]
		nextColor[2] = color_vector[2] * 0.15;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	3302      	adds	r3, #2
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	4618      	mov	r0, r3
 8001bee:	f7fe fcb9 	bl	8000564 <__aeabi_i2d>
 8001bf2:	a32b      	add	r3, pc, #172	; (adr r3, 8001ca0 <colourPulse+0x128>)
 8001bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bf8:	f7fe fd1e 	bl	8000638 <__aeabi_dmul>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	460c      	mov	r4, r1
 8001c00:	4618      	mov	r0, r3
 8001c02:	4621      	mov	r1, r4
 8001c04:	f7fe ffb2 	bl	8000b6c <__aeabi_d2uiz>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	b2da      	uxtb	r2, r3
 8001c0c:	4b29      	ldr	r3, [pc, #164]	; (8001cb4 <colourPulse+0x13c>)
 8001c0e:	709a      	strb	r2, [r3, #2]
		colorSwitchStatus=0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001c10:	4b29      	ldr	r3, [pc, #164]	; (8001cb8 <colourPulse+0x140>)
 8001c12:	2200      	movs	r2, #0
 8001c14:	601a      	str	r2, [r3, #0]
		animationToggle = 0; //Ustawienie zmiennej toggle na 0
 8001c16:	4b29      	ldr	r3, [pc, #164]	; (8001cbc <colourPulse+0x144>)
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
	}

	if(colorSwitchStatus == 1) //Sprawdzenie czy zmiana koloru została zakończona
 8001c1c:	4b26      	ldr	r3, [pc, #152]	; (8001cb8 <colourPulse+0x140>)
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d10f      	bne.n	8001c44 <colourPulse+0xcc>
	{
		//Zmiana wartości zmiennej toggle na przeciwną
		animationToggle = (animationToggle == 1) ? 0 : 1;
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <colourPulse+0x144>)
 8001c26:	781b      	ldrb	r3, [r3, #0]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	bf14      	ite	ne
 8001c2c:	2301      	movne	r3, #1
 8001c2e:	2300      	moveq	r3, #0
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b21      	ldr	r3, [pc, #132]	; (8001cbc <colourPulse+0x144>)
 8001c36:	701a      	strb	r2, [r3, #0]
		colorSwitchStatus = 0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001c38:	4b1f      	ldr	r3, [pc, #124]	; (8001cb8 <colourPulse+0x140>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	601a      	str	r2, [r3, #0]
		somethingChanged = 1; //Ustawienie flagi zmiany zmiennych operacyjnych na 1
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <colourPulse+0x130>)
 8001c40:	2201      	movs	r2, #1
 8001c42:	701a      	strb	r2, [r3, #0]
	}

	//Wybranie odpowiedniego wywołania funkcji colorSwitch() na bazie zmiennej Toggle
	if(animationToggle == 0)
 8001c44:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <colourPulse+0x144>)
 8001c46:	781b      	ldrb	r3, [r3, #0]
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d111      	bne.n	8001c70 <colourPulse+0xf8>
	{
		//Przejście z koloru bazowego na przyciemniony
		get_aLight(colorSwitch(colourPtr[colourID], nextColor, 40),0,n_led);
 8001c4c:	4b17      	ldr	r3, [pc, #92]	; (8001cac <colourPulse+0x134>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b17      	ldr	r3, [pc, #92]	; (8001cb0 <colourPulse+0x138>)
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	2228      	movs	r2, #40	; 0x28
 8001c5a:	4916      	ldr	r1, [pc, #88]	; (8001cb4 <colourPulse+0x13c>)
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f7ff fe49 	bl	80018f4 <colorSwitch>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2208      	movs	r2, #8
 8001c66:	2100      	movs	r1, #0
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff fbe5 	bl	8001438 <get_aLight>
	else
	{
		//Przejście z koloru przyciemnionego na bazowy
		get_aLight(colorSwitch(nextColor, colourPtr[colourID], 40),0,n_led);
	}
}
 8001c6e:	e010      	b.n	8001c92 <colourPulse+0x11a>
		get_aLight(colorSwitch(nextColor, colourPtr[colourID], 40),0,n_led);
 8001c70:	4b0e      	ldr	r3, [pc, #56]	; (8001cac <colourPulse+0x134>)
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	461a      	mov	r2, r3
 8001c76:	4b0e      	ldr	r3, [pc, #56]	; (8001cb0 <colourPulse+0x138>)
 8001c78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c7c:	2228      	movs	r2, #40	; 0x28
 8001c7e:	4619      	mov	r1, r3
 8001c80:	480c      	ldr	r0, [pc, #48]	; (8001cb4 <colourPulse+0x13c>)
 8001c82:	f7ff fe37 	bl	80018f4 <colorSwitch>
 8001c86:	4603      	mov	r3, r0
 8001c88:	2208      	movs	r2, #8
 8001c8a:	2100      	movs	r1, #0
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff fbd3 	bl	8001438 <get_aLight>
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd90      	pop	{r4, r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	f3af 8000 	nop.w
 8001ca0:	33333333 	.word	0x33333333
 8001ca4:	3fc33333 	.word	0x3fc33333
 8001ca8:	20000084 	.word	0x20000084
 8001cac:	20000020 	.word	0x20000020
 8001cb0:	20000050 	.word	0x20000050
 8001cb4:	200002d0 	.word	0x200002d0
 8001cb8:	200002a8 	.word	0x200002a8
 8001cbc:	200002d3 	.word	0x200002d3

08001cc0 <colourFade>:

void colourFade() //Funkcja przechodzi płynnie między obecnym kolorem a następnym
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
	static uint8_t animationToggle = 0; //Przejście do kolejnego etapu animacji
	static uint8_t color1[3]; //kolor pierwszy

	if(somethingChanged) //Sprawdzenie czy zmienne operacyjne uległy zmianie
 8001cc6:	4b34      	ldr	r3, [pc, #208]	; (8001d98 <colourFade+0xd8>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d025      	beq.n	8001d1a <colourFade+0x5a>
	{
		//uzyskanie ID następnego koloru
		uint8_t colourIDtmp = (colourID + 1 > noOfColours + 1) ? 2 : colourID + 1;
 8001cce:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <colourFade+0xdc>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	1c5a      	adds	r2, r3, #1
 8001cd4:	4b32      	ldr	r3, [pc, #200]	; (8001da0 <colourFade+0xe0>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	3301      	adds	r3, #1
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dc04      	bgt.n	8001ce8 <colourFade+0x28>
 8001cde:	4b2f      	ldr	r3, [pc, #188]	; (8001d9c <colourFade+0xdc>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	e000      	b.n	8001cea <colourFade+0x2a>
 8001ce8:	2302      	movs	r3, #2
 8001cea:	71fb      	strb	r3, [r7, #7]
		uint8_t *color_vector = colourPtr[colourIDtmp]; //Przepisanie koloru 1
 8001cec:	79fb      	ldrb	r3, [r7, #7]
 8001cee:	4a2d      	ldr	r2, [pc, #180]	; (8001da4 <colourFade+0xe4>)
 8001cf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf4:	603b      	str	r3, [r7, #0]
		color1[0] = color_vector[0];
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	4b2b      	ldr	r3, [pc, #172]	; (8001da8 <colourFade+0xe8>)
 8001cfc:	701a      	strb	r2, [r3, #0]
		color1[1] = color_vector[1];
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	785a      	ldrb	r2, [r3, #1]
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <colourFade+0xe8>)
 8001d04:	705a      	strb	r2, [r3, #1]
		color1[2] = color_vector[2];
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	789a      	ldrb	r2, [r3, #2]
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <colourFade+0xe8>)
 8001d0c:	709a      	strb	r2, [r3, #2]
		colorSwitchStatus=0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001d0e:	4b27      	ldr	r3, [pc, #156]	; (8001dac <colourFade+0xec>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	601a      	str	r2, [r3, #0]
		animationToggle = 0; //Ustawienie zmiennej toggle na 0
 8001d14:	4b26      	ldr	r3, [pc, #152]	; (8001db0 <colourFade+0xf0>)
 8001d16:	2200      	movs	r2, #0
 8001d18:	701a      	strb	r2, [r3, #0]
	}

	if(colorSwitchStatus == 1) //Sprawdzenie czy zmiana koloru została zakończona
 8001d1a:	4b24      	ldr	r3, [pc, #144]	; (8001dac <colourFade+0xec>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2b01      	cmp	r3, #1
 8001d20:	d10f      	bne.n	8001d42 <colourFade+0x82>
	{
		//Zmiana wartości zmiennej toggle na kolejną
		animationToggle = (animationToggle == 1) ? 0 : 1;
 8001d22:	4b23      	ldr	r3, [pc, #140]	; (8001db0 <colourFade+0xf0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	2b01      	cmp	r3, #1
 8001d28:	bf14      	ite	ne
 8001d2a:	2301      	movne	r3, #1
 8001d2c:	2300      	moveq	r3, #0
 8001d2e:	b2db      	uxtb	r3, r3
 8001d30:	461a      	mov	r2, r3
 8001d32:	4b1f      	ldr	r3, [pc, #124]	; (8001db0 <colourFade+0xf0>)
 8001d34:	701a      	strb	r2, [r3, #0]
		colorSwitchStatus = 0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001d36:	4b1d      	ldr	r3, [pc, #116]	; (8001dac <colourFade+0xec>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	601a      	str	r2, [r3, #0]
		somethingChanged = 1; //Ustawienie flagi zmiany zmiennych operacyjnych na 1
 8001d3c:	4b16      	ldr	r3, [pc, #88]	; (8001d98 <colourFade+0xd8>)
 8001d3e:	2201      	movs	r2, #1
 8001d40:	701a      	strb	r2, [r3, #0]
	}

	//Wybranie odpowiedniego wywołania funkcji colorSwitch() na bazie zmiennej Toggle
	if(animationToggle == 0)
 8001d42:	4b1b      	ldr	r3, [pc, #108]	; (8001db0 <colourFade+0xf0>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d111      	bne.n	8001d6e <colourFade+0xae>
	{
		//Przejście z color 1 na bazowy
		get_aLight(colorSwitch(colourPtr[colourID], color1, 40),0,n_led);
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <colourFade+0xdc>)
 8001d4c:	781b      	ldrb	r3, [r3, #0]
 8001d4e:	461a      	mov	r2, r3
 8001d50:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <colourFade+0xe4>)
 8001d52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d56:	2228      	movs	r2, #40	; 0x28
 8001d58:	4913      	ldr	r1, [pc, #76]	; (8001da8 <colourFade+0xe8>)
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fdca 	bl	80018f4 <colorSwitch>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2208      	movs	r2, #8
 8001d64:	2100      	movs	r1, #0
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fb66 	bl	8001438 <get_aLight>
	else
	{
		//Przejście z bazowego na color 1
		get_aLight(colorSwitch(color1, colourPtr[colourID], 40),0,n_led);
	}
}
 8001d6c:	e010      	b.n	8001d90 <colourFade+0xd0>
		get_aLight(colorSwitch(color1, colourPtr[colourID], 40),0,n_led);
 8001d6e:	4b0b      	ldr	r3, [pc, #44]	; (8001d9c <colourFade+0xdc>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	4b0b      	ldr	r3, [pc, #44]	; (8001da4 <colourFade+0xe4>)
 8001d76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d7a:	2228      	movs	r2, #40	; 0x28
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	480a      	ldr	r0, [pc, #40]	; (8001da8 <colourFade+0xe8>)
 8001d80:	f7ff fdb8 	bl	80018f4 <colorSwitch>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2208      	movs	r2, #8
 8001d88:	2100      	movs	r1, #0
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f7ff fb54 	bl	8001438 <get_aLight>
}
 8001d90:	bf00      	nop
 8001d92:	3708      	adds	r7, #8
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	20000084 	.word	0x20000084
 8001d9c:	20000020 	.word	0x20000020
 8001da0:	2000004f 	.word	0x2000004f
 8001da4:	20000050 	.word	0x20000050
 8001da8:	200002d4 	.word	0x200002d4
 8001dac:	200002a8 	.word	0x200002a8
 8001db0:	200002d7 	.word	0x200002d7

08001db4 <rainbow>:

void rainbow() //Funkcja przechodzi płynnie między wszystkimi kolorami
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	af00      	add	r7, sp, #0
	static uint8_t colourIDR = 2; //ID koloru 1
	static uint8_t colourIDRN = 3; //ID koloru 2

	if(somethingChanged) //Sprawdzenie czy zmienne operacyjne uległy zmianie
 8001db8:	4b24      	ldr	r3, [pc, #144]	; (8001e4c <rainbow+0x98>)
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d002      	beq.n	8001dc6 <rainbow+0x12>
	{
		colorSwitchStatus=0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001dc0:	4b23      	ldr	r3, [pc, #140]	; (8001e50 <rainbow+0x9c>)
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
	}

	if(colorSwitchStatus == 1) //Sprawdzenie czy zmiana koloru została zakończona
 8001dc6:	4b22      	ldr	r3, [pc, #136]	; (8001e50 <rainbow+0x9c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d125      	bne.n	8001e1a <rainbow+0x66>
	{
		colourIDR = (colourIDR + 1 > noOfColours + 1) ? 2 : colourIDR + 1; //Przejście na kolejny kolor
 8001dce:	4b21      	ldr	r3, [pc, #132]	; (8001e54 <rainbow+0xa0>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	1c5a      	adds	r2, r3, #1
 8001dd4:	4b20      	ldr	r3, [pc, #128]	; (8001e58 <rainbow+0xa4>)
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	3301      	adds	r3, #1
 8001dda:	429a      	cmp	r2, r3
 8001ddc:	dc04      	bgt.n	8001de8 <rainbow+0x34>
 8001dde:	4b1d      	ldr	r3, [pc, #116]	; (8001e54 <rainbow+0xa0>)
 8001de0:	781b      	ldrb	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	e000      	b.n	8001dea <rainbow+0x36>
 8001de8:	2302      	movs	r3, #2
 8001dea:	4a1a      	ldr	r2, [pc, #104]	; (8001e54 <rainbow+0xa0>)
 8001dec:	7013      	strb	r3, [r2, #0]
		colourIDRN = (colourIDRN + 1 > noOfColours + 1) ? 2 : colourIDRN + 1; //Przejście na kolejny kolor
 8001dee:	4b1b      	ldr	r3, [pc, #108]	; (8001e5c <rainbow+0xa8>)
 8001df0:	781b      	ldrb	r3, [r3, #0]
 8001df2:	1c5a      	adds	r2, r3, #1
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <rainbow+0xa4>)
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	3301      	adds	r3, #1
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	dc04      	bgt.n	8001e08 <rainbow+0x54>
 8001dfe:	4b17      	ldr	r3, [pc, #92]	; (8001e5c <rainbow+0xa8>)
 8001e00:	781b      	ldrb	r3, [r3, #0]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	e000      	b.n	8001e0a <rainbow+0x56>
 8001e08:	2302      	movs	r3, #2
 8001e0a:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <rainbow+0xa8>)
 8001e0c:	7013      	strb	r3, [r2, #0]
		colorSwitchStatus = 0; //Ustawienie flagi zakończenia zmiany koloru na 0
 8001e0e:	4b10      	ldr	r3, [pc, #64]	; (8001e50 <rainbow+0x9c>)
 8001e10:	2200      	movs	r2, #0
 8001e12:	601a      	str	r2, [r3, #0]
		somethingChanged = 1; //Ustawienie flagi zmiany zmiennych operacyjnych na 1
 8001e14:	4b0d      	ldr	r3, [pc, #52]	; (8001e4c <rainbow+0x98>)
 8001e16:	2201      	movs	r2, #1
 8001e18:	701a      	strb	r2, [r3, #0]
	}
	//Wywołanie przejścia między kolorami
	get_aLight(colorSwitch(colourPtr[colourIDR], colourPtr[colourIDRN], 40),0,n_led);
 8001e1a:	4b0e      	ldr	r3, [pc, #56]	; (8001e54 <rainbow+0xa0>)
 8001e1c:	781b      	ldrb	r3, [r3, #0]
 8001e1e:	461a      	mov	r2, r3
 8001e20:	4b0f      	ldr	r3, [pc, #60]	; (8001e60 <rainbow+0xac>)
 8001e22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001e26:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <rainbow+0xa8>)
 8001e28:	781b      	ldrb	r3, [r3, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	4b0c      	ldr	r3, [pc, #48]	; (8001e60 <rainbow+0xac>)
 8001e2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e32:	2228      	movs	r2, #40	; 0x28
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7ff fd5d 	bl	80018f4 <colorSwitch>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	2208      	movs	r2, #8
 8001e3e:	2100      	movs	r1, #0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f7ff faf9 	bl	8001438 <get_aLight>
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	20000084 	.word	0x20000084
 8001e50:	200002a8 	.word	0x200002a8
 8001e54:	20000090 	.word	0x20000090
 8001e58:	2000004f 	.word	0x2000004f
 8001e5c:	20000091 	.word	0x20000091
 8001e60:	20000050 	.word	0x20000050

08001e64 <iconGenerator>:

void iconGenerator(uint8_t x_1, uint8_t y_1, uint8_t x_2, uint8_t y_2, uint8_t r, uint8_t g, uint8_t b)
{
 8001e64:	b590      	push	{r4, r7, lr}
 8001e66:	b087      	sub	sp, #28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	4608      	mov	r0, r1
 8001e6e:	4611      	mov	r1, r2
 8001e70:	461a      	mov	r2, r3
 8001e72:	4623      	mov	r3, r4
 8001e74:	71fb      	strb	r3, [r7, #7]
 8001e76:	4603      	mov	r3, r0
 8001e78:	71bb      	strb	r3, [r7, #6]
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	717b      	strb	r3, [r7, #5]
 8001e7e:	4613      	mov	r3, r2
 8001e80:	713b      	strb	r3, [r7, #4]
	/* Funkcja odpowiada za wyświetlenie koloru podanego w argumentach na polu matrycy wyznaczonym przez
	 * argumenty, które są współrzędnymi dwóch punktów matrycy
	 * */
	uint8_t iconColor[3] = {r,g,b}; //Deklaracja tablicy koloru na bazie argumentów
 8001e82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e86:	733b      	strb	r3, [r7, #12]
 8001e88:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001e8c:	737b      	strb	r3, [r7, #13]
 8001e8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e92:	73bb      	strb	r3, [r7, #14]
	for(int i = 1; i<=16; i++) //Przejście po kolumnach matrycy
 8001e94:	2301      	movs	r3, #1
 8001e96:	617b      	str	r3, [r7, #20]
 8001e98:	e035      	b.n	8001f06 <iconGenerator+0xa2>
	{
		if(i >= x_1 && i <= x_2) //Sprawdzenie czy w kolumnie znajduje się nowy kolor
 8001e9a:	79fb      	ldrb	r3, [r7, #7]
 8001e9c:	697a      	ldr	r2, [r7, #20]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	db2e      	blt.n	8001f00 <iconGenerator+0x9c>
 8001ea2:	797b      	ldrb	r3, [r7, #5]
 8001ea4:	697a      	ldr	r2, [r7, #20]
 8001ea6:	429a      	cmp	r2, r3
 8001ea8:	dc2a      	bgt.n	8001f00 <iconGenerator+0x9c>
		{
			uint16_t startLed; //Deklaracja ledu startującego
			if(i%2!=0) //Sprawdzenie czy kolumna jest nieparzysta
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	f003 0301 	and.w	r3, r3, #1
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d00b      	beq.n	8001ecc <iconGenerator+0x68>
			{
				startLed = 16*(i-1) + (y_1-1); //przypisanie wartości ledu startującego
 8001eb4:	697b      	ldr	r3, [r7, #20]
 8001eb6:	3b01      	subs	r3, #1
 8001eb8:	b29b      	uxth	r3, r3
 8001eba:	011b      	lsls	r3, r3, #4
 8001ebc:	b29a      	uxth	r2, r3
 8001ebe:	79bb      	ldrb	r3, [r7, #6]
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4413      	add	r3, r2
 8001ec4:	b29b      	uxth	r3, r3
 8001ec6:	3b01      	subs	r3, #1
 8001ec8:	827b      	strh	r3, [r7, #18]
 8001eca:	e00a      	b.n	8001ee2 <iconGenerator+0x7e>
			}
			else
			{
				startLed = 16*(i-1) + (16-y_2); //przypisanie wartości ledu startującego
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	b29b      	uxth	r3, r3
 8001ed2:	011b      	lsls	r3, r3, #4
 8001ed4:	b29a      	uxth	r2, r3
 8001ed6:	793b      	ldrb	r3, [r7, #4]
 8001ed8:	b29b      	uxth	r3, r3
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	b29b      	uxth	r3, r3
 8001ede:	3310      	adds	r3, #16
 8001ee0:	827b      	strh	r3, [r7, #18]
			}
			uint16_t ledNo = y_2 - y_1 + 1; //przypisanie ilości ledów do zapalenia w danej kolumnie
 8001ee2:	793b      	ldrb	r3, [r7, #4]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	79bb      	ldrb	r3, [r7, #6]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	3301      	adds	r3, #1
 8001ef0:	823b      	strh	r3, [r7, #16]
			get_aLight(iconColor,startLed,ledNo); //Zapalenie ledów
 8001ef2:	8a3a      	ldrh	r2, [r7, #16]
 8001ef4:	8a79      	ldrh	r1, [r7, #18]
 8001ef6:	f107 030c 	add.w	r3, r7, #12
 8001efa:	4618      	mov	r0, r3
 8001efc:	f7ff fa9c 	bl	8001438 <get_aLight>
	for(int i = 1; i<=16; i++) //Przejście po kolumnach matrycy
 8001f00:	697b      	ldr	r3, [r7, #20]
 8001f02:	3301      	adds	r3, #1
 8001f04:	617b      	str	r3, [r7, #20]
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	ddc6      	ble.n	8001e9a <iconGenerator+0x36>
		}
	}
}
 8001f0c:	bf00      	nop
 8001f0e:	371c      	adds	r7, #28
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd90      	pop	{r4, r7, pc}

08001f14 <iconMode>:

void iconMode() //Funkcja wyswietla animowaną ikonę
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b084      	sub	sp, #16
 8001f18:	af04      	add	r7, sp, #16
	if(somethingChanged) //Sprawdzenie czy zmienne operacyjne uległy zmianie
 8001f1a:	4b9c      	ldr	r3, [pc, #624]	; (800218c <iconMode+0x278>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d00b      	beq.n	8001f3a <iconMode+0x26>
	{
		iconGenerator(1,1,16,16,0,0,0); //reset matrycy
 8001f22:	2300      	movs	r3, #0
 8001f24:	9302      	str	r3, [sp, #8]
 8001f26:	2300      	movs	r3, #0
 8001f28:	9301      	str	r3, [sp, #4]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	9300      	str	r3, [sp, #0]
 8001f2e:	2310      	movs	r3, #16
 8001f30:	2210      	movs	r2, #16
 8001f32:	2101      	movs	r1, #1
 8001f34:	2001      	movs	r0, #1
 8001f36:	f7ff ff95 	bl	8001e64 <iconGenerator>
	}
	static uint8_t iconTick = 10; //Zmienna odpowiadająca za długość wyświetlania jednej ikony
	static uint8_t iconToggle = 0; //Zmienna zmiany ikony
	iconTick ++;
 8001f3a:	4b95      	ldr	r3, [pc, #596]	; (8002190 <iconMode+0x27c>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	b2da      	uxtb	r2, r3
 8001f42:	4b93      	ldr	r3, [pc, #588]	; (8002190 <iconMode+0x27c>)
 8001f44:	701a      	strb	r2, [r3, #0]
	if(iconTick > 10) //Sprawdzenei czy nastąpiła pora zmiany ikony
 8001f46:	4b92      	ldr	r3, [pc, #584]	; (8002190 <iconMode+0x27c>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	2b0a      	cmp	r3, #10
 8001f4c:	f240 811b 	bls.w	8002186 <iconMode+0x272>
	{
		iconTick = 0; //reset zmiennej Tick
 8001f50:	4b8f      	ldr	r3, [pc, #572]	; (8002190 <iconMode+0x27c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	701a      	strb	r2, [r3, #0]
		iconToggle = (iconToggle == 1) ? 0 : 1; //Zmiana zmiennej Toggle
 8001f56:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <iconMode+0x280>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	bf14      	ite	ne
 8001f5e:	2301      	movne	r3, #1
 8001f60:	2300      	moveq	r3, #0
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b8b      	ldr	r3, [pc, #556]	; (8002194 <iconMode+0x280>)
 8001f68:	701a      	strb	r2, [r3, #0]
		if(iconToggle == 0) //Wybór odpowiedniej ikony
 8001f6a:	4b8a      	ldr	r3, [pc, #552]	; (8002194 <iconMode+0x280>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f040 8085 	bne.w	800207e <iconMode+0x16a>
		{
			iconGenerator(4,2,6,2,255,0,0); //Instrukcje odpowiadające ikonie
 8001f74:	2300      	movs	r3, #0
 8001f76:	9302      	str	r3, [sp, #8]
 8001f78:	2300      	movs	r3, #0
 8001f7a:	9301      	str	r3, [sp, #4]
 8001f7c:	23ff      	movs	r3, #255	; 0xff
 8001f7e:	9300      	str	r3, [sp, #0]
 8001f80:	2302      	movs	r3, #2
 8001f82:	2206      	movs	r2, #6
 8001f84:	2102      	movs	r1, #2
 8001f86:	2004      	movs	r0, #4
 8001f88:	f7ff ff6c 	bl	8001e64 <iconGenerator>
			iconGenerator(11,2,13,2,255,0,0);
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	9302      	str	r3, [sp, #8]
 8001f90:	2300      	movs	r3, #0
 8001f92:	9301      	str	r3, [sp, #4]
 8001f94:	23ff      	movs	r3, #255	; 0xff
 8001f96:	9300      	str	r3, [sp, #0]
 8001f98:	2302      	movs	r3, #2
 8001f9a:	220d      	movs	r2, #13
 8001f9c:	2102      	movs	r1, #2
 8001f9e:	200b      	movs	r0, #11
 8001fa0:	f7ff ff60 	bl	8001e64 <iconGenerator>
			iconGenerator(3,3,7,3,255,0,0);
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	9302      	str	r3, [sp, #8]
 8001fa8:	2300      	movs	r3, #0
 8001faa:	9301      	str	r3, [sp, #4]
 8001fac:	23ff      	movs	r3, #255	; 0xff
 8001fae:	9300      	str	r3, [sp, #0]
 8001fb0:	2303      	movs	r3, #3
 8001fb2:	2207      	movs	r2, #7
 8001fb4:	2103      	movs	r1, #3
 8001fb6:	2003      	movs	r0, #3
 8001fb8:	f7ff ff54 	bl	8001e64 <iconGenerator>
			iconGenerator(10,3,14,3,255,0,0);
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	9302      	str	r3, [sp, #8]
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	9301      	str	r3, [sp, #4]
 8001fc4:	23ff      	movs	r3, #255	; 0xff
 8001fc6:	9300      	str	r3, [sp, #0]
 8001fc8:	2303      	movs	r3, #3
 8001fca:	220e      	movs	r2, #14
 8001fcc:	2103      	movs	r1, #3
 8001fce:	200a      	movs	r0, #10
 8001fd0:	f7ff ff48 	bl	8001e64 <iconGenerator>
			iconGenerator(2,4,15,7,255,0,0);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2300      	movs	r3, #0
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	23ff      	movs	r3, #255	; 0xff
 8001fde:	9300      	str	r3, [sp, #0]
 8001fe0:	2307      	movs	r3, #7
 8001fe2:	220f      	movs	r2, #15
 8001fe4:	2104      	movs	r1, #4
 8001fe6:	2002      	movs	r0, #2
 8001fe8:	f7ff ff3c 	bl	8001e64 <iconGenerator>
			iconGenerator(3,8,14,9,255,0,0);
 8001fec:	2300      	movs	r3, #0
 8001fee:	9302      	str	r3, [sp, #8]
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	9301      	str	r3, [sp, #4]
 8001ff4:	23ff      	movs	r3, #255	; 0xff
 8001ff6:	9300      	str	r3, [sp, #0]
 8001ff8:	2309      	movs	r3, #9
 8001ffa:	220e      	movs	r2, #14
 8001ffc:	2108      	movs	r1, #8
 8001ffe:	2003      	movs	r0, #3
 8002000:	f7ff ff30 	bl	8001e64 <iconGenerator>
			iconGenerator(4,10,13,11,255,0,0);
 8002004:	2300      	movs	r3, #0
 8002006:	9302      	str	r3, [sp, #8]
 8002008:	2300      	movs	r3, #0
 800200a:	9301      	str	r3, [sp, #4]
 800200c:	23ff      	movs	r3, #255	; 0xff
 800200e:	9300      	str	r3, [sp, #0]
 8002010:	230b      	movs	r3, #11
 8002012:	220d      	movs	r2, #13
 8002014:	210a      	movs	r1, #10
 8002016:	2004      	movs	r0, #4
 8002018:	f7ff ff24 	bl	8001e64 <iconGenerator>
			iconGenerator(5,12,12,12,255,0,0);
 800201c:	2300      	movs	r3, #0
 800201e:	9302      	str	r3, [sp, #8]
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	23ff      	movs	r3, #255	; 0xff
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	230c      	movs	r3, #12
 800202a:	220c      	movs	r2, #12
 800202c:	210c      	movs	r1, #12
 800202e:	2005      	movs	r0, #5
 8002030:	f7ff ff18 	bl	8001e64 <iconGenerator>
			iconGenerator(6,13,11,13,255,0,0);
 8002034:	2300      	movs	r3, #0
 8002036:	9302      	str	r3, [sp, #8]
 8002038:	2300      	movs	r3, #0
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	23ff      	movs	r3, #255	; 0xff
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	230d      	movs	r3, #13
 8002042:	220b      	movs	r2, #11
 8002044:	210d      	movs	r1, #13
 8002046:	2006      	movs	r0, #6
 8002048:	f7ff ff0c 	bl	8001e64 <iconGenerator>
			iconGenerator(7,14,10,14,255,0,0);
 800204c:	2300      	movs	r3, #0
 800204e:	9302      	str	r3, [sp, #8]
 8002050:	2300      	movs	r3, #0
 8002052:	9301      	str	r3, [sp, #4]
 8002054:	23ff      	movs	r3, #255	; 0xff
 8002056:	9300      	str	r3, [sp, #0]
 8002058:	230e      	movs	r3, #14
 800205a:	220a      	movs	r2, #10
 800205c:	210e      	movs	r1, #14
 800205e:	2007      	movs	r0, #7
 8002060:	f7ff ff00 	bl	8001e64 <iconGenerator>
			iconGenerator(8,15,9,15,255,0,0);
 8002064:	2300      	movs	r3, #0
 8002066:	9302      	str	r3, [sp, #8]
 8002068:	2300      	movs	r3, #0
 800206a:	9301      	str	r3, [sp, #4]
 800206c:	23ff      	movs	r3, #255	; 0xff
 800206e:	9300      	str	r3, [sp, #0]
 8002070:	230f      	movs	r3, #15
 8002072:	2209      	movs	r2, #9
 8002074:	210f      	movs	r1, #15
 8002076:	2008      	movs	r0, #8
 8002078:	f7ff fef4 	bl	8001e64 <iconGenerator>
			iconGenerator(6,12,11,12,255,0,0);
			iconGenerator(7,13,10,13,255,0,0);
			iconGenerator(8,14,9,14,255,0,0);
		}
	}
}
 800207c:	e083      	b.n	8002186 <iconMode+0x272>
			iconGenerator(1,1,16,16,0,0,0); //reset
 800207e:	2300      	movs	r3, #0
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	2300      	movs	r3, #0
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	2300      	movs	r3, #0
 8002088:	9300      	str	r3, [sp, #0]
 800208a:	2310      	movs	r3, #16
 800208c:	2210      	movs	r2, #16
 800208e:	2101      	movs	r1, #1
 8002090:	2001      	movs	r0, #1
 8002092:	f7ff fee7 	bl	8001e64 <iconGenerator>
			iconGenerator(5,3,6,3,255,0,0); //Instrukcje odpowiadające ikonie
 8002096:	2300      	movs	r3, #0
 8002098:	9302      	str	r3, [sp, #8]
 800209a:	2300      	movs	r3, #0
 800209c:	9301      	str	r3, [sp, #4]
 800209e:	23ff      	movs	r3, #255	; 0xff
 80020a0:	9300      	str	r3, [sp, #0]
 80020a2:	2303      	movs	r3, #3
 80020a4:	2206      	movs	r2, #6
 80020a6:	2103      	movs	r1, #3
 80020a8:	2005      	movs	r0, #5
 80020aa:	f7ff fedb 	bl	8001e64 <iconGenerator>
			iconGenerator(11,3,12,3,255,0,0);
 80020ae:	2300      	movs	r3, #0
 80020b0:	9302      	str	r3, [sp, #8]
 80020b2:	2300      	movs	r3, #0
 80020b4:	9301      	str	r3, [sp, #4]
 80020b6:	23ff      	movs	r3, #255	; 0xff
 80020b8:	9300      	str	r3, [sp, #0]
 80020ba:	2303      	movs	r3, #3
 80020bc:	220c      	movs	r2, #12
 80020be:	2103      	movs	r1, #3
 80020c0:	200b      	movs	r0, #11
 80020c2:	f7ff fecf 	bl	8001e64 <iconGenerator>
			iconGenerator(4,4,7,4,255,0,0);
 80020c6:	2300      	movs	r3, #0
 80020c8:	9302      	str	r3, [sp, #8]
 80020ca:	2300      	movs	r3, #0
 80020cc:	9301      	str	r3, [sp, #4]
 80020ce:	23ff      	movs	r3, #255	; 0xff
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2304      	movs	r3, #4
 80020d4:	2207      	movs	r2, #7
 80020d6:	2104      	movs	r1, #4
 80020d8:	2004      	movs	r0, #4
 80020da:	f7ff fec3 	bl	8001e64 <iconGenerator>
			iconGenerator(10,4,13,4,255,0,0);
 80020de:	2300      	movs	r3, #0
 80020e0:	9302      	str	r3, [sp, #8]
 80020e2:	2300      	movs	r3, #0
 80020e4:	9301      	str	r3, [sp, #4]
 80020e6:	23ff      	movs	r3, #255	; 0xff
 80020e8:	9300      	str	r3, [sp, #0]
 80020ea:	2304      	movs	r3, #4
 80020ec:	220d      	movs	r2, #13
 80020ee:	2104      	movs	r1, #4
 80020f0:	200a      	movs	r0, #10
 80020f2:	f7ff feb7 	bl	8001e64 <iconGenerator>
			iconGenerator(3,5,14,7,255,0,0);
 80020f6:	2300      	movs	r3, #0
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2300      	movs	r3, #0
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	23ff      	movs	r3, #255	; 0xff
 8002100:	9300      	str	r3, [sp, #0]
 8002102:	2307      	movs	r3, #7
 8002104:	220e      	movs	r2, #14
 8002106:	2105      	movs	r1, #5
 8002108:	2003      	movs	r0, #3
 800210a:	f7ff feab 	bl	8001e64 <iconGenerator>
			iconGenerator(4,8,13,9,255,0,0);
 800210e:	2300      	movs	r3, #0
 8002110:	9302      	str	r3, [sp, #8]
 8002112:	2300      	movs	r3, #0
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	23ff      	movs	r3, #255	; 0xff
 8002118:	9300      	str	r3, [sp, #0]
 800211a:	2309      	movs	r3, #9
 800211c:	220d      	movs	r2, #13
 800211e:	2108      	movs	r1, #8
 8002120:	2004      	movs	r0, #4
 8002122:	f7ff fe9f 	bl	8001e64 <iconGenerator>
			iconGenerator(5,10,12,11,255,0,0);
 8002126:	2300      	movs	r3, #0
 8002128:	9302      	str	r3, [sp, #8]
 800212a:	2300      	movs	r3, #0
 800212c:	9301      	str	r3, [sp, #4]
 800212e:	23ff      	movs	r3, #255	; 0xff
 8002130:	9300      	str	r3, [sp, #0]
 8002132:	230b      	movs	r3, #11
 8002134:	220c      	movs	r2, #12
 8002136:	210a      	movs	r1, #10
 8002138:	2005      	movs	r0, #5
 800213a:	f7ff fe93 	bl	8001e64 <iconGenerator>
			iconGenerator(6,12,11,12,255,0,0);
 800213e:	2300      	movs	r3, #0
 8002140:	9302      	str	r3, [sp, #8]
 8002142:	2300      	movs	r3, #0
 8002144:	9301      	str	r3, [sp, #4]
 8002146:	23ff      	movs	r3, #255	; 0xff
 8002148:	9300      	str	r3, [sp, #0]
 800214a:	230c      	movs	r3, #12
 800214c:	220b      	movs	r2, #11
 800214e:	210c      	movs	r1, #12
 8002150:	2006      	movs	r0, #6
 8002152:	f7ff fe87 	bl	8001e64 <iconGenerator>
			iconGenerator(7,13,10,13,255,0,0);
 8002156:	2300      	movs	r3, #0
 8002158:	9302      	str	r3, [sp, #8]
 800215a:	2300      	movs	r3, #0
 800215c:	9301      	str	r3, [sp, #4]
 800215e:	23ff      	movs	r3, #255	; 0xff
 8002160:	9300      	str	r3, [sp, #0]
 8002162:	230d      	movs	r3, #13
 8002164:	220a      	movs	r2, #10
 8002166:	210d      	movs	r1, #13
 8002168:	2007      	movs	r0, #7
 800216a:	f7ff fe7b 	bl	8001e64 <iconGenerator>
			iconGenerator(8,14,9,14,255,0,0);
 800216e:	2300      	movs	r3, #0
 8002170:	9302      	str	r3, [sp, #8]
 8002172:	2300      	movs	r3, #0
 8002174:	9301      	str	r3, [sp, #4]
 8002176:	23ff      	movs	r3, #255	; 0xff
 8002178:	9300      	str	r3, [sp, #0]
 800217a:	230e      	movs	r3, #14
 800217c:	2209      	movs	r2, #9
 800217e:	210e      	movs	r1, #14
 8002180:	2008      	movs	r0, #8
 8002182:	f7ff fe6f 	bl	8001e64 <iconGenerator>
}
 8002186:	bf00      	nop
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}
 800218c:	20000084 	.word	0x20000084
 8002190:	20000092 	.word	0x20000092
 8002194:	200002d8 	.word	0x200002d8

08002198 <CMN>:

//Funkcje zmieniające parametry

void CMN() //Przechodzi na kolejny tryb
{
 8002198:	b580      	push	{r7, lr}
 800219a:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 800219c:	f7ff fa96 	bl	80016cc <bringback>
	modeID++; //zmiana
 80021a0:	4b07      	ldr	r3, [pc, #28]	; (80021c0 <CMN+0x28>)
 80021a2:	781b      	ldrb	r3, [r3, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	b2da      	uxtb	r2, r3
 80021a8:	4b05      	ldr	r3, [pc, #20]	; (80021c0 <CMN+0x28>)
 80021aa:	701a      	strb	r2, [r3, #0]
	checkArgs(); //sprawdzenie poprawności zakresu
 80021ac:	f7ff fafc 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 80021b0:	f7ff fa86 	bl	80016c0 <save>
	somethingChanged = 1; //Zmiana flagi zmiany na true
 80021b4:	4b03      	ldr	r3, [pc, #12]	; (80021c4 <CMN+0x2c>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	701a      	strb	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	bd80      	pop	{r7, pc}
 80021be:	bf00      	nop
 80021c0:	20000021 	.word	0x20000021
 80021c4:	20000084 	.word	0x20000084

080021c8 <CMP>:

void CMP() //Przechodzi na poprzedni tryb
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 80021cc:	f7ff fa7e 	bl	80016cc <bringback>
	modeID--; //zmiana
 80021d0:	4b07      	ldr	r3, [pc, #28]	; (80021f0 <CMP+0x28>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	3b01      	subs	r3, #1
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <CMP+0x28>)
 80021da:	701a      	strb	r2, [r3, #0]
	checkArgs(); //sprawdzenie poprawności zakresu
 80021dc:	f7ff fae4 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 80021e0:	f7ff fa6e 	bl	80016c0 <save>
	somethingChanged = 1; //Ustawienie flagi zmiany na prawde
 80021e4:	4b03      	ldr	r3, [pc, #12]	; (80021f4 <CMP+0x2c>)
 80021e6:	2201      	movs	r2, #1
 80021e8:	701a      	strb	r2, [r3, #0]
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000021 	.word	0x20000021
 80021f4:	20000084 	.word	0x20000084

080021f8 <CCN>:

void CCN() //Zmienia kolor na kolejny
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
	if(modeID!=4 && modeID!=5) //Sprawdzenie czy obecny tryb obsługuje zmianę koloru
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <CCN+0x38>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b04      	cmp	r3, #4
 8002202:	d012      	beq.n	800222a <CCN+0x32>
 8002204:	4b0a      	ldr	r3, [pc, #40]	; (8002230 <CCN+0x38>)
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b05      	cmp	r3, #5
 800220a:	d00e      	beq.n	800222a <CCN+0x32>
	{
		bringback(); //Przywrócenie wcześniejszych ustawień
 800220c:	f7ff fa5e 	bl	80016cc <bringback>
		colourID++; //zmiana
 8002210:	4b08      	ldr	r3, [pc, #32]	; (8002234 <CCN+0x3c>)
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	3301      	adds	r3, #1
 8002216:	b2da      	uxtb	r2, r3
 8002218:	4b06      	ldr	r3, [pc, #24]	; (8002234 <CCN+0x3c>)
 800221a:	701a      	strb	r2, [r3, #0]
		checkArgs(); //sprawdzenie poprawności zakresu
 800221c:	f7ff fac4 	bl	80017a8 <checkArgs>
		save(); //Zapisanie zmiany
 8002220:	f7ff fa4e 	bl	80016c0 <save>
		somethingChanged = 1; //Ustawienie flagi zmiany na prawde
 8002224:	4b04      	ldr	r3, [pc, #16]	; (8002238 <CCN+0x40>)
 8002226:	2201      	movs	r2, #1
 8002228:	701a      	strb	r2, [r3, #0]
	}
}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000021 	.word	0x20000021
 8002234:	20000020 	.word	0x20000020
 8002238:	20000084 	.word	0x20000084

0800223c <CCP>:

void CCP() //Zmienia kolor na poprzedni
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
	if(modeID!=4 && modeID!=5) //Sprawdzenie czy obecny tryb obsługuje zmianę koloru
 8002240:	4b0c      	ldr	r3, [pc, #48]	; (8002274 <CCP+0x38>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b04      	cmp	r3, #4
 8002246:	d012      	beq.n	800226e <CCP+0x32>
 8002248:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <CCP+0x38>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d00e      	beq.n	800226e <CCP+0x32>
	{
		bringback(); //Przywrócenie wcześniejszych ustawień
 8002250:	f7ff fa3c 	bl	80016cc <bringback>
		colourID--; //zmiana
 8002254:	4b08      	ldr	r3, [pc, #32]	; (8002278 <CCP+0x3c>)
 8002256:	781b      	ldrb	r3, [r3, #0]
 8002258:	3b01      	subs	r3, #1
 800225a:	b2da      	uxtb	r2, r3
 800225c:	4b06      	ldr	r3, [pc, #24]	; (8002278 <CCP+0x3c>)
 800225e:	701a      	strb	r2, [r3, #0]
		checkArgs(); //sprawdzenie poprawności zakresu
 8002260:	f7ff faa2 	bl	80017a8 <checkArgs>
		save(); //Zapisanie zmiany
 8002264:	f7ff fa2c 	bl	80016c0 <save>
		somethingChanged = 1; //Ustawienie flagi zmiany na prawde
 8002268:	4b04      	ldr	r3, [pc, #16]	; (800227c <CCP+0x40>)
 800226a:	2201      	movs	r2, #1
 800226c:	701a      	strb	r2, [r3, #0]
	}
}
 800226e:	bf00      	nop
 8002270:	bd80      	pop	{r7, pc}
 8002272:	bf00      	nop
 8002274:	20000021 	.word	0x20000021
 8002278:	20000020 	.word	0x20000020
 800227c:	20000084 	.word	0x20000084

08002280 <CBU>:

void CBU() //Zmienia jasność na stopień wyżej
{
 8002280:	b598      	push	{r3, r4, r7, lr}
 8002282:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 8002284:	f7ff fa22 	bl	80016cc <bringback>
	brightness += 0.2; //zmiana
 8002288:	4b19      	ldr	r3, [pc, #100]	; (80022f0 <CBU+0x70>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7fe f97b 	bl	8000588 <__aeabi_f2d>
 8002292:	a315      	add	r3, pc, #84	; (adr r3, 80022e8 <CBU+0x68>)
 8002294:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002298:	f7fe f818 	bl	80002cc <__adddf3>
 800229c:	4603      	mov	r3, r0
 800229e:	460c      	mov	r4, r1
 80022a0:	4618      	mov	r0, r3
 80022a2:	4621      	mov	r1, r4
 80022a4:	f7fe fc82 	bl	8000bac <__aeabi_d2f>
 80022a8:	4602      	mov	r2, r0
 80022aa:	4b11      	ldr	r3, [pc, #68]	; (80022f0 <CBU+0x70>)
 80022ac:	601a      	str	r2, [r3, #0]
	brightness = roundf(brightness * 100)/100; //zaokrąglenie do 2 miejsca po przecinku
 80022ae:	4b10      	ldr	r3, [pc, #64]	; (80022f0 <CBU+0x70>)
 80022b0:	edd3 7a00 	vldr	s15, [r3]
 80022b4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80022f4 <CBU+0x74>
 80022b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022bc:	eeb0 0a67 	vmov.f32	s0, s15
 80022c0:	f005 fdcc 	bl	8007e5c <roundf>
 80022c4:	eef0 6a40 	vmov.f32	s13, s0
 80022c8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80022f4 <CBU+0x74>
 80022cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80022d0:	4b07      	ldr	r3, [pc, #28]	; (80022f0 <CBU+0x70>)
 80022d2:	edc3 7a00 	vstr	s15, [r3]
	checkArgs(); //sprawdzenie poprawności zakresu
 80022d6:	f7ff fa67 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 80022da:	f7ff f9f1 	bl	80016c0 <save>
}
 80022de:	bf00      	nop
 80022e0:	bd98      	pop	{r3, r4, r7, pc}
 80022e2:	bf00      	nop
 80022e4:	f3af 8000 	nop.w
 80022e8:	9999999a 	.word	0x9999999a
 80022ec:	3fc99999 	.word	0x3fc99999
 80022f0:	20000018 	.word	0x20000018
 80022f4:	42c80000 	.word	0x42c80000

080022f8 <CBD>:

void CBD() //Zmienia jasność na stopień nieżej
{
 80022f8:	b598      	push	{r3, r4, r7, lr}
 80022fa:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 80022fc:	f7ff f9e6 	bl	80016cc <bringback>
	brightness -= 0.2; //zmiana
 8002300:	4b19      	ldr	r3, [pc, #100]	; (8002368 <CBD+0x70>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4618      	mov	r0, r3
 8002306:	f7fe f93f 	bl	8000588 <__aeabi_f2d>
 800230a:	a315      	add	r3, pc, #84	; (adr r3, 8002360 <CBD+0x68>)
 800230c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002310:	f7fd ffda 	bl	80002c8 <__aeabi_dsub>
 8002314:	4603      	mov	r3, r0
 8002316:	460c      	mov	r4, r1
 8002318:	4618      	mov	r0, r3
 800231a:	4621      	mov	r1, r4
 800231c:	f7fe fc46 	bl	8000bac <__aeabi_d2f>
 8002320:	4602      	mov	r2, r0
 8002322:	4b11      	ldr	r3, [pc, #68]	; (8002368 <CBD+0x70>)
 8002324:	601a      	str	r2, [r3, #0]
	brightness = roundf(brightness * 100)/100; //zaokrąglenie do 2 miejsca po przecinku
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <CBD+0x70>)
 8002328:	edd3 7a00 	vldr	s15, [r3]
 800232c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800236c <CBD+0x74>
 8002330:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002334:	eeb0 0a67 	vmov.f32	s0, s15
 8002338:	f005 fd90 	bl	8007e5c <roundf>
 800233c:	eef0 6a40 	vmov.f32	s13, s0
 8002340:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800236c <CBD+0x74>
 8002344:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002348:	4b07      	ldr	r3, [pc, #28]	; (8002368 <CBD+0x70>)
 800234a:	edc3 7a00 	vstr	s15, [r3]
	checkArgs(); //sprawdzenie poprawności zakresu
 800234e:	f7ff fa2b 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 8002352:	f7ff f9b5 	bl	80016c0 <save>
}
 8002356:	bf00      	nop
 8002358:	bd98      	pop	{r3, r4, r7, pc}
 800235a:	bf00      	nop
 800235c:	f3af 8000 	nop.w
 8002360:	9999999a 	.word	0x9999999a
 8002364:	3fc99999 	.word	0x3fc99999
 8002368:	20000018 	.word	0x20000018
 800236c:	42c80000 	.word	0x42c80000

08002370 <CSU>:

void CSU() //Zmienia prędkość na stopień wyżej
{
 8002370:	b598      	push	{r3, r4, r7, lr}
 8002372:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 8002374:	f7ff f9aa 	bl	80016cc <bringback>
	speed += 0.2; //zmiana
 8002378:	4b19      	ldr	r3, [pc, #100]	; (80023e0 <CSU+0x70>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f903 	bl	8000588 <__aeabi_f2d>
 8002382:	a315      	add	r3, pc, #84	; (adr r3, 80023d8 <CSU+0x68>)
 8002384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002388:	f7fd ffa0 	bl	80002cc <__adddf3>
 800238c:	4603      	mov	r3, r0
 800238e:	460c      	mov	r4, r1
 8002390:	4618      	mov	r0, r3
 8002392:	4621      	mov	r1, r4
 8002394:	f7fe fc0a 	bl	8000bac <__aeabi_d2f>
 8002398:	4602      	mov	r2, r0
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <CSU+0x70>)
 800239c:	601a      	str	r2, [r3, #0]
	speed = roundf(speed * 100)/100; //zaokrąglenie do 2 miejsca po przecinku
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <CSU+0x70>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80023e4 <CSU+0x74>
 80023a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ac:	eeb0 0a67 	vmov.f32	s0, s15
 80023b0:	f005 fd54 	bl	8007e5c <roundf>
 80023b4:	eef0 6a40 	vmov.f32	s13, s0
 80023b8:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80023e4 <CSU+0x74>
 80023bc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023c0:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <CSU+0x70>)
 80023c2:	edc3 7a00 	vstr	s15, [r3]
	checkArgs(); //sprawdzenie poprawności zakresu
 80023c6:	f7ff f9ef 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 80023ca:	f7ff f979 	bl	80016c0 <save>
}
 80023ce:	bf00      	nop
 80023d0:	bd98      	pop	{r3, r4, r7, pc}
 80023d2:	bf00      	nop
 80023d4:	f3af 8000 	nop.w
 80023d8:	9999999a 	.word	0x9999999a
 80023dc:	3fc99999 	.word	0x3fc99999
 80023e0:	2000001c 	.word	0x2000001c
 80023e4:	42c80000 	.word	0x42c80000

080023e8 <CSD>:

void CSD() //Zmienia prędkość na stopień niżej
{
 80023e8:	b598      	push	{r3, r4, r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	bringback(); //Przywrócenie wcześniejszych ustawień
 80023ec:	f7ff f96e 	bl	80016cc <bringback>
	speed -= 0.2; //zmiana
 80023f0:	4b19      	ldr	r3, [pc, #100]	; (8002458 <CSD+0x70>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f8c7 	bl	8000588 <__aeabi_f2d>
 80023fa:	a315      	add	r3, pc, #84	; (adr r3, 8002450 <CSD+0x68>)
 80023fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002400:	f7fd ff62 	bl	80002c8 <__aeabi_dsub>
 8002404:	4603      	mov	r3, r0
 8002406:	460c      	mov	r4, r1
 8002408:	4618      	mov	r0, r3
 800240a:	4621      	mov	r1, r4
 800240c:	f7fe fbce 	bl	8000bac <__aeabi_d2f>
 8002410:	4602      	mov	r2, r0
 8002412:	4b11      	ldr	r3, [pc, #68]	; (8002458 <CSD+0x70>)
 8002414:	601a      	str	r2, [r3, #0]
	speed = roundf(speed * 100)/100; //zaokrąglenie do 2 miejsca po przecinku
 8002416:	4b10      	ldr	r3, [pc, #64]	; (8002458 <CSD+0x70>)
 8002418:	edd3 7a00 	vldr	s15, [r3]
 800241c:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800245c <CSD+0x74>
 8002420:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002424:	eeb0 0a67 	vmov.f32	s0, s15
 8002428:	f005 fd18 	bl	8007e5c <roundf>
 800242c:	eef0 6a40 	vmov.f32	s13, s0
 8002430:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 800245c <CSD+0x74>
 8002434:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002438:	4b07      	ldr	r3, [pc, #28]	; (8002458 <CSD+0x70>)
 800243a:	edc3 7a00 	vstr	s15, [r3]
	checkArgs(); //sprawdzenie poprawności zakresu
 800243e:	f7ff f9b3 	bl	80017a8 <checkArgs>
	save(); //Zapisanie zmiany
 8002442:	f7ff f93d 	bl	80016c0 <save>
}
 8002446:	bf00      	nop
 8002448:	bd98      	pop	{r3, r4, r7, pc}
 800244a:	bf00      	nop
 800244c:	f3af 8000 	nop.w
 8002450:	9999999a 	.word	0x9999999a
 8002454:	3fc99999 	.word	0x3fc99999
 8002458:	2000001c 	.word	0x2000001c
 800245c:	42c80000 	.word	0x42c80000

08002460 <eraseSector5>:
//================================================LED ANIMACJE====================================================================

//\\\\\\\\\\\\\\\\\\\\\\\\\\FLASH/////////////////////////////

void eraseSector5() //Funkcja czyści sektor 5 FLASH
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b088      	sub	sp, #32
 8002464:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock(); //Odblokowanie pamięci
 8002466:	f001 fe1f 	bl	80040a8 <HAL_FLASH_Unlock>

	FLASH_EraseInitTypeDef EraseInitStruct; //Ustawienie parametrów czyszczenia
	EraseInitStruct.TypeErase = FLASH_TYPEERASE_SECTORS;
 800246a:	2300      	movs	r3, #0
 800246c:	60fb      	str	r3, [r7, #12]
	EraseInitStruct.Sector = FLASH_SECTOR_5;
 800246e:	2305      	movs	r3, #5
 8002470:	617b      	str	r3, [r7, #20]
	EraseInitStruct.NbSectors = 1;
 8002472:	2301      	movs	r3, #1
 8002474:	61bb      	str	r3, [r7, #24]

	uint32_t SectorError;
	volatile HAL_StatusTypeDef status;
	status = HAL_FLASHEx_Erase(&EraseInitStruct, &SectorError); //Czyszczenie pamięci sektora 5
 8002476:	f107 0208 	add.w	r2, r7, #8
 800247a:	f107 030c 	add.w	r3, r7, #12
 800247e:	4611      	mov	r1, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f001 ff81 	bl	8004388 <HAL_FLASHEx_Erase>
 8002486:	4603      	mov	r3, r0
 8002488:	71fb      	strb	r3, [r7, #7]
	if(status == HAL_OK) //Sprawdzenie czy czyszczenie powiodło się
 800248a:	79fb      	ldrb	r3, [r7, #7]
 800248c:	b2db      	uxtb	r3, r3
 800248e:	2b00      	cmp	r3, #0
 8002490:	d102      	bne.n	8002498 <eraseSector5+0x38>
	{
		Send("Flash Complete"); //Poinformowanie o wyczyszczeniu
 8002492:	4804      	ldr	r0, [pc, #16]	; (80024a4 <eraseSector5+0x44>)
 8002494:	f000 fda2 	bl	8002fdc <Send>
	}

	HAL_FLASH_Lock(); //Zablokowanie pamięci
 8002498:	f001 fe28 	bl	80040ec <HAL_FLASH_Lock>
}
 800249c:	bf00      	nop
 800249e:	3720      	adds	r7, #32
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}
 80024a4:	08007ec8 	.word	0x08007ec8

080024a8 <getNextFreeFlashWord>:

void getNextFreeFlashWord() //Funkcja szuka pierwszej wolnej pary słów sektora 5 FLASH
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	af00      	add	r7, sp, #0
	//Przeszukanie całego sektora parami słów (0x08040000 - 8 eliminuje możliwośc przypadkowego przekroczenia sektora)
	while(nextFreeFlashWord < (uint32_t*)(0x08040000 - 8) && *nextFreeFlashWord != 0xFFFFFFFF)
 80024ac:	e004      	b.n	80024b8 <getNextFreeFlashWord+0x10>
	{
		nextFreeFlashWord += 2; //Przejście na kolejną parę
 80024ae:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	3308      	adds	r3, #8
 80024b4:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024b6:	6013      	str	r3, [r2, #0]
	while(nextFreeFlashWord < (uint32_t*)(0x08040000 - 8) && *nextFreeFlashWord != 0xFFFFFFFF)
 80024b8:	4b0e      	ldr	r3, [pc, #56]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4a0e      	ldr	r2, [pc, #56]	; (80024f8 <getNextFreeFlashWord+0x50>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d805      	bhi.n	80024ce <getNextFreeFlashWord+0x26>
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024cc:	d1ef      	bne.n	80024ae <getNextFreeFlashWord+0x6>
	}

	//Sprawdzenie czy wyszedłem poza sektor, jeśli tak to wracam na początek przepisując ostatnie zmienne
	if(nextFreeFlashWord >= (uint32_t*)0x08040000 - 8)
 80024ce:	4b09      	ldr	r3, [pc, #36]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a0a      	ldr	r2, [pc, #40]	; (80024fc <getNextFreeFlashWord+0x54>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d90b      	bls.n	80024f0 <getNextFreeFlashWord+0x48>
	{
		getVarsFromFlash();
 80024d8:	f000 f88a 	bl	80025f0 <getVarsFromFlash>
		eraseSector5();
 80024dc:	f7ff ffc0 	bl	8002460 <eraseSector5>
		nextFreeFlashWord = (uint32_t*)0x08020000;
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <getNextFreeFlashWord+0x4c>)
 80024e2:	4a07      	ldr	r2, [pc, #28]	; (8002500 <getNextFreeFlashWord+0x58>)
 80024e4:	601a      	str	r2, [r3, #0]
		SaveVarsToFlash();
 80024e6:	f000 f80f 	bl	8002508 <SaveVarsToFlash>
		Send("ERASED!\r\n");
 80024ea:	4806      	ldr	r0, [pc, #24]	; (8002504 <getNextFreeFlashWord+0x5c>)
 80024ec:	f000 fd76 	bl	8002fdc <Send>
	}
}
 80024f0:	bf00      	nop
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	2000008c 	.word	0x2000008c
 80024f8:	0803fff7 	.word	0x0803fff7
 80024fc:	0803ffdf 	.word	0x0803ffdf
 8002500:	08020000 	.word	0x08020000
 8002504:	08007ed8 	.word	0x08007ed8

08002508 <SaveVarsToFlash>:

void SaveVarsToFlash() //Funkcja zapisuje zmienne operacyjne do FLASH
{
 8002508:	b590      	push	{r4, r7, lr}
 800250a:	b087      	sub	sp, #28
 800250c:	af00      	add	r7, sp, #0
	uint8_t brightnessT = brightness*100; //Przepisanie zmiennej brightness do uint8_t
 800250e:	4b2f      	ldr	r3, [pc, #188]	; (80025cc <SaveVarsToFlash+0xc4>)
 8002510:	edd3 7a00 	vldr	s15, [r3]
 8002514:	ed9f 7a2e 	vldr	s14, [pc, #184]	; 80025d0 <SaveVarsToFlash+0xc8>
 8002518:	ee67 7a87 	vmul.f32	s15, s15, s14
 800251c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002520:	edc7 7a01 	vstr	s15, [r7, #4]
 8002524:	793b      	ldrb	r3, [r7, #4]
 8002526:	75fb      	strb	r3, [r7, #23]
	uint8_t speedT = speed*100; //Przepisanie zmiennej brightness do uint8_t
 8002528:	4b2a      	ldr	r3, [pc, #168]	; (80025d4 <SaveVarsToFlash+0xcc>)
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80025d0 <SaveVarsToFlash+0xc8>
 8002532:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002536:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800253a:	edc7 7a01 	vstr	s15, [r7, #4]
 800253e:	793b      	ldrb	r3, [r7, #4]
 8002540:	75bb      	strb	r3, [r7, #22]

	uint32_t rar1 = 0; //Deklaracja zmiennych uint32_t do zapisu
 8002542:	2300      	movs	r3, #0
 8002544:	613b      	str	r3, [r7, #16]
	uint32_t rar2 = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

	//Przepisanie zmiennych operacyjnych uint8_t do zmiennej uint32_t
	rar1 = brightnessT | speedT << 8 | modeID << 16 | colourID << 24;
 800254a:	7dfa      	ldrb	r2, [r7, #23]
 800254c:	7dbb      	ldrb	r3, [r7, #22]
 800254e:	021b      	lsls	r3, r3, #8
 8002550:	431a      	orrs	r2, r3
 8002552:	4b21      	ldr	r3, [pc, #132]	; (80025d8 <SaveVarsToFlash+0xd0>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	041b      	lsls	r3, r3, #16
 8002558:	431a      	orrs	r2, r3
 800255a:	4b20      	ldr	r3, [pc, #128]	; (80025dc <SaveVarsToFlash+0xd4>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	061b      	lsls	r3, r3, #24
 8002560:	4313      	orrs	r3, r2
 8002562:	613b      	str	r3, [r7, #16]

	HAL_FLASH_Unlock(); //Odblokowanie FLASH
 8002564:	f001 fda0 	bl	80040a8 <HAL_FLASH_Unlock>
	//Zapis zmiennych na odpowiednich miejscach
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)nextFreeFlashWord, rar1);
 8002568:	4b1d      	ldr	r3, [pc, #116]	; (80025e0 <SaveVarsToFlash+0xd8>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4619      	mov	r1, r3
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	f04f 0400 	mov.w	r4, #0
 8002574:	461a      	mov	r2, r3
 8002576:	4623      	mov	r3, r4
 8002578:	2002      	movs	r0, #2
 800257a:	f001 fd41 	bl	8004000 <HAL_FLASH_Program>
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, (uint32_t)(nextFreeFlashWord+1), rar2);
 800257e:	4b18      	ldr	r3, [pc, #96]	; (80025e0 <SaveVarsToFlash+0xd8>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	3304      	adds	r3, #4
 8002584:	4619      	mov	r1, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f04f 0400 	mov.w	r4, #0
 800258c:	461a      	mov	r2, r3
 800258e:	4623      	mov	r3, r4
 8002590:	2002      	movs	r0, #2
 8002592:	f001 fd35 	bl	8004000 <HAL_FLASH_Program>
	HAL_FLASH_Lock(); //Zablokowanie pamięci
 8002596:	f001 fda9 	bl	80040ec <HAL_FLASH_Lock>

	nextFreeFlashWord += 2; //Przypisanie adresu kolejnego pustego miejsca
 800259a:	4b11      	ldr	r3, [pc, #68]	; (80025e0 <SaveVarsToFlash+0xd8>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	3308      	adds	r3, #8
 80025a0:	4a0f      	ldr	r2, [pc, #60]	; (80025e0 <SaveVarsToFlash+0xd8>)
 80025a2:	6013      	str	r3, [r2, #0]

	//Sprawdzenie czy wyszedłem poza sektor, jeśli tak to wracam na początek przepisując ostatnie zmienne na początek
	if(nextFreeFlashWord >= (uint32_t*)(0x08040000 - 8))
 80025a4:	4b0e      	ldr	r3, [pc, #56]	; (80025e0 <SaveVarsToFlash+0xd8>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a0e      	ldr	r2, [pc, #56]	; (80025e4 <SaveVarsToFlash+0xdc>)
 80025aa:	4293      	cmp	r3, r2
 80025ac:	d909      	bls.n	80025c2 <SaveVarsToFlash+0xba>
	{
		eraseSector5();
 80025ae:	f7ff ff57 	bl	8002460 <eraseSector5>
		nextFreeFlashWord = (uint32_t*)0x08020000;
 80025b2:	4b0b      	ldr	r3, [pc, #44]	; (80025e0 <SaveVarsToFlash+0xd8>)
 80025b4:	4a0c      	ldr	r2, [pc, #48]	; (80025e8 <SaveVarsToFlash+0xe0>)
 80025b6:	601a      	str	r2, [r3, #0]
		SaveVarsToFlash();
 80025b8:	f7ff ffa6 	bl	8002508 <SaveVarsToFlash>
		Send("ERASED!\r\n"); //Poinformowanie o wyczyszczeniu pamięci
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <SaveVarsToFlash+0xe4>)
 80025be:	f000 fd0d 	bl	8002fdc <Send>
	}
}
 80025c2:	bf00      	nop
 80025c4:	371c      	adds	r7, #28
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd90      	pop	{r4, r7, pc}
 80025ca:	bf00      	nop
 80025cc:	20000018 	.word	0x20000018
 80025d0:	42c80000 	.word	0x42c80000
 80025d4:	2000001c 	.word	0x2000001c
 80025d8:	20000021 	.word	0x20000021
 80025dc:	20000020 	.word	0x20000020
 80025e0:	2000008c 	.word	0x2000008c
 80025e4:	0803fff7 	.word	0x0803fff7
 80025e8:	08020000 	.word	0x08020000
 80025ec:	08007ed8 	.word	0x08007ed8

080025f0 <getVarsFromFlash>:

void getVarsFromFlash() //Funkcja odczytuje zmienne operacyjne z FLASH
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
	//uint32_t rar2;

	uint8_t brightnessT; //Deklaracja tymczasowych zmiennych uint8_t
	uint8_t speedT;

	rar1 = *(nextFreeFlashWord-2); //Odczytanie zmiennych uint32_t z flash
 80025f6:	4b19      	ldr	r3, [pc, #100]	; (800265c <getVarsFromFlash+0x6c>)
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80025fe:	607b      	str	r3, [r7, #4]
	//rar2 = *(nextFreeFlashWord-1);

	//rodzielenie zmiennej uint32_t na 4 i przypisanie wartości do odpowiedników uint8_t
	colourID = rar1 >> 24;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	0e1b      	lsrs	r3, r3, #24
 8002604:	b2da      	uxtb	r2, r3
 8002606:	4b16      	ldr	r3, [pc, #88]	; (8002660 <getVarsFromFlash+0x70>)
 8002608:	701a      	strb	r2, [r3, #0]
	modeID = rar1 >> 16;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	0c1b      	lsrs	r3, r3, #16
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b14      	ldr	r3, [pc, #80]	; (8002664 <getVarsFromFlash+0x74>)
 8002612:	701a      	strb	r2, [r3, #0]
	speedT = rar1 >> 8;
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	0a1b      	lsrs	r3, r3, #8
 8002618:	70fb      	strb	r3, [r7, #3]
	brightnessT = rar1;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	70bb      	strb	r3, [r7, #2]

	//konwersja uint8_t na float
	speed = (float)speedT/100;
 800261e:	78fb      	ldrb	r3, [r7, #3]
 8002620:	ee07 3a90 	vmov	s15, r3
 8002624:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002628:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002668 <getVarsFromFlash+0x78>
 800262c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <getVarsFromFlash+0x7c>)
 8002632:	edc3 7a00 	vstr	s15, [r3]
	brightness = (float)brightnessT/100;
 8002636:	78bb      	ldrb	r3, [r7, #2]
 8002638:	ee07 3a90 	vmov	s15, r3
 800263c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002640:	eddf 6a09 	vldr	s13, [pc, #36]	; 8002668 <getVarsFromFlash+0x78>
 8002644:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002648:	4b09      	ldr	r3, [pc, #36]	; (8002670 <getVarsFromFlash+0x80>)
 800264a:	edc3 7a00 	vstr	s15, [r3]
}
 800264e:	bf00      	nop
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	2000008c 	.word	0x2000008c
 8002660:	20000020 	.word	0x20000020
 8002664:	20000021 	.word	0x20000021
 8002668:	42c80000 	.word	0x42c80000
 800266c:	2000001c 	.word	0x2000001c
 8002670:	20000018 	.word	0x20000018

08002674 <communicationProtocol>:


//================================================Protokół komunikacyjny====================================================================

void communicationProtocol() //Funkcja odpowiedzialna za odnalezienie ramki
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b082      	sub	sp, #8
 8002678:	af00      	add	r7, sp, #0
	uint8_t singleChar; //Zmienna pobierająca znaki z bufora
	static uint8_t errorTL = 0; //flaga kontroli wyjścia poza tablice
	static uint8_t gotFrame = 0; //Flaga stanu wykrycia ramki


    if(RX_BUSY != RX_EMPTY) //Sprawdzenie czy w buforze znajdują się elementy gotowe do odbioru
 800267a:	4b2e      	ldr	r3, [pc, #184]	; (8002734 <communicationProtocol+0xc0>)
 800267c:	881b      	ldrh	r3, [r3, #0]
 800267e:	b29a      	uxth	r2, r3
 8002680:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <communicationProtocol+0xc4>)
 8002682:	881b      	ldrh	r3, [r3, #0]
 8002684:	b29b      	uxth	r3, r3
 8002686:	429a      	cmp	r2, r3
 8002688:	d04f      	beq.n	800272a <communicationProtocol+0xb6>
    {
        singleChar = buf_RX[RX_BUSY]; //Zapisanie do char'a obecnego elementu z bufora
 800268a:	4b2a      	ldr	r3, [pc, #168]	; (8002734 <communicationProtocol+0xc0>)
 800268c:	881b      	ldrh	r3, [r3, #0]
 800268e:	b29b      	uxth	r3, r3
 8002690:	461a      	mov	r2, r3
 8002692:	4b2a      	ldr	r3, [pc, #168]	; (800273c <communicationProtocol+0xc8>)
 8002694:	5c9b      	ldrb	r3, [r3, r2]
 8002696:	71fb      	strb	r3, [r7, #7]
        RX_BUSY++; //przejście na kolejne miejsce w buforze
 8002698:	4b26      	ldr	r3, [pc, #152]	; (8002734 <communicationProtocol+0xc0>)
 800269a:	881b      	ldrh	r3, [r3, #0]
 800269c:	b29b      	uxth	r3, r3
 800269e:	3301      	adds	r3, #1
 80026a0:	b29a      	uxth	r2, r3
 80026a2:	4b24      	ldr	r3, [pc, #144]	; (8002734 <communicationProtocol+0xc0>)
 80026a4:	801a      	strh	r2, [r3, #0]
        if(RX_BUSY>=buf_RX_length) //Sprawdzenie zakresu i ewentualne cofnięcie
 80026a6:	4b23      	ldr	r3, [pc, #140]	; (8002734 <communicationProtocol+0xc0>)
 80026a8:	881b      	ldrh	r3, [r3, #0]
 80026aa:	b29b      	uxth	r3, r3
 80026ac:	2bfe      	cmp	r3, #254	; 0xfe
 80026ae:	d902      	bls.n	80026b6 <communicationProtocol+0x42>
        {
            RX_BUSY = 0;
 80026b0:	4b20      	ldr	r3, [pc, #128]	; (8002734 <communicationProtocol+0xc0>)
 80026b2:	2200      	movs	r2, #0
 80026b4:	801a      	strh	r2, [r3, #0]
        }

        if(gotFrame) //Sprawdzenie czy ramka została wykryta
 80026b6:	4b22      	ldr	r3, [pc, #136]	; (8002740 <communicationProtocol+0xcc>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d029      	beq.n	8002712 <communicationProtocol+0x9e>
        {
        	if(singleChar == ';') //Sprawdzenie czy char to nie ; (koniec ramki)
 80026be:	79fb      	ldrb	r3, [r7, #7]
 80026c0:	2b3b      	cmp	r3, #59	; 0x3b
 80026c2:	d10f      	bne.n	80026e4 <communicationProtocol+0x70>
        	{
        		if(commandSlot >= 6)
 80026c4:	4b1f      	ldr	r3, [pc, #124]	; (8002744 <communicationProtocol+0xd0>)
 80026c6:	781b      	ldrb	r3, [r3, #0]
 80026c8:	2b05      	cmp	r3, #5
 80026ca:	d901      	bls.n	80026d0 <communicationProtocol+0x5c>
        		{
        			readFrame(); //Wywołanie funkcji readFrame()
 80026cc:	f000 f840 	bl	8002750 <readFrame>
        		}
        		commandSlot = 0;
 80026d0:	4b1c      	ldr	r3, [pc, #112]	; (8002744 <communicationProtocol+0xd0>)
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]
        		errorTL = 0;
 80026d6:	4b1c      	ldr	r3, [pc, #112]	; (8002748 <communicationProtocol+0xd4>)
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
        		gotFrame = 0;
 80026dc:	4b18      	ldr	r3, [pc, #96]	; (8002740 <communicationProtocol+0xcc>)
 80026de:	2200      	movs	r2, #0
 80026e0:	701a      	strb	r2, [r3, #0]
 80026e2:	e016      	b.n	8002712 <communicationProtocol+0x9e>
        	}
        	else if(!errorTL)
 80026e4:	4b18      	ldr	r3, [pc, #96]	; (8002748 <communicationProtocol+0xd4>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d112      	bne.n	8002712 <communicationProtocol+0x9e>
        	{
                command[commandSlot] = singleChar; //Przepisanie odczytanego chara do tablicy
 80026ec:	4b15      	ldr	r3, [pc, #84]	; (8002744 <communicationProtocol+0xd0>)
 80026ee:	781b      	ldrb	r3, [r3, #0]
 80026f0:	4619      	mov	r1, r3
 80026f2:	4a16      	ldr	r2, [pc, #88]	; (800274c <communicationProtocol+0xd8>)
 80026f4:	79fb      	ldrb	r3, [r7, #7]
 80026f6:	5453      	strb	r3, [r2, r1]
                commandSlot++; //Przejście do kolejnego miejsca tablicy
 80026f8:	4b12      	ldr	r3, [pc, #72]	; (8002744 <communicationProtocol+0xd0>)
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	3301      	adds	r3, #1
 80026fe:	b2da      	uxtb	r2, r3
 8002700:	4b10      	ldr	r3, [pc, #64]	; (8002744 <communicationProtocol+0xd0>)
 8002702:	701a      	strb	r2, [r3, #0]
                if(commandSlot > 36) //Kontrola wyjścia poza zakres tablicy
 8002704:	4b0f      	ldr	r3, [pc, #60]	; (8002744 <communicationProtocol+0xd0>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	2b24      	cmp	r3, #36	; 0x24
 800270a:	d902      	bls.n	8002712 <communicationProtocol+0x9e>
                {
                	//gotFrame = 0;
                	errorTL = 1;
 800270c:	4b0e      	ldr	r3, [pc, #56]	; (8002748 <communicationProtocol+0xd4>)
 800270e:	2201      	movs	r2, #1
 8002710:	701a      	strb	r2, [r3, #0]
                }
        	}
        }

        if(singleChar == '/') //Sprawdzenie czy znak to początek ramki
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	2b2f      	cmp	r3, #47	; 0x2f
 8002716:	d108      	bne.n	800272a <communicationProtocol+0xb6>
        {
        	commandSlot = 0; //Wyzerowanie indeksu
 8002718:	4b0a      	ldr	r3, [pc, #40]	; (8002744 <communicationProtocol+0xd0>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
        	errorTL = 0;
 800271e:	4b0a      	ldr	r3, [pc, #40]	; (8002748 <communicationProtocol+0xd4>)
 8002720:	2200      	movs	r2, #0
 8002722:	701a      	strb	r2, [r3, #0]
        	gotFrame = 1; //Ustawienie flagi wykrycia ramki na 1
 8002724:	4b06      	ldr	r3, [pc, #24]	; (8002740 <communicationProtocol+0xcc>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
            {
            	errorTL = 1; //Ustawienie flagi wyjścia poza tablice na true
            }
        }*/
    }
}
 800272a:	bf00      	nop
 800272c:	3708      	adds	r7, #8
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}
 8002732:	bf00      	nop
 8002734:	2000028e 	.word	0x2000028e
 8002738:	2000028c 	.word	0x2000028c
 800273c:	20000358 	.word	0x20000358
 8002740:	200002d9 	.word	0x200002d9
 8002744:	20000294 	.word	0x20000294
 8002748:	200002da 	.word	0x200002da
 800274c:	200002f4 	.word	0x200002f4

08002750 <readFrame>:

void readFrame() //Funkcja sprawdzająca poprawność ramki
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b086      	sub	sp, #24
 8002754:	af00      	add	r7, sp, #0
	}
	commandSlot -= 10; //Skrócenie długości polecenia
*/
	//===========================/CRC\===============================

	for(int e = 0; e < 3; e++) //Odczytanie nadawcy
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e00a      	b.n	8002772 <readFrame+0x22>
	{
		returnFrame[e+3] = command[e];
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	3303      	adds	r3, #3
 8002760:	4938      	ldr	r1, [pc, #224]	; (8002844 <readFrame+0xf4>)
 8002762:	697a      	ldr	r2, [r7, #20]
 8002764:	440a      	add	r2, r1
 8002766:	7811      	ldrb	r1, [r2, #0]
 8002768:	4a37      	ldr	r2, [pc, #220]	; (8002848 <readFrame+0xf8>)
 800276a:	54d1      	strb	r1, [r2, r3]
	for(int e = 0; e < 3; e++) //Odczytanie nadawcy
 800276c:	697b      	ldr	r3, [r7, #20]
 800276e:	3301      	adds	r3, #1
 8002770:	617b      	str	r3, [r7, #20]
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	2b02      	cmp	r3, #2
 8002776:	ddf1      	ble.n	800275c <readFrame+0xc>
	}
	for(int e = 0; e <= commandSlot - 3; e++) //Usunięcie nadawcy z tablicy
 8002778:	2300      	movs	r3, #0
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	e00b      	b.n	8002796 <readFrame+0x46>
	{
		command[e] = command[e+3];
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	3303      	adds	r3, #3
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <readFrame+0xf4>)
 8002784:	5cd1      	ldrb	r1, [r2, r3]
 8002786:	4a2f      	ldr	r2, [pc, #188]	; (8002844 <readFrame+0xf4>)
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	4413      	add	r3, r2
 800278c:	460a      	mov	r2, r1
 800278e:	701a      	strb	r2, [r3, #0]
	for(int e = 0; e <= commandSlot - 3; e++) //Usunięcie nadawcy z tablicy
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	3301      	adds	r3, #1
 8002794:	613b      	str	r3, [r7, #16]
 8002796:	4b2d      	ldr	r3, [pc, #180]	; (800284c <readFrame+0xfc>)
 8002798:	781b      	ldrb	r3, [r3, #0]
 800279a:	3b03      	subs	r3, #3
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	dded      	ble.n	800277e <readFrame+0x2e>
	}
	commandSlot -= 3; //Skrócenie długości polecenia
 80027a2:	4b2a      	ldr	r3, [pc, #168]	; (800284c <readFrame+0xfc>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	3b03      	subs	r3, #3
 80027a8:	b2da      	uxtb	r2, r3
 80027aa:	4b28      	ldr	r3, [pc, #160]	; (800284c <readFrame+0xfc>)
 80027ac:	701a      	strb	r2, [r3, #0]

	char receiverStr[4]; //Deklaracja stringa z nazwą odbiorcy i przepisanie go
	for(int e=0; e<3; e++)
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
 80027b2:	e00b      	b.n	80027cc <readFrame+0x7c>
	{
		receiverStr[e]=command[e];
 80027b4:	4a23      	ldr	r2, [pc, #140]	; (8002844 <readFrame+0xf4>)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	4413      	add	r3, r2
 80027ba:	7819      	ldrb	r1, [r3, #0]
 80027bc:	1d3a      	adds	r2, r7, #4
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	4413      	add	r3, r2
 80027c2:	460a      	mov	r2, r1
 80027c4:	701a      	strb	r2, [r3, #0]
	for(int e=0; e<3; e++)
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	3301      	adds	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	2b02      	cmp	r3, #2
 80027d0:	ddf0      	ble.n	80027b4 <readFrame+0x64>
	}
	receiverStr[3]='\0';
 80027d2:	2300      	movs	r3, #0
 80027d4:	71fb      	strb	r3, [r7, #7]

	if(!strncmp(receiverStr, "STM", 3)) //Sprawdzenie czy odbiorca jest poprawny
 80027d6:	1d3b      	adds	r3, r7, #4
 80027d8:	2203      	movs	r2, #3
 80027da:	491d      	ldr	r1, [pc, #116]	; (8002850 <readFrame+0x100>)
 80027dc:	4618      	mov	r0, r3
 80027de:	f004 fa6b 	bl	8006cb8 <strncmp>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d129      	bne.n	800283c <readFrame+0xec>
	{
		for(int e = 0; e <= commandSlot - 3; e++) //Usunięcie odbiorcy z tablicy
 80027e8:	2300      	movs	r3, #0
 80027ea:	60bb      	str	r3, [r7, #8]
 80027ec:	e00b      	b.n	8002806 <readFrame+0xb6>
		{
			command[e] = command[e+3];
 80027ee:	68bb      	ldr	r3, [r7, #8]
 80027f0:	3303      	adds	r3, #3
 80027f2:	4a14      	ldr	r2, [pc, #80]	; (8002844 <readFrame+0xf4>)
 80027f4:	5cd1      	ldrb	r1, [r2, r3]
 80027f6:	4a13      	ldr	r2, [pc, #76]	; (8002844 <readFrame+0xf4>)
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	4413      	add	r3, r2
 80027fc:	460a      	mov	r2, r1
 80027fe:	701a      	strb	r2, [r3, #0]
		for(int e = 0; e <= commandSlot - 3; e++) //Usunięcie odbiorcy z tablicy
 8002800:	68bb      	ldr	r3, [r7, #8]
 8002802:	3301      	adds	r3, #1
 8002804:	60bb      	str	r3, [r7, #8]
 8002806:	4b11      	ldr	r3, [pc, #68]	; (800284c <readFrame+0xfc>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	3b03      	subs	r3, #3
 800280c:	68ba      	ldr	r2, [r7, #8]
 800280e:	429a      	cmp	r2, r3
 8002810:	dded      	ble.n	80027ee <readFrame+0x9e>
		}
		commandSlot -= 3; //Skrócenie długości komendy
 8002812:	4b0e      	ldr	r3, [pc, #56]	; (800284c <readFrame+0xfc>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	3b03      	subs	r3, #3
 8002818:	b2da      	uxtb	r2, r3
 800281a:	4b0c      	ldr	r3, [pc, #48]	; (800284c <readFrame+0xfc>)
 800281c:	701a      	strb	r2, [r3, #0]

		readCommand(); // Wywołanie funkcji sprawdzającej polecenie
 800281e:	f000 f81b 	bl	8002858 <readCommand>

		returnFrame[0] = 'S'; //Ustawienie nadawcy w ramce zwrotnej
 8002822:	4b09      	ldr	r3, [pc, #36]	; (8002848 <readFrame+0xf8>)
 8002824:	2253      	movs	r2, #83	; 0x53
 8002826:	701a      	strb	r2, [r3, #0]
		returnFrame[1] = 'T';
 8002828:	4b07      	ldr	r3, [pc, #28]	; (8002848 <readFrame+0xf8>)
 800282a:	2254      	movs	r2, #84	; 0x54
 800282c:	705a      	strb	r2, [r3, #1]
		returnFrame[2] = 'M';
 800282e:	4b06      	ldr	r3, [pc, #24]	; (8002848 <readFrame+0xf8>)
 8002830:	224d      	movs	r2, #77	; 0x4d
 8002832:	709a      	strb	r2, [r3, #2]
		uint32_t crcValue = HAL_CRC_Calculate(&hcrc, returnFramE, 9); //Obliczenie CRC32 MPEG-2 z tablicy pomocniczej
		Send("/0x%X%s;\r\n",crcValue,returnFrame); //Wysłanie ramki zwrotnej z CRC32
*/

		//===========================/CRC\===============================
		Send("/%s;\r\n",returnFrame); //Wysłanie ramki zwrotnej
 8002834:	4904      	ldr	r1, [pc, #16]	; (8002848 <readFrame+0xf8>)
 8002836:	4807      	ldr	r0, [pc, #28]	; (8002854 <readFrame+0x104>)
 8002838:	f000 fbd0 	bl	8002fdc <Send>
	else
	{
		return; //Opuszczenie funkcji w wypadku błędnego odbiorcy
	}

}
 800283c:	3718      	adds	r7, #24
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	200002f4 	.word	0x200002f4
 8002848:	20000848 	.word	0x20000848
 800284c:	20000294 	.word	0x20000294
 8002850:	08007ee4 	.word	0x08007ee4
 8002854:	08007ee8 	.word	0x08007ee8

08002858 <readCommand>:
		return 0;
	}
}

void readCommand() //Funkcja sprawdzająca polecenie
{
 8002858:	b5b0      	push	{r4, r5, r7, lr}
 800285a:	b08e      	sub	sp, #56	; 0x38
 800285c:	af08      	add	r7, sp, #32
 800285e:	466b      	mov	r3, sp
 8002860:	461d      	mov	r5, r3
	//zmienne wejścia
	int brightnessIn = 0; //od 1 do 100
 8002862:	2300      	movs	r3, #0
 8002864:	60bb      	str	r3, [r7, #8]
	int speedIn = 0; // od 1 do 100
 8002866:	2300      	movs	r3, #0
 8002868:	607b      	str	r3, [r7, #4]

	static uint8_t exeMode = 0; //Flaga testowego trybu
	errorAS = 0; //Reset flagi wysłanego errora
 800286a:	4bb5      	ldr	r3, [pc, #724]	; (8002b40 <readCommand+0x2e8>)
 800286c:	2200      	movs	r2, #0
 800286e:	701a      	strb	r2, [r3, #0]
	char lastChar; //Char do sprawdzania ostatniego znaku w scanf
	char nawias; //Char do sprawdzania czy argumenty kończą się poprawnie nawiasem

	char commandStr[commandSlot+1]; //String zawierający w sobie odebraną komende
 8002870:	4bb4      	ldr	r3, [pc, #720]	; (8002b44 <readCommand+0x2ec>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	1c58      	adds	r0, r3, #1
 8002876:	1e43      	subs	r3, r0, #1
 8002878:	613b      	str	r3, [r7, #16]
 800287a:	4603      	mov	r3, r0
 800287c:	4619      	mov	r1, r3
 800287e:	f04f 0200 	mov.w	r2, #0
 8002882:	f04f 0300 	mov.w	r3, #0
 8002886:	f04f 0400 	mov.w	r4, #0
 800288a:	00d4      	lsls	r4, r2, #3
 800288c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8002890:	00cb      	lsls	r3, r1, #3
 8002892:	4603      	mov	r3, r0
 8002894:	4619      	mov	r1, r3
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	f04f 0300 	mov.w	r3, #0
 800289e:	f04f 0400 	mov.w	r4, #0
 80028a2:	00d4      	lsls	r4, r2, #3
 80028a4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80028a8:	00cb      	lsls	r3, r1, #3
 80028aa:	4603      	mov	r3, r0
 80028ac:	3307      	adds	r3, #7
 80028ae:	08db      	lsrs	r3, r3, #3
 80028b0:	00db      	lsls	r3, r3, #3
 80028b2:	ebad 0d03 	sub.w	sp, sp, r3
 80028b6:	ab08      	add	r3, sp, #32
 80028b8:	3300      	adds	r3, #0
 80028ba:	60fb      	str	r3, [r7, #12]
	for(int e = 0; e<commandSlot; e++) //Uzupełnienie stringa commandStr o komendę
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	e00b      	b.n	80028da <readCommand+0x82>
	{
		commandStr[e] = command[e];
 80028c2:	4aa1      	ldr	r2, [pc, #644]	; (8002b48 <readCommand+0x2f0>)
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	4413      	add	r3, r2
 80028c8:	7819      	ldrb	r1, [r3, #0]
 80028ca:	68fa      	ldr	r2, [r7, #12]
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	4413      	add	r3, r2
 80028d0:	460a      	mov	r2, r1
 80028d2:	701a      	strb	r2, [r3, #0]
	for(int e = 0; e<commandSlot; e++) //Uzupełnienie stringa commandStr o komendę
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	3301      	adds	r3, #1
 80028d8:	617b      	str	r3, [r7, #20]
 80028da:	4b9a      	ldr	r3, [pc, #616]	; (8002b44 <readCommand+0x2ec>)
 80028dc:	781b      	ldrb	r3, [r3, #0]
 80028de:	461a      	mov	r2, r3
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	4293      	cmp	r3, r2
 80028e4:	dbed      	blt.n	80028c2 <readCommand+0x6a>
	}
	commandStr[commandSlot] = '\0';
 80028e6:	4b97      	ldr	r3, [pc, #604]	; (8002b44 <readCommand+0x2ec>)
 80028e8:	781b      	ldrb	r3, [r3, #0]
 80028ea:	461a      	mov	r2, r3
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	2100      	movs	r1, #0
 80028f0:	5499      	strb	r1, [r3, r2]

	if(!exeMode) //Sprawdzenie trybu pracy
 80028f2:	4b96      	ldr	r3, [pc, #600]	; (8002b4c <readCommand+0x2f4>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	f040 81a6 	bne.w	8002c48 <readCommand+0x3f0>
	{
		if(compareCommand(commandStr, 0,"CMN")) //Sprawdzenie czy polecenie to CMN(następny tryb)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a94      	ldr	r2, [pc, #592]	; (8002b50 <readCommand+0x2f8>)
 8002900:	2100      	movs	r1, #0
 8002902:	4618      	mov	r0, r3
 8002904:	f000 fa9c 	bl	8002e40 <compareCommand>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <readCommand+0xc2>
		{
			returnFrameAppend("EXE");
 800290e:	4891      	ldr	r0, [pc, #580]	; (8002b54 <readCommand+0x2fc>)
 8002910:	f000 fa7e 	bl	8002e10 <returnFrameAppend>
			CMN();
 8002914:	f7ff fc40 	bl	8002198 <CMN>
 8002918:	e24b      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CMP")) //Sprawdzenie czy polecenie to CMP(poprzedni tryb)
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	4a8e      	ldr	r2, [pc, #568]	; (8002b58 <readCommand+0x300>)
 800291e:	2100      	movs	r1, #0
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fa8d 	bl	8002e40 <compareCommand>
 8002926:	4603      	mov	r3, r0
 8002928:	2b00      	cmp	r3, #0
 800292a:	d005      	beq.n	8002938 <readCommand+0xe0>
		{
			returnFrameAppend("EXE");
 800292c:	4889      	ldr	r0, [pc, #548]	; (8002b54 <readCommand+0x2fc>)
 800292e:	f000 fa6f 	bl	8002e10 <returnFrameAppend>
			CMP();
 8002932:	f7ff fc49 	bl	80021c8 <CMP>
 8002936:	e23c      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CCN")) //Sprawdzenie czy polecenie to CCN(następny kolor)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	4a88      	ldr	r2, [pc, #544]	; (8002b5c <readCommand+0x304>)
 800293c:	2100      	movs	r1, #0
 800293e:	4618      	mov	r0, r3
 8002940:	f000 fa7e 	bl	8002e40 <compareCommand>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d005      	beq.n	8002956 <readCommand+0xfe>
		{
			returnFrameAppend("EXE");
 800294a:	4882      	ldr	r0, [pc, #520]	; (8002b54 <readCommand+0x2fc>)
 800294c:	f000 fa60 	bl	8002e10 <returnFrameAppend>
			CCN();
 8002950:	f7ff fc52 	bl	80021f8 <CCN>
 8002954:	e22d      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CCP")) //Sprawdzenie czy polecenie to CCP(poprzedni kolor)
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4a81      	ldr	r2, [pc, #516]	; (8002b60 <readCommand+0x308>)
 800295a:	2100      	movs	r1, #0
 800295c:	4618      	mov	r0, r3
 800295e:	f000 fa6f 	bl	8002e40 <compareCommand>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d005      	beq.n	8002974 <readCommand+0x11c>
		{
			returnFrameAppend("EXE");
 8002968:	487a      	ldr	r0, [pc, #488]	; (8002b54 <readCommand+0x2fc>)
 800296a:	f000 fa51 	bl	8002e10 <returnFrameAppend>
			CCP();
 800296e:	f7ff fc65 	bl	800223c <CCP>
 8002972:	e21e      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CBU")) //Sprawdzenie czy polecenie to CBU(jaśniej)
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	4a7b      	ldr	r2, [pc, #492]	; (8002b64 <readCommand+0x30c>)
 8002978:	2100      	movs	r1, #0
 800297a:	4618      	mov	r0, r3
 800297c:	f000 fa60 	bl	8002e40 <compareCommand>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d005      	beq.n	8002992 <readCommand+0x13a>
		{
			returnFrameAppend("EXE");
 8002986:	4873      	ldr	r0, [pc, #460]	; (8002b54 <readCommand+0x2fc>)
 8002988:	f000 fa42 	bl	8002e10 <returnFrameAppend>
			CBU();
 800298c:	f7ff fc78 	bl	8002280 <CBU>
 8002990:	e20f      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CBD")) //Sprawdzenie czy polecenie to CBD(ciemniej)
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	4a74      	ldr	r2, [pc, #464]	; (8002b68 <readCommand+0x310>)
 8002996:	2100      	movs	r1, #0
 8002998:	4618      	mov	r0, r3
 800299a:	f000 fa51 	bl	8002e40 <compareCommand>
 800299e:	4603      	mov	r3, r0
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d005      	beq.n	80029b0 <readCommand+0x158>
		{
			returnFrameAppend("EXE");
 80029a4:	486b      	ldr	r0, [pc, #428]	; (8002b54 <readCommand+0x2fc>)
 80029a6:	f000 fa33 	bl	8002e10 <returnFrameAppend>
			CBD();
 80029aa:	f7ff fca5 	bl	80022f8 <CBD>
 80029ae:	e200      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CSU")) //Sprawdzenie czy polecenie to CSU(szybciej)
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	4a6e      	ldr	r2, [pc, #440]	; (8002b6c <readCommand+0x314>)
 80029b4:	2100      	movs	r1, #0
 80029b6:	4618      	mov	r0, r3
 80029b8:	f000 fa42 	bl	8002e40 <compareCommand>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d005      	beq.n	80029ce <readCommand+0x176>
		{
			returnFrameAppend("EXE");
 80029c2:	4864      	ldr	r0, [pc, #400]	; (8002b54 <readCommand+0x2fc>)
 80029c4:	f000 fa24 	bl	8002e10 <returnFrameAppend>
			CSU();
 80029c8:	f7ff fcd2 	bl	8002370 <CSU>
 80029cc:	e1f1      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"CSD")) //Sprawdzenie czy polecenei to CSD(wolniej)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	4a67      	ldr	r2, [pc, #412]	; (8002b70 <readCommand+0x318>)
 80029d2:	2100      	movs	r1, #0
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 fa33 	bl	8002e40 <compareCommand>
 80029da:	4603      	mov	r3, r0
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d005      	beq.n	80029ec <readCommand+0x194>
		{
			returnFrameAppend("EXE");
 80029e0:	485c      	ldr	r0, [pc, #368]	; (8002b54 <readCommand+0x2fc>)
 80029e2:	f000 fa15 	bl	8002e10 <returnFrameAppend>
			CSD();
 80029e6:	f7ff fcff 	bl	80023e8 <CSD>
 80029ea:	e1e2      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"RES")) //Sprawdzenie czy polecenie to RES(reset do pierwotnych ustawień)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4a61      	ldr	r2, [pc, #388]	; (8002b74 <readCommand+0x31c>)
 80029f0:	2100      	movs	r1, #0
 80029f2:	4618      	mov	r0, r3
 80029f4:	f000 fa24 	bl	8002e40 <compareCommand>
 80029f8:	4603      	mov	r3, r0
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <readCommand+0x1b2>
		{
			returnFrameAppend("EXE");
 80029fe:	4855      	ldr	r0, [pc, #340]	; (8002b54 <readCommand+0x2fc>)
 8002a00:	f000 fa06 	bl	8002e10 <returnFrameAppend>
			init();
 8002a04:	f7fe fe68 	bl	80016d8 <init>
 8002a08:	e1d3      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"TEN")) //Sprawdzenie czy polecenie to TEN(exeMode = 1)
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	4a5a      	ldr	r2, [pc, #360]	; (8002b78 <readCommand+0x320>)
 8002a0e:	2100      	movs	r1, #0
 8002a10:	4618      	mov	r0, r3
 8002a12:	f000 fa15 	bl	8002e40 <compareCommand>
 8002a16:	4603      	mov	r3, r0
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <readCommand+0x1d6>
		{
			returnFrameAppend("EXE");
 8002a1c:	484d      	ldr	r0, [pc, #308]	; (8002b54 <readCommand+0x2fc>)
 8002a1e:	f000 f9f7 	bl	8002e10 <returnFrameAppend>
			exeMode = 1; //Zmiana trybu na testowy
 8002a22:	4b4a      	ldr	r3, [pc, #296]	; (8002b4c <readCommand+0x2f4>)
 8002a24:	2201      	movs	r2, #1
 8002a26:	701a      	strb	r2, [r3, #0]
			testInit(); //Przejście w tryb testowy
 8002a28:	f7fe fe78 	bl	800171c <testInit>
 8002a2c:	e1c1      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 1,"SEC(")) //Sprawdzenie czy polecenie to SEC(ustawienie koloru)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	4a52      	ldr	r2, [pc, #328]	; (8002b7c <readCommand+0x324>)
 8002a32:	2101      	movs	r1, #1
 8002a34:	4618      	mov	r0, r3
 8002a36:	f000 fa03 	bl	8002e40 <compareCommand>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d03d      	beq.n	8002abc <readCommand+0x264>
		{
			//Sprawdzenie poprawności argumentów i odczytanie ich
			if(sscanf(commandStr, "%d,%d,%d%c%c", &inputColour[0], &inputColour[1], &inputColour[2], &nawias, &lastChar)==4)
 8002a40:	68f8      	ldr	r0, [r7, #12]
 8002a42:	1cfb      	adds	r3, r7, #3
 8002a44:	9302      	str	r3, [sp, #8]
 8002a46:	1cbb      	adds	r3, r7, #2
 8002a48:	9301      	str	r3, [sp, #4]
 8002a4a:	4b4d      	ldr	r3, [pc, #308]	; (8002b80 <readCommand+0x328>)
 8002a4c:	9300      	str	r3, [sp, #0]
 8002a4e:	4b4d      	ldr	r3, [pc, #308]	; (8002b84 <readCommand+0x32c>)
 8002a50:	4a4d      	ldr	r2, [pc, #308]	; (8002b88 <readCommand+0x330>)
 8002a52:	494e      	ldr	r1, [pc, #312]	; (8002b8c <readCommand+0x334>)
 8002a54:	f004 f904 	bl	8006c60 <siscanf>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b04      	cmp	r3, #4
 8002a5c:	d123      	bne.n	8002aa6 <readCommand+0x24e>
			{
				if(nawias == ')' ) //Sprawdzenie czy argumenty zostały poprawnie zamknięte
 8002a5e:	78bb      	ldrb	r3, [r7, #2]
 8002a60:	2b29      	cmp	r3, #41	; 0x29
 8002a62:	d113      	bne.n	8002a8c <readCommand+0x234>
						returnFrameAppend("WRA"); //Poinformowanie o błędzie i wyzerowanie zmiennych
						inputColour[0] = 0, inputColour[1] = 0, inputColour[2] = 0;
					}
					else
					{
						returnFrameAppend("EXE");
 8002a64:	483b      	ldr	r0, [pc, #236]	; (8002b54 <readCommand+0x2fc>)
 8002a66:	f000 f9d3 	bl	8002e10 <returnFrameAppend>
						if(modeID!=4 && modeID!=5) //Sprawdzenie czy obecny tryb obsługuje zmiany koloru
 8002a6a:	4b49      	ldr	r3, [pc, #292]	; (8002b90 <readCommand+0x338>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b04      	cmp	r3, #4
 8002a70:	f000 819f 	beq.w	8002db2 <readCommand+0x55a>
 8002a74:	4b46      	ldr	r3, [pc, #280]	; (8002b90 <readCommand+0x338>)
 8002a76:	781b      	ldrb	r3, [r3, #0]
 8002a78:	2b05      	cmp	r3, #5
 8002a7a:	f000 819a 	beq.w	8002db2 <readCommand+0x55a>
						{
							colourID=0; //Zmianak colourID na 0 (wskaxnik na inputColour)
 8002a7e:	4b45      	ldr	r3, [pc, #276]	; (8002b94 <readCommand+0x33c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	701a      	strb	r2, [r3, #0]
							somethingChanged = 1; //Ustawienie flagi zmiany na 1
 8002a84:	4b44      	ldr	r3, [pc, #272]	; (8002b98 <readCommand+0x340>)
 8002a86:	2201      	movs	r2, #1
 8002a88:	701a      	strb	r2, [r3, #0]
 8002a8a:	e192      	b.n	8002db2 <readCommand+0x55a>
						}
					}
				}
				else
				{
					returnFrameAppend("WRC");
 8002a8c:	4843      	ldr	r0, [pc, #268]	; (8002b9c <readCommand+0x344>)
 8002a8e:	f000 f9bf 	bl	8002e10 <returnFrameAppend>
					inputColour[0] = 0, inputColour[1] = 0, inputColour[2] = 0;
 8002a92:	4b3d      	ldr	r3, [pc, #244]	; (8002b88 <readCommand+0x330>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	701a      	strb	r2, [r3, #0]
 8002a98:	4b3b      	ldr	r3, [pc, #236]	; (8002b88 <readCommand+0x330>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	705a      	strb	r2, [r3, #1]
 8002a9e:	4b3a      	ldr	r3, [pc, #232]	; (8002b88 <readCommand+0x330>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	709a      	strb	r2, [r3, #2]
 8002aa4:	e185      	b.n	8002db2 <readCommand+0x55a>
				}
			}
			else if(nawias == ')') //Sprawdzenie czy błąd wystąpił w argumentach
 8002aa6:	78bb      	ldrb	r3, [r7, #2]
 8002aa8:	2b29      	cmp	r3, #41	; 0x29
 8002aaa:	d103      	bne.n	8002ab4 <readCommand+0x25c>
			{
				returnFrameAppend("WRC");
 8002aac:	483b      	ldr	r0, [pc, #236]	; (8002b9c <readCommand+0x344>)
 8002aae:	f000 f9af 	bl	8002e10 <returnFrameAppend>
 8002ab2:	e17e      	b.n	8002db2 <readCommand+0x55a>
			}
			else
			{
				returnFrameAppend("WRA");
 8002ab4:	483a      	ldr	r0, [pc, #232]	; (8002ba0 <readCommand+0x348>)
 8002ab6:	f000 f9ab 	bl	8002e10 <returnFrameAppend>
 8002aba:	e17a      	b.n	8002db2 <readCommand+0x55a>
			}
		}
		else if(compareCommand(commandStr, 1,"SEB(")) //Sprawdzenie czy polecenie to SEB(ustawienie jasności)
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	4a39      	ldr	r2, [pc, #228]	; (8002ba4 <readCommand+0x34c>)
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 f9bc 	bl	8002e40 <compareCommand>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d072      	beq.n	8002bb4 <readCommand+0x35c>
		{
			//Sprawdzenie poprawności argumentów i odczytanie ich
			if(sscanf(commandStr, "%d%c%c", &brightnessIn, &nawias, &lastChar)==2)
 8002ace:	68f8      	ldr	r0, [r7, #12]
 8002ad0:	1cb9      	adds	r1, r7, #2
 8002ad2:	f107 0208 	add.w	r2, r7, #8
 8002ad6:	1cfb      	adds	r3, r7, #3
 8002ad8:	9300      	str	r3, [sp, #0]
 8002ada:	460b      	mov	r3, r1
 8002adc:	4932      	ldr	r1, [pc, #200]	; (8002ba8 <readCommand+0x350>)
 8002ade:	f004 f8bf 	bl	8006c60 <siscanf>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b02      	cmp	r3, #2
 8002ae6:	d120      	bne.n	8002b2a <readCommand+0x2d2>
			{
				if(nawias == ')' ) //Sprawdzenie czy argumenty zostały poprawnie zamknięte
 8002ae8:	78bb      	ldrb	r3, [r7, #2]
 8002aea:	2b29      	cmp	r3, #41	; 0x29
 8002aec:	d119      	bne.n	8002b22 <readCommand+0x2ca>
				{
					//Sprawdzenie zakresu argumentów
					if(brightnessIn < 1 || brightnessIn > 100)
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	dd02      	ble.n	8002afa <readCommand+0x2a2>
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2b64      	cmp	r3, #100	; 0x64
 8002af8:	dd03      	ble.n	8002b02 <readCommand+0x2aa>
					{
						returnFrameAppend("WRA"); //Poinformowanie o błędzie i wyzerowanie zmiennych
 8002afa:	4829      	ldr	r0, [pc, #164]	; (8002ba0 <readCommand+0x348>)
 8002afc:	f000 f988 	bl	8002e10 <returnFrameAppend>
 8002b00:	e157      	b.n	8002db2 <readCommand+0x55a>
					}
					else
					{
						returnFrameAppend("EXE");
 8002b02:	4814      	ldr	r0, [pc, #80]	; (8002b54 <readCommand+0x2fc>)
 8002b04:	f000 f984 	bl	8002e10 <returnFrameAppend>
						brightness = (float)brightnessIn/100;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	ee07 3a90 	vmov	s15, r3
 8002b0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b12:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002bac <readCommand+0x354>
 8002b16:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002b1a:	4b25      	ldr	r3, [pc, #148]	; (8002bb0 <readCommand+0x358>)
 8002b1c:	edc3 7a00 	vstr	s15, [r3]
 8002b20:	e147      	b.n	8002db2 <readCommand+0x55a>
					}
				}
				else
				{
					returnFrameAppend("WRC");
 8002b22:	481e      	ldr	r0, [pc, #120]	; (8002b9c <readCommand+0x344>)
 8002b24:	f000 f974 	bl	8002e10 <returnFrameAppend>
 8002b28:	e143      	b.n	8002db2 <readCommand+0x55a>
				}
			}
			else if(nawias == ')') //Sprawdzenie czy błąd wystąpił w argumentach
 8002b2a:	78bb      	ldrb	r3, [r7, #2]
 8002b2c:	2b29      	cmp	r3, #41	; 0x29
 8002b2e:	d103      	bne.n	8002b38 <readCommand+0x2e0>
			{
				returnFrameAppend("WRC");
 8002b30:	481a      	ldr	r0, [pc, #104]	; (8002b9c <readCommand+0x344>)
 8002b32:	f000 f96d 	bl	8002e10 <returnFrameAppend>
 8002b36:	e13c      	b.n	8002db2 <readCommand+0x55a>
			}
			else
			{
				returnFrameAppend("WRA");
 8002b38:	4819      	ldr	r0, [pc, #100]	; (8002ba0 <readCommand+0x348>)
 8002b3a:	f000 f969 	bl	8002e10 <returnFrameAppend>
 8002b3e:	e138      	b.n	8002db2 <readCommand+0x55a>
 8002b40:	200002f0 	.word	0x200002f0
 8002b44:	20000294 	.word	0x20000294
 8002b48:	200002f4 	.word	0x200002f4
 8002b4c:	200002db 	.word	0x200002db
 8002b50:	08007ef0 	.word	0x08007ef0
 8002b54:	08007ef4 	.word	0x08007ef4
 8002b58:	08007ef8 	.word	0x08007ef8
 8002b5c:	08007efc 	.word	0x08007efc
 8002b60:	08007f00 	.word	0x08007f00
 8002b64:	08007f04 	.word	0x08007f04
 8002b68:	08007f08 	.word	0x08007f08
 8002b6c:	08007f0c 	.word	0x08007f0c
 8002b70:	08007f10 	.word	0x08007f10
 8002b74:	08007f14 	.word	0x08007f14
 8002b78:	08007f18 	.word	0x08007f18
 8002b7c:	08007f1c 	.word	0x08007f1c
 8002b80:	200002a2 	.word	0x200002a2
 8002b84:	200002a1 	.word	0x200002a1
 8002b88:	200002a0 	.word	0x200002a0
 8002b8c:	08007f24 	.word	0x08007f24
 8002b90:	20000021 	.word	0x20000021
 8002b94:	20000020 	.word	0x20000020
 8002b98:	20000084 	.word	0x20000084
 8002b9c:	08007f34 	.word	0x08007f34
 8002ba0:	08007f38 	.word	0x08007f38
 8002ba4:	08007f3c 	.word	0x08007f3c
 8002ba8:	08007f44 	.word	0x08007f44
 8002bac:	42c80000 	.word	0x42c80000
 8002bb0:	20000018 	.word	0x20000018
			}
		}
		else if(compareCommand(commandStr, 1,"SES(")) //Sprawdzenie czy polecenie to SES(ustawienie prędkości)
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4a81      	ldr	r2, [pc, #516]	; (8002dbc <readCommand+0x564>)
 8002bb8:	2101      	movs	r1, #1
 8002bba:	4618      	mov	r0, r3
 8002bbc:	f000 f940 	bl	8002e40 <compareCommand>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d037      	beq.n	8002c36 <readCommand+0x3de>
		{
			//Sprawdzenie poprawności argumentów i odczytanie ich
			if(sscanf(commandStr, "%d%c%c", &speedIn, &nawias, &lastChar)==2)
 8002bc6:	68f8      	ldr	r0, [r7, #12]
 8002bc8:	1cb9      	adds	r1, r7, #2
 8002bca:	1d3a      	adds	r2, r7, #4
 8002bcc:	1cfb      	adds	r3, r7, #3
 8002bce:	9300      	str	r3, [sp, #0]
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	497b      	ldr	r1, [pc, #492]	; (8002dc0 <readCommand+0x568>)
 8002bd4:	f004 f844 	bl	8006c60 <siscanf>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b02      	cmp	r3, #2
 8002bdc:	d120      	bne.n	8002c20 <readCommand+0x3c8>
			{
				if(nawias == ')' ) //Sprawdzenie czy argumenty zostały poprawnie zamknięte
 8002bde:	78bb      	ldrb	r3, [r7, #2]
 8002be0:	2b29      	cmp	r3, #41	; 0x29
 8002be2:	d119      	bne.n	8002c18 <readCommand+0x3c0>
				{
					//Sprawdzenie zakresu argumentów
					if(speedIn < 1 || speedIn > 100)
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	dd02      	ble.n	8002bf0 <readCommand+0x398>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	2b64      	cmp	r3, #100	; 0x64
 8002bee:	dd03      	ble.n	8002bf8 <readCommand+0x3a0>
					{
						returnFrameAppend("WRA"); //Poinformowanie o błędzie i wyzerowanie zmiennych
 8002bf0:	4874      	ldr	r0, [pc, #464]	; (8002dc4 <readCommand+0x56c>)
 8002bf2:	f000 f90d 	bl	8002e10 <returnFrameAppend>
 8002bf6:	e0dc      	b.n	8002db2 <readCommand+0x55a>
					}
					else
					{
						returnFrameAppend("EXE");
 8002bf8:	4873      	ldr	r0, [pc, #460]	; (8002dc8 <readCommand+0x570>)
 8002bfa:	f000 f909 	bl	8002e10 <returnFrameAppend>
						speed = (float)speedIn / 100;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	ee07 3a90 	vmov	s15, r3
 8002c04:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c08:	eddf 6a70 	vldr	s13, [pc, #448]	; 8002dcc <readCommand+0x574>
 8002c0c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002c10:	4b6f      	ldr	r3, [pc, #444]	; (8002dd0 <readCommand+0x578>)
 8002c12:	edc3 7a00 	vstr	s15, [r3]
 8002c16:	e0cc      	b.n	8002db2 <readCommand+0x55a>
					}
				}
				else
				{
					returnFrameAppend("WRC");
 8002c18:	486e      	ldr	r0, [pc, #440]	; (8002dd4 <readCommand+0x57c>)
 8002c1a:	f000 f8f9 	bl	8002e10 <returnFrameAppend>
 8002c1e:	e0c8      	b.n	8002db2 <readCommand+0x55a>
				}
			}
			else if(nawias == ')') //Sprawdzenie czy błąd wystąpił w argumentach
 8002c20:	78bb      	ldrb	r3, [r7, #2]
 8002c22:	2b29      	cmp	r3, #41	; 0x29
 8002c24:	d103      	bne.n	8002c2e <readCommand+0x3d6>
			{
				returnFrameAppend("WRC");
 8002c26:	486b      	ldr	r0, [pc, #428]	; (8002dd4 <readCommand+0x57c>)
 8002c28:	f000 f8f2 	bl	8002e10 <returnFrameAppend>
 8002c2c:	e0c1      	b.n	8002db2 <readCommand+0x55a>
			}
			else
			{
				returnFrameAppend("WRA");
 8002c2e:	4865      	ldr	r0, [pc, #404]	; (8002dc4 <readCommand+0x56c>)
 8002c30:	f000 f8ee 	bl	8002e10 <returnFrameAppend>
 8002c34:	e0bd      	b.n	8002db2 <readCommand+0x55a>
			}
		}
		else if(!errorAS) //Sprawdzenie czy error został już wysłany
 8002c36:	4b68      	ldr	r3, [pc, #416]	; (8002dd8 <readCommand+0x580>)
 8002c38:	781b      	ldrb	r3, [r3, #0]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80b9 	bne.w	8002db2 <readCommand+0x55a>
		{
			returnFrameAppend("WRC");
 8002c40:	4864      	ldr	r0, [pc, #400]	; (8002dd4 <readCommand+0x57c>)
 8002c42:	f000 f8e5 	bl	8002e10 <returnFrameAppend>
 8002c46:	e0b4      	b.n	8002db2 <readCommand+0x55a>
		}
	}
	else
	{
		if(compareCommand(commandStr, 0,"TEX")) //Sprawdzenie czy polecenie to TEX(exeMode = 0)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4a64      	ldr	r2, [pc, #400]	; (8002ddc <readCommand+0x584>)
 8002c4c:	2100      	movs	r1, #0
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f000 f8f6 	bl	8002e40 <compareCommand>
 8002c54:	4603      	mov	r3, r0
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d00b      	beq.n	8002c72 <readCommand+0x41a>
		{
			returnFrameAppend("EXE");
 8002c5a:	485b      	ldr	r0, [pc, #364]	; (8002dc8 <readCommand+0x570>)
 8002c5c:	f000 f8d8 	bl	8002e10 <returnFrameAppend>
			exeMode = 0; //Zmiana trybu na normalny
 8002c60:	4b5f      	ldr	r3, [pc, #380]	; (8002de0 <readCommand+0x588>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
			bringback(); //Odczytanie ostatnio zapisanych zmiennych operacyjnych
 8002c66:	f7fe fd31 	bl	80016cc <bringback>
			somethingChanged = 1; //Ustawienie flagi zmiany na 1
 8002c6a:	4b5e      	ldr	r3, [pc, #376]	; (8002de4 <readCommand+0x58c>)
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	701a      	strb	r2, [r3, #0]
 8002c70:	e09f      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 0,"TER")) //Sprawdzenie czy polecenie to TER(exeMode = 0 i reset)
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	4a5c      	ldr	r2, [pc, #368]	; (8002de8 <readCommand+0x590>)
 8002c76:	2100      	movs	r1, #0
 8002c78:	4618      	mov	r0, r3
 8002c7a:	f000 f8e1 	bl	8002e40 <compareCommand>
 8002c7e:	4603      	mov	r3, r0
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d008      	beq.n	8002c96 <readCommand+0x43e>
		{
			returnFrameAppend("EXE");
 8002c84:	4850      	ldr	r0, [pc, #320]	; (8002dc8 <readCommand+0x570>)
 8002c86:	f000 f8c3 	bl	8002e10 <returnFrameAppend>
			exeMode = 0; //Zmiana trybu na normalny
 8002c8a:	4b55      	ldr	r3, [pc, #340]	; (8002de0 <readCommand+0x588>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
			init(); //Ustawienie defaultowych zmiennych operacyjnych
 8002c90:	f7fe fd22 	bl	80016d8 <init>
 8002c94:	e08d      	b.n	8002db2 <readCommand+0x55a>
		}
		else if(compareCommand(commandStr, 1,"SEM[")) //Sprawdzenie czy polecenie to SEM(zmiana obszaru matrycy)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	4a54      	ldr	r2, [pc, #336]	; (8002dec <readCommand+0x594>)
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f000 f8cf 	bl	8002e40 <compareCommand>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d07d      	beq.n	8002da4 <readCommand+0x54c>
		{
			//Sprawdzenie poprawności argumentów i odczytanie ich
			if(sscanf(commandStr, "%d,%d][%d,%d](%d,%d,%d%c%c", &x, &y, &x2, &y2, &inputColour[0], &inputColour[1], &inputColour[2], &nawias, &lastChar)==8)
 8002ca8:	68f8      	ldr	r0, [r7, #12]
 8002caa:	1cfb      	adds	r3, r7, #3
 8002cac:	9306      	str	r3, [sp, #24]
 8002cae:	1cbb      	adds	r3, r7, #2
 8002cb0:	9305      	str	r3, [sp, #20]
 8002cb2:	4b4f      	ldr	r3, [pc, #316]	; (8002df0 <readCommand+0x598>)
 8002cb4:	9304      	str	r3, [sp, #16]
 8002cb6:	4b4f      	ldr	r3, [pc, #316]	; (8002df4 <readCommand+0x59c>)
 8002cb8:	9303      	str	r3, [sp, #12]
 8002cba:	4b4f      	ldr	r3, [pc, #316]	; (8002df8 <readCommand+0x5a0>)
 8002cbc:	9302      	str	r3, [sp, #8]
 8002cbe:	4b4f      	ldr	r3, [pc, #316]	; (8002dfc <readCommand+0x5a4>)
 8002cc0:	9301      	str	r3, [sp, #4]
 8002cc2:	4b4f      	ldr	r3, [pc, #316]	; (8002e00 <readCommand+0x5a8>)
 8002cc4:	9300      	str	r3, [sp, #0]
 8002cc6:	4b4f      	ldr	r3, [pc, #316]	; (8002e04 <readCommand+0x5ac>)
 8002cc8:	4a4f      	ldr	r2, [pc, #316]	; (8002e08 <readCommand+0x5b0>)
 8002cca:	4950      	ldr	r1, [pc, #320]	; (8002e0c <readCommand+0x5b4>)
 8002ccc:	f003 ffc8 	bl	8006c60 <siscanf>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d15b      	bne.n	8002d8e <readCommand+0x536>
			{
				if(nawias == ')' ) //Sprawdzenie czy argumenty zostały poprawnie zamknięte
 8002cd6:	78bb      	ldrb	r3, [r7, #2]
 8002cd8:	2b29      	cmp	r3, #41	; 0x29
 8002cda:	d13f      	bne.n	8002d5c <readCommand+0x504>
				{
					//Sprawdzenie zakresu argumentów
					if(x < 1 || x > 16 || x2 < 1 || x2 > 16 || y < 1 || y > 16 || y2 < 1 || y2 > 16 || inputColour[0] < 0 || inputColour[0] > 255 || inputColour[1] < 0 || inputColour[1] > 255 || inputColour[2] < 0 || inputColour[2] > 255)
 8002cdc:	4b4a      	ldr	r3, [pc, #296]	; (8002e08 <readCommand+0x5b0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	dd1b      	ble.n	8002d1c <readCommand+0x4c4>
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <readCommand+0x5b0>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	2b10      	cmp	r3, #16
 8002cea:	dc17      	bgt.n	8002d1c <readCommand+0x4c4>
 8002cec:	4b44      	ldr	r3, [pc, #272]	; (8002e00 <readCommand+0x5a8>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	dd13      	ble.n	8002d1c <readCommand+0x4c4>
 8002cf4:	4b42      	ldr	r3, [pc, #264]	; (8002e00 <readCommand+0x5a8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b10      	cmp	r3, #16
 8002cfa:	dc0f      	bgt.n	8002d1c <readCommand+0x4c4>
 8002cfc:	4b41      	ldr	r3, [pc, #260]	; (8002e04 <readCommand+0x5ac>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	dd0b      	ble.n	8002d1c <readCommand+0x4c4>
 8002d04:	4b3f      	ldr	r3, [pc, #252]	; (8002e04 <readCommand+0x5ac>)
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	2b10      	cmp	r3, #16
 8002d0a:	dc07      	bgt.n	8002d1c <readCommand+0x4c4>
 8002d0c:	4b3b      	ldr	r3, [pc, #236]	; (8002dfc <readCommand+0x5a4>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	dd03      	ble.n	8002d1c <readCommand+0x4c4>
 8002d14:	4b39      	ldr	r3, [pc, #228]	; (8002dfc <readCommand+0x5a4>)
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	2b10      	cmp	r3, #16
 8002d1a:	dd18      	ble.n	8002d4e <readCommand+0x4f6>
					{
						returnFrameAppend("WRA");//Poinformowanie o błędzie i wyzerowanie zmiennych
 8002d1c:	4829      	ldr	r0, [pc, #164]	; (8002dc4 <readCommand+0x56c>)
 8002d1e:	f000 f877 	bl	8002e10 <returnFrameAppend>
						x = 0, x2 = 0, y = 0, y2 = 0, inputColour[0] = 0, inputColour[1] = 0, inputColour[2] = 0;
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <readCommand+0x5b0>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	4b35      	ldr	r3, [pc, #212]	; (8002e00 <readCommand+0x5a8>)
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	4b35      	ldr	r3, [pc, #212]	; (8002e04 <readCommand+0x5ac>)
 8002d30:	2200      	movs	r2, #0
 8002d32:	601a      	str	r2, [r3, #0]
 8002d34:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <readCommand+0x5a4>)
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	4b2f      	ldr	r3, [pc, #188]	; (8002df8 <readCommand+0x5a0>)
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	701a      	strb	r2, [r3, #0]
 8002d40:	4b2d      	ldr	r3, [pc, #180]	; (8002df8 <readCommand+0x5a0>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	705a      	strb	r2, [r3, #1]
 8002d46:	4b2c      	ldr	r3, [pc, #176]	; (8002df8 <readCommand+0x5a0>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	709a      	strb	r2, [r3, #2]
 8002d4c:	e031      	b.n	8002db2 <readCommand+0x55a>
					}
					else
					{
						returnFrameAppend("EXE");
 8002d4e:	481e      	ldr	r0, [pc, #120]	; (8002dc8 <readCommand+0x570>)
 8002d50:	f000 f85e 	bl	8002e10 <returnFrameAppend>
						somethingChanged = 1; //Ustawienie flagi zmiany na 1
 8002d54:	4b23      	ldr	r3, [pc, #140]	; (8002de4 <readCommand+0x58c>)
 8002d56:	2201      	movs	r2, #1
 8002d58:	701a      	strb	r2, [r3, #0]
 8002d5a:	e02a      	b.n	8002db2 <readCommand+0x55a>
					}
				}
				else
				{
					returnFrameAppend("WRC");
 8002d5c:	481d      	ldr	r0, [pc, #116]	; (8002dd4 <readCommand+0x57c>)
 8002d5e:	f000 f857 	bl	8002e10 <returnFrameAppend>
					x = 0, x2 = 0, y = 0, y2 = 0, inputColour[0] = 0, inputColour[1] = 0, inputColour[2] = 0;
 8002d62:	4b29      	ldr	r3, [pc, #164]	; (8002e08 <readCommand+0x5b0>)
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
 8002d68:	4b25      	ldr	r3, [pc, #148]	; (8002e00 <readCommand+0x5a8>)
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	4b25      	ldr	r3, [pc, #148]	; (8002e04 <readCommand+0x5ac>)
 8002d70:	2200      	movs	r2, #0
 8002d72:	601a      	str	r2, [r3, #0]
 8002d74:	4b21      	ldr	r3, [pc, #132]	; (8002dfc <readCommand+0x5a4>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	601a      	str	r2, [r3, #0]
 8002d7a:	4b1f      	ldr	r3, [pc, #124]	; (8002df8 <readCommand+0x5a0>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	701a      	strb	r2, [r3, #0]
 8002d80:	4b1d      	ldr	r3, [pc, #116]	; (8002df8 <readCommand+0x5a0>)
 8002d82:	2200      	movs	r2, #0
 8002d84:	705a      	strb	r2, [r3, #1]
 8002d86:	4b1c      	ldr	r3, [pc, #112]	; (8002df8 <readCommand+0x5a0>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	709a      	strb	r2, [r3, #2]
 8002d8c:	e011      	b.n	8002db2 <readCommand+0x55a>
				}
			}
			else if(nawias == ')') //Sprawdzenie czy błąd wystąpił w argumentach
 8002d8e:	78bb      	ldrb	r3, [r7, #2]
 8002d90:	2b29      	cmp	r3, #41	; 0x29
 8002d92:	d103      	bne.n	8002d9c <readCommand+0x544>
			{
				returnFrameAppend("WRC");
 8002d94:	480f      	ldr	r0, [pc, #60]	; (8002dd4 <readCommand+0x57c>)
 8002d96:	f000 f83b 	bl	8002e10 <returnFrameAppend>
 8002d9a:	e00a      	b.n	8002db2 <readCommand+0x55a>
			}
			else
			{
				returnFrameAppend("WRA");
 8002d9c:	4809      	ldr	r0, [pc, #36]	; (8002dc4 <readCommand+0x56c>)
 8002d9e:	f000 f837 	bl	8002e10 <returnFrameAppend>
 8002da2:	e006      	b.n	8002db2 <readCommand+0x55a>
			}
		}
		else if(!errorAS) //Sprawdzenie czy error został już wysłany
 8002da4:	4b0c      	ldr	r3, [pc, #48]	; (8002dd8 <readCommand+0x580>)
 8002da6:	781b      	ldrb	r3, [r3, #0]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d102      	bne.n	8002db2 <readCommand+0x55a>
		{
			returnFrameAppend("WRC");
 8002dac:	4809      	ldr	r0, [pc, #36]	; (8002dd4 <readCommand+0x57c>)
 8002dae:	f000 f82f 	bl	8002e10 <returnFrameAppend>
 8002db2:	46ad      	mov	sp, r5
		}
	}
}
 8002db4:	bf00      	nop
 8002db6:	3718      	adds	r7, #24
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bdb0      	pop	{r4, r5, r7, pc}
 8002dbc:	08007f4c 	.word	0x08007f4c
 8002dc0:	08007f44 	.word	0x08007f44
 8002dc4:	08007f38 	.word	0x08007f38
 8002dc8:	08007ef4 	.word	0x08007ef4
 8002dcc:	42c80000 	.word	0x42c80000
 8002dd0:	2000001c 	.word	0x2000001c
 8002dd4:	08007f34 	.word	0x08007f34
 8002dd8:	200002f0 	.word	0x200002f0
 8002ddc:	08007f54 	.word	0x08007f54
 8002de0:	200002db 	.word	0x200002db
 8002de4:	20000084 	.word	0x20000084
 8002de8:	08007f58 	.word	0x08007f58
 8002dec:	08007f5c 	.word	0x08007f5c
 8002df0:	200002a2 	.word	0x200002a2
 8002df4:	200002a1 	.word	0x200002a1
 8002df8:	200002a0 	.word	0x200002a0
 8002dfc:	20000014 	.word	0x20000014
 8002e00:	2000000c 	.word	0x2000000c
 8002e04:	20000010 	.word	0x20000010
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	08007f64 	.word	0x08007f64

08002e10 <returnFrameAppend>:

void returnFrameAppend(char str[]) //Funkcja uzupełnia tablice zwrotną o podane znaki
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
	returnFrame[6]=str[0];
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	781a      	ldrb	r2, [r3, #0]
 8002e1c:	4b07      	ldr	r3, [pc, #28]	; (8002e3c <returnFrameAppend+0x2c>)
 8002e1e:	719a      	strb	r2, [r3, #6]
	returnFrame[7]=str[1];
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	785a      	ldrb	r2, [r3, #1]
 8002e24:	4b05      	ldr	r3, [pc, #20]	; (8002e3c <returnFrameAppend+0x2c>)
 8002e26:	71da      	strb	r2, [r3, #7]
	returnFrame[8]=str[2];
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	789a      	ldrb	r2, [r3, #2]
 8002e2c:	4b03      	ldr	r3, [pc, #12]	; (8002e3c <returnFrameAppend+0x2c>)
 8002e2e:	721a      	strb	r2, [r3, #8]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr
 8002e3c:	20000848 	.word	0x20000848

08002e40 <compareCommand>:

int compareCommand(char commandStr[],int hasArgs, char str[]) //Funkcja sprawdzająca komende
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b088      	sub	sp, #32
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	607a      	str	r2, [r7, #4]
	int strLen = strlen(str); //Długość szukanej komendy
 8002e4c:	6878      	ldr	r0, [r7, #4]
 8002e4e:	f7fd f9df 	bl	8000210 <strlen>
 8002e52:	4603      	mov	r3, r0
 8002e54:	617b      	str	r3, [r7, #20]
	if(!strncmp(commandStr, str, strLen)) //Sprawdzenie czy polecenie to str
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	6879      	ldr	r1, [r7, #4]
 8002e5c:	68f8      	ldr	r0, [r7, #12]
 8002e5e:	f003 ff2b 	bl	8006cb8 <strncmp>
 8002e62:	4603      	mov	r3, r0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d148      	bne.n	8002efa <compareCommand+0xba>
	{
		if(commandSlot != strLen && !hasArgs) //Sprawdzenie czy polecenie nie ma błędnej składni
 8002e68:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <compareCommand+0xc4>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00a      	beq.n	8002e8a <compareCommand+0x4a>
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d107      	bne.n	8002e8a <compareCommand+0x4a>
		{
			returnFrameAppend("WRC"); //Powiadomienie o błędzie
 8002e7a:	4823      	ldr	r0, [pc, #140]	; (8002f08 <compareCommand+0xc8>)
 8002e7c:	f7ff ffc8 	bl	8002e10 <returnFrameAppend>
			errorAS = 1; //Ustawienie flagi wysłanego errora na 1
 8002e80:	4b22      	ldr	r3, [pc, #136]	; (8002f0c <compareCommand+0xcc>)
 8002e82:	2201      	movs	r2, #1
 8002e84:	701a      	strb	r2, [r3, #0]
			return 0;
 8002e86:	2300      	movs	r3, #0
 8002e88:	e038      	b.n	8002efc <compareCommand+0xbc>
		}

		for(int e=0; e<=commandSlot - strLen; e++) //Usunięcie odczytanego polecenia z tablicy w celu otrzymania samych argumentów
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	61fb      	str	r3, [r7, #28]
 8002e8e:	e00d      	b.n	8002eac <compareCommand+0x6c>
		{
			commandStr[e] = commandStr[e+strLen];
 8002e90:	69fa      	ldr	r2, [r7, #28]
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4413      	add	r3, r2
 8002e96:	461a      	mov	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	441a      	add	r2, r3
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	68f9      	ldr	r1, [r7, #12]
 8002ea0:	440b      	add	r3, r1
 8002ea2:	7812      	ldrb	r2, [r2, #0]
 8002ea4:	701a      	strb	r2, [r3, #0]
		for(int e=0; e<=commandSlot - strLen; e++) //Usunięcie odczytanego polecenia z tablicy w celu otrzymania samych argumentów
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	61fb      	str	r3, [r7, #28]
 8002eac:	4b15      	ldr	r3, [pc, #84]	; (8002f04 <compareCommand+0xc4>)
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	69fa      	ldr	r2, [r7, #28]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	dde9      	ble.n	8002e90 <compareCommand+0x50>
		}
		for(int e=commandSlot-strLen; e<commandSlot; e++) //reset reszty stringa
 8002ebc:	4b11      	ldr	r3, [pc, #68]	; (8002f04 <compareCommand+0xc4>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	461a      	mov	r2, r3
 8002ec2:	697b      	ldr	r3, [r7, #20]
 8002ec4:	1ad3      	subs	r3, r2, r3
 8002ec6:	61bb      	str	r3, [r7, #24]
 8002ec8:	e007      	b.n	8002eda <compareCommand+0x9a>
		{
			commandStr[e] = '\0';
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	68fa      	ldr	r2, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	701a      	strb	r2, [r3, #0]
		for(int e=commandSlot-strLen; e<commandSlot; e++) //reset reszty stringa
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	3301      	adds	r3, #1
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	4b0a      	ldr	r3, [pc, #40]	; (8002f04 <compareCommand+0xc4>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	461a      	mov	r2, r3
 8002ee0:	69bb      	ldr	r3, [r7, #24]
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	dbf1      	blt.n	8002eca <compareCommand+0x8a>
		}
		commandSlot -= strLen; //skrócenie zmiennej długości polecenia
 8002ee6:	4b07      	ldr	r3, [pc, #28]	; (8002f04 <compareCommand+0xc4>)
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	1ad3      	subs	r3, r2, r3
 8002ef0:	b2da      	uxtb	r2, r3
 8002ef2:	4b04      	ldr	r3, [pc, #16]	; (8002f04 <compareCommand+0xc4>)
 8002ef4:	701a      	strb	r2, [r3, #0]
		return 1;
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	e000      	b.n	8002efc <compareCommand+0xbc>
	}
	return 0;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	3720      	adds	r7, #32
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bd80      	pop	{r7, pc}
 8002f04:	20000294 	.word	0x20000294
 8002f08:	08007f34 	.word	0x08007f34
 8002f0c:	200002f0 	.word	0x200002f0

08002f10 <HAL_UART_RxCpltCallback>:
}

//-------------------------UART-RX-CALLBACK-------------------------

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //Callback wywoływany po odebraniu znaku
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART2) //Sprawdzenie czy dane pochodzą z uart2
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4a10      	ldr	r2, [pc, #64]	; (8002f60 <HAL_UART_RxCpltCallback+0x50>)
 8002f1e:	4293      	cmp	r3, r2
 8002f20:	d119      	bne.n	8002f56 <HAL_UART_RxCpltCallback+0x46>
	{
		RX_EMPTY++; //Przejscie na kolejne miejsce w buforze RX
 8002f22:	4b10      	ldr	r3, [pc, #64]	; (8002f64 <HAL_UART_RxCpltCallback+0x54>)
 8002f24:	881b      	ldrh	r3, [r3, #0]
 8002f26:	b29b      	uxth	r3, r3
 8002f28:	3301      	adds	r3, #1
 8002f2a:	b29a      	uxth	r2, r3
 8002f2c:	4b0d      	ldr	r3, [pc, #52]	; (8002f64 <HAL_UART_RxCpltCallback+0x54>)
 8002f2e:	801a      	strh	r2, [r3, #0]
		if (RX_EMPTY >= buf_RX_length) //Sprawdzenie czy miejsce wychodzi poza limit bufora
 8002f30:	4b0c      	ldr	r3, [pc, #48]	; (8002f64 <HAL_UART_RxCpltCallback+0x54>)
 8002f32:	881b      	ldrh	r3, [r3, #0]
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2bfe      	cmp	r3, #254	; 0xfe
 8002f38:	d902      	bls.n	8002f40 <HAL_UART_RxCpltCallback+0x30>
		{
			RX_EMPTY = 0; //Ewentualne cofnięcie na poczatek bufora
 8002f3a:	4b0a      	ldr	r3, [pc, #40]	; (8002f64 <HAL_UART_RxCpltCallback+0x54>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Receive_IT(&huart2, &buf_RX[RX_EMPTY], 1); //Wznowienie funkcji Receive_IT
 8002f40:	4b08      	ldr	r3, [pc, #32]	; (8002f64 <HAL_UART_RxCpltCallback+0x54>)
 8002f42:	881b      	ldrh	r3, [r3, #0]
 8002f44:	b29b      	uxth	r3, r3
 8002f46:	461a      	mov	r2, r3
 8002f48:	4b07      	ldr	r3, [pc, #28]	; (8002f68 <HAL_UART_RxCpltCallback+0x58>)
 8002f4a:	4413      	add	r3, r2
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	4619      	mov	r1, r3
 8002f50:	4806      	ldr	r0, [pc, #24]	; (8002f6c <HAL_UART_RxCpltCallback+0x5c>)
 8002f52:	f003 f855 	bl	8006000 <HAL_UART_Receive_IT>
	}
}
 8002f56:	bf00      	nop
 8002f58:	3708      	adds	r7, #8
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	bd80      	pop	{r7, pc}
 8002f5e:	bf00      	nop
 8002f60:	40004400 	.word	0x40004400
 8002f64:	2000028c 	.word	0x2000028c
 8002f68:	20000358 	.word	0x20000358
 8002f6c:	200009f4 	.word	0x200009f4

08002f70 <HAL_UART_TxCpltCallback>:

//-------------------------UART-TX-CALLBACK-------------------------

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart) //Callback wywoływany po zakończeniu wysłania jednego znaku
{
 8002f70:	b580      	push	{r7, lr}
 8002f72:	b084      	sub	sp, #16
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
	if (TX_BUSY != TX_EMPTY) //sprawdzenie czy są dostępne wolne dane do nadania
 8002f78:	4b14      	ldr	r3, [pc, #80]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002f7a:	881b      	ldrh	r3, [r3, #0]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	4b14      	ldr	r3, [pc, #80]	; (8002fd0 <HAL_UART_TxCpltCallback+0x60>)
 8002f80:	881b      	ldrh	r3, [r3, #0]
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	429a      	cmp	r2, r3
 8002f86:	d01d      	beq.n	8002fc4 <HAL_UART_TxCpltCallback+0x54>
	{
		uint8_t tmp = buf_TX[TX_BUSY]; //przypisanie zmiennej tmp obecnej wartości z bufora
 8002f88:	4b10      	ldr	r3, [pc, #64]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002f8a:	881b      	ldrh	r3, [r3, #0]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	461a      	mov	r2, r3
 8002f90:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_UART_TxCpltCallback+0x64>)
 8002f92:	5c9b      	ldrb	r3, [r3, r2]
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	73fb      	strb	r3, [r7, #15]
		TX_BUSY++; // przejście na kolejny element bufora
 8002f98:	4b0c      	ldr	r3, [pc, #48]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002f9a:	881b      	ldrh	r3, [r3, #0]
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	3301      	adds	r3, #1
 8002fa0:	b29a      	uxth	r2, r3
 8002fa2:	4b0a      	ldr	r3, [pc, #40]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002fa4:	801a      	strh	r2, [r3, #0]

		if (TX_BUSY >= buf_TX_length) //Sprawdzenie czy miejsce wychodzi poza limit bufora
 8002fa6:	4b09      	ldr	r3, [pc, #36]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002fa8:	881b      	ldrh	r3, [r3, #0]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	2bfe      	cmp	r3, #254	; 0xfe
 8002fae:	d902      	bls.n	8002fb6 <HAL_UART_TxCpltCallback+0x46>
		{
			TX_BUSY = 0; //Ewentualne cofnięcie na początek bufora
 8002fb0:	4b06      	ldr	r3, [pc, #24]	; (8002fcc <HAL_UART_TxCpltCallback+0x5c>)
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	801a      	strh	r2, [r3, #0]
		}
		HAL_UART_Transmit_IT(&huart2, &tmp, 1); //Wznowienie funkcji Transmit_IT
 8002fb6:	f107 030f 	add.w	r3, r7, #15
 8002fba:	2201      	movs	r2, #1
 8002fbc:	4619      	mov	r1, r3
 8002fbe:	4806      	ldr	r0, [pc, #24]	; (8002fd8 <HAL_UART_TxCpltCallback+0x68>)
 8002fc0:	f002 ffd9 	bl	8005f76 <HAL_UART_Transmit_IT>
	}
}
 8002fc4:	bf00      	nop
 8002fc6:	3710      	adds	r7, #16
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bd80      	pop	{r7, pc}
 8002fcc:	20000292 	.word	0x20000292
 8002fd0:	20000290 	.word	0x20000290
 8002fd4:	20000854 	.word	0x20000854
 8002fd8:	200009f4 	.word	0x200009f4

08002fdc <Send>:

//------------------SEND------------------

void Send(char* msg_to_send, ...) //Funkcja pobiera adresy do zmiennych typu char i uzupełnia bufor
{
 8002fdc:	b40f      	push	{r0, r1, r2, r3}
 8002fde:	b580      	push	{r7, lr}
 8002fe0:	b09c      	sub	sp, #112	; 0x70
 8002fe2:	af00      	add	r7, sp, #0
	char data_to_send[100]; //Deklaracja tablicy pomocniczej oraz wskaźnika pomocniczego
	int indeks; //Deklaracja zmiennej wskazującej na TX_EMPTY

	//Skopoiowanie wszystkich argumentów do data_to_send
	va_list arguments;
	va_start(arguments, msg_to_send);
 8002fe4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002fe8:	603b      	str	r3, [r7, #0]
	vsprintf(data_to_send, msg_to_send, arguments);
 8002fea:	1d3b      	adds	r3, r7, #4
 8002fec:	683a      	ldr	r2, [r7, #0]
 8002fee:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002ff0:	4618      	mov	r0, r3
 8002ff2:	f003 fe89 	bl	8006d08 <vsiprintf>
	va_end(arguments); //Wyczyszczenie pamięci po va_list

	indeks = TX_EMPTY; //Przepisanei wartości TX_EMPTY
 8002ff6:	4b2f      	ldr	r3, [pc, #188]	; (80030b4 <Send+0xd8>)
 8002ff8:	881b      	ldrh	r3, [r3, #0]
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	66fb      	str	r3, [r7, #108]	; 0x6c

	for (int i = 0; i < strlen(data_to_send); i++) //Przepisanie danych do bufora
 8002ffe:	2300      	movs	r3, #0
 8003000:	66bb      	str	r3, [r7, #104]	; 0x68
 8003002:	e013      	b.n	800302c <Send+0x50>
	{
		buf_TX[indeks] = data_to_send[i]; //Przepisanie znaku i do bufora na miejscu indeks
 8003004:	1d3a      	adds	r2, r7, #4
 8003006:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003008:	4413      	add	r3, r2
 800300a:	7819      	ldrb	r1, [r3, #0]
 800300c:	4a2a      	ldr	r2, [pc, #168]	; (80030b8 <Send+0xdc>)
 800300e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003010:	4413      	add	r3, r2
 8003012:	460a      	mov	r2, r1
 8003014:	701a      	strb	r2, [r3, #0]
		indeks++; //Zwiększenie indeks o 1
 8003016:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003018:	3301      	adds	r3, #1
 800301a:	66fb      	str	r3, [r7, #108]	; 0x6c
		if (indeks >= buf_TX_length) //Sprawdzenie zakresu
 800301c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800301e:	2bfe      	cmp	r3, #254	; 0xfe
 8003020:	dd01      	ble.n	8003026 <Send+0x4a>
		{
			indeks = 0;
 8003022:	2300      	movs	r3, #0
 8003024:	66fb      	str	r3, [r7, #108]	; 0x6c
	for (int i = 0; i < strlen(data_to_send); i++) //Przepisanie danych do bufora
 8003026:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003028:	3301      	adds	r3, #1
 800302a:	66bb      	str	r3, [r7, #104]	; 0x68
 800302c:	1d3b      	adds	r3, r7, #4
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd f8ee 	bl	8000210 <strlen>
 8003034:	4602      	mov	r2, r0
 8003036:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003038:	429a      	cmp	r2, r3
 800303a:	d8e3      	bhi.n	8003004 <Send+0x28>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800303c:	b672      	cpsid	i
		}
	}
	__disable_irq(); //Wyłączenie przerwań

	//Sprawdzenie czy wszystkie poprzednie znaki zostały wysłane i czy flaga TXE uart2 jest równa SET
	if ((TX_BUSY == TX_EMPTY) && (__HAL_UART_GET_FLAG(&huart2, UART_FLAG_TXE) == SET))
 800303e:	4b1f      	ldr	r3, [pc, #124]	; (80030bc <Send+0xe0>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29a      	uxth	r2, r3
 8003044:	4b1b      	ldr	r3, [pc, #108]	; (80030b4 <Send+0xd8>)
 8003046:	881b      	ldrh	r3, [r3, #0]
 8003048:	b29b      	uxth	r3, r3
 800304a:	429a      	cmp	r2, r3
 800304c:	d125      	bne.n	800309a <Send+0xbe>
 800304e:	4b1c      	ldr	r3, [pc, #112]	; (80030c0 <Send+0xe4>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003058:	2b80      	cmp	r3, #128	; 0x80
 800305a:	d11e      	bne.n	800309a <Send+0xbe>
	{
		TX_EMPTY = indeks; //Przepisanie wartości indeks do EMPTY
 800305c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800305e:	b29a      	uxth	r2, r3
 8003060:	4b14      	ldr	r3, [pc, #80]	; (80030b4 <Send+0xd8>)
 8003062:	801a      	strh	r2, [r3, #0]
		HAL_UART_Transmit_IT(&huart2, &buf_TX[TX_BUSY], 1); //Wznowienie funkcji Transmit_IT
 8003064:	4b15      	ldr	r3, [pc, #84]	; (80030bc <Send+0xe0>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	b29b      	uxth	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <Send+0xdc>)
 800306e:	4413      	add	r3, r2
 8003070:	2201      	movs	r2, #1
 8003072:	4619      	mov	r1, r3
 8003074:	4812      	ldr	r0, [pc, #72]	; (80030c0 <Send+0xe4>)
 8003076:	f002 ff7e 	bl	8005f76 <HAL_UART_Transmit_IT>

		TX_BUSY++; //Zwiększenie BUSY o 1
 800307a:	4b10      	ldr	r3, [pc, #64]	; (80030bc <Send+0xe0>)
 800307c:	881b      	ldrh	r3, [r3, #0]
 800307e:	b29b      	uxth	r3, r3
 8003080:	3301      	adds	r3, #1
 8003082:	b29a      	uxth	r2, r3
 8003084:	4b0d      	ldr	r3, [pc, #52]	; (80030bc <Send+0xe0>)
 8003086:	801a      	strh	r2, [r3, #0]
		if (TX_BUSY >= buf_TX_length) //Sprawdzenie zakresu
 8003088:	4b0c      	ldr	r3, [pc, #48]	; (80030bc <Send+0xe0>)
 800308a:	881b      	ldrh	r3, [r3, #0]
 800308c:	b29b      	uxth	r3, r3
 800308e:	2bfe      	cmp	r3, #254	; 0xfe
 8003090:	d907      	bls.n	80030a2 <Send+0xc6>
		{
			TX_BUSY = 0;
 8003092:	4b0a      	ldr	r3, [pc, #40]	; (80030bc <Send+0xe0>)
 8003094:	2200      	movs	r2, #0
 8003096:	801a      	strh	r2, [r3, #0]
		if (TX_BUSY >= buf_TX_length) //Sprawdzenie zakresu
 8003098:	e003      	b.n	80030a2 <Send+0xc6>
		}
	}
	else
	{
		TX_EMPTY = indeks; //Przepisanie wartości indeks do EMPTY
 800309a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800309c:	b29a      	uxth	r2, r3
 800309e:	4b05      	ldr	r3, [pc, #20]	; (80030b4 <Send+0xd8>)
 80030a0:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80030a2:	b662      	cpsie	i
	}
	__enable_irq(); //Włączenie przerwań
}
 80030a4:	bf00      	nop
 80030a6:	3770      	adds	r7, #112	; 0x70
 80030a8:	46bd      	mov	sp, r7
 80030aa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80030ae:	b004      	add	sp, #16
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20000290 	.word	0x20000290
 80030b8:	20000854 	.word	0x20000854
 80030bc:	20000292 	.word	0x20000292
 80030c0:	200009f4 	.word	0x200009f4

080030c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80030c4:	b480      	push	{r7}
 80030c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80030c8:	bf00      	nop
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	607b      	str	r3, [r7, #4]
 80030de:	4b10      	ldr	r3, [pc, #64]	; (8003120 <HAL_MspInit+0x4c>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a0f      	ldr	r2, [pc, #60]	; (8003120 <HAL_MspInit+0x4c>)
 80030e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b0d      	ldr	r3, [pc, #52]	; (8003120 <HAL_MspInit+0x4c>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030f2:	607b      	str	r3, [r7, #4]
 80030f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	603b      	str	r3, [r7, #0]
 80030fa:	4b09      	ldr	r3, [pc, #36]	; (8003120 <HAL_MspInit+0x4c>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	4a08      	ldr	r2, [pc, #32]	; (8003120 <HAL_MspInit+0x4c>)
 8003100:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003104:	6413      	str	r3, [r2, #64]	; 0x40
 8003106:	4b06      	ldr	r3, [pc, #24]	; (8003120 <HAL_MspInit+0x4c>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800310e:	603b      	str	r3, [r7, #0]
 8003110:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003112:	2007      	movs	r0, #7
 8003114:	f000 fb86 	bl	8003824 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003118:	bf00      	nop
 800311a:	3708      	adds	r7, #8
 800311c:	46bd      	mov	sp, r7
 800311e:	bd80      	pop	{r7, pc}
 8003120:	40023800 	.word	0x40023800

08003124 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003124:	b480      	push	{r7}
 8003126:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003128:	bf00      	nop
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr

08003132 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003132:	b480      	push	{r7}
 8003134:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003136:	e7fe      	b.n	8003136 <HardFault_Handler+0x4>

08003138 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003138:	b480      	push	{r7}
 800313a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800313c:	e7fe      	b.n	800313c <MemManage_Handler+0x4>

0800313e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003142:	e7fe      	b.n	8003142 <BusFault_Handler+0x4>

08003144 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003148:	e7fe      	b.n	8003148 <UsageFault_Handler+0x4>

0800314a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800314a:	b480      	push	{r7}
 800314c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800314e:	bf00      	nop
 8003150:	46bd      	mov	sp, r7
 8003152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003156:	4770      	bx	lr

08003158 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800316a:	bf00      	nop
 800316c:	46bd      	mov	sp, r7
 800316e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003172:	4770      	bx	lr

08003174 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  Sys_1ms_Tick();
 8003178:	f7fe f85a 	bl	8001230 <Sys_1ms_Tick>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800317c:	f000 fa62 	bl	8003644 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003180:	bf00      	nop
 8003182:	bd80      	pop	{r7, pc}

08003184 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line 2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8003188:	2004      	movs	r0, #4
 800318a:	f001 fbe5 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800318e:	bf00      	nop
 8003190:	bd80      	pop	{r7, pc}
	...

08003194 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8003198:	4802      	ldr	r0, [pc, #8]	; (80031a4 <DMA1_Stream5_IRQHandler+0x10>)
 800319a:	f000 fcc9 	bl	8003b30 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	bd80      	pop	{r7, pc}
 80031a2:	bf00      	nop
 80031a4:	20000954 	.word	0x20000954

080031a8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_5);
 80031ac:	2020      	movs	r0, #32
 80031ae:	f001 fbd3 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_6);
 80031b2:	2040      	movs	r0, #64	; 0x40
 80031b4:	f001 fbd0 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_8);
 80031b8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80031bc:	f001 fbcc 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80031c0:	bf00      	nop
 80031c2:	bd80      	pop	{r7, pc}

080031c4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80031c8:	4802      	ldr	r0, [pc, #8]	; (80031d4 <USART2_IRQHandler+0x10>)
 80031ca:	f002 ff6f 	bl	80060ac <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80031ce:	bf00      	nop
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	bf00      	nop
 80031d4:	200009f4 	.word	0x200009f4

080031d8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80031dc:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80031e0:	f001 fbba 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 80031e4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 80031e8:	f001 fbb6 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031ec:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031f0:	f001 fbb2 	bl	8004958 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031f4:	bf00      	nop
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b086      	sub	sp, #24
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003200:	4a14      	ldr	r2, [pc, #80]	; (8003254 <_sbrk+0x5c>)
 8003202:	4b15      	ldr	r3, [pc, #84]	; (8003258 <_sbrk+0x60>)
 8003204:	1ad3      	subs	r3, r2, r3
 8003206:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800320c:	4b13      	ldr	r3, [pc, #76]	; (800325c <_sbrk+0x64>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d102      	bne.n	800321a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003214:	4b11      	ldr	r3, [pc, #68]	; (800325c <_sbrk+0x64>)
 8003216:	4a12      	ldr	r2, [pc, #72]	; (8003260 <_sbrk+0x68>)
 8003218:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800321a:	4b10      	ldr	r3, [pc, #64]	; (800325c <_sbrk+0x64>)
 800321c:	681a      	ldr	r2, [r3, #0]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	4413      	add	r3, r2
 8003222:	693a      	ldr	r2, [r7, #16]
 8003224:	429a      	cmp	r2, r3
 8003226:	d207      	bcs.n	8003238 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003228:	f003 fce8 	bl	8006bfc <__errno>
 800322c:	4602      	mov	r2, r0
 800322e:	230c      	movs	r3, #12
 8003230:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8003232:	f04f 33ff 	mov.w	r3, #4294967295
 8003236:	e009      	b.n	800324c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003238:	4b08      	ldr	r3, [pc, #32]	; (800325c <_sbrk+0x64>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800323e:	4b07      	ldr	r3, [pc, #28]	; (800325c <_sbrk+0x64>)
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4413      	add	r3, r2
 8003246:	4a05      	ldr	r2, [pc, #20]	; (800325c <_sbrk+0x64>)
 8003248:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800324a:	68fb      	ldr	r3, [r7, #12]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}
 8003254:	20020000 	.word	0x20020000
 8003258:	00000400 	.word	0x00000400
 800325c:	200002dc 	.word	0x200002dc
 8003260:	20000a60 	.word	0x20000a60

08003264 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003268:	4b08      	ldr	r3, [pc, #32]	; (800328c <SystemInit+0x28>)
 800326a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800326e:	4a07      	ldr	r2, [pc, #28]	; (800328c <SystemInit+0x28>)
 8003270:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003274:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003278:	4b04      	ldr	r3, [pc, #16]	; (800328c <SystemInit+0x28>)
 800327a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800327e:	609a      	str	r2, [r3, #8]
#endif
}
 8003280:	bf00      	nop
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	e000ed00 	.word	0xe000ed00

08003290 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	; 0x28
 8003294:	af00      	add	r7, sp, #0
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003296:	f107 0320 	add.w	r3, r7, #32
 800329a:	2200      	movs	r2, #0
 800329c:	601a      	str	r2, [r3, #0]
 800329e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80032a0:	1d3b      	adds	r3, r7, #4
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]
 80032a6:	605a      	str	r2, [r3, #4]
 80032a8:	609a      	str	r2, [r3, #8]
 80032aa:	60da      	str	r2, [r3, #12]
 80032ac:	611a      	str	r2, [r3, #16]
 80032ae:	615a      	str	r2, [r3, #20]
 80032b0:	619a      	str	r2, [r3, #24]

  htim2.Instance = TIM2;
 80032b2:	4b22      	ldr	r3, [pc, #136]	; (800333c <MX_TIM2_Init+0xac>)
 80032b4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80032b8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80032ba:	4b20      	ldr	r3, [pc, #128]	; (800333c <MX_TIM2_Init+0xac>)
 80032bc:	2200      	movs	r2, #0
 80032be:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80032c0:	4b1e      	ldr	r3, [pc, #120]	; (800333c <MX_TIM2_Init+0xac>)
 80032c2:	2200      	movs	r2, #0
 80032c4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 104;
 80032c6:	4b1d      	ldr	r3, [pc, #116]	; (800333c <MX_TIM2_Init+0xac>)
 80032c8:	2268      	movs	r2, #104	; 0x68
 80032ca:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80032cc:	4b1b      	ldr	r3, [pc, #108]	; (800333c <MX_TIM2_Init+0xac>)
 80032ce:	2200      	movs	r2, #0
 80032d0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80032d2:	4b1a      	ldr	r3, [pc, #104]	; (800333c <MX_TIM2_Init+0xac>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80032d8:	4818      	ldr	r0, [pc, #96]	; (800333c <MX_TIM2_Init+0xac>)
 80032da:	f002 f869 	bl	80053b0 <HAL_TIM_PWM_Init>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_TIM2_Init+0x58>
  {
    Error_Handler();
 80032e4:	f7ff feee 	bl	80030c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80032e8:	2300      	movs	r3, #0
 80032ea:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80032ec:	2300      	movs	r3, #0
 80032ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80032f0:	f107 0320 	add.w	r3, r7, #32
 80032f4:	4619      	mov	r1, r3
 80032f6:	4811      	ldr	r0, [pc, #68]	; (800333c <MX_TIM2_Init+0xac>)
 80032f8:	f002 fd74 	bl	8005de4 <HAL_TIMEx_MasterConfigSynchronization>
 80032fc:	4603      	mov	r3, r0
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d001      	beq.n	8003306 <MX_TIM2_Init+0x76>
  {
    Error_Handler();
 8003302:	f7ff fedf 	bl	80030c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003306:	2360      	movs	r3, #96	; 0x60
 8003308:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800330a:	2300      	movs	r3, #0
 800330c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800330e:	2300      	movs	r3, #0
 8003310:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003312:	2300      	movs	r3, #0
 8003314:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8003316:	1d3b      	adds	r3, r7, #4
 8003318:	2200      	movs	r2, #0
 800331a:	4619      	mov	r1, r3
 800331c:	4807      	ldr	r0, [pc, #28]	; (800333c <MX_TIM2_Init+0xac>)
 800331e:	f002 f985 	bl	800562c <HAL_TIM_PWM_ConfigChannel>
 8003322:	4603      	mov	r3, r0
 8003324:	2b00      	cmp	r3, #0
 8003326:	d001      	beq.n	800332c <MX_TIM2_Init+0x9c>
  {
    Error_Handler();
 8003328:	f7ff fecc 	bl	80030c4 <Error_Handler>
  }
  HAL_TIM_MspPostInit(&htim2);
 800332c:	4803      	ldr	r0, [pc, #12]	; (800333c <MX_TIM2_Init+0xac>)
 800332e:	f000 f85b 	bl	80033e8 <HAL_TIM_MspPostInit>

}
 8003332:	bf00      	nop
 8003334:	3728      	adds	r7, #40	; 0x28
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	200009b4 	.word	0x200009b4

08003340 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b084      	sub	sp, #16
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003350:	d13f      	bne.n	80033d2 <HAL_TIM_PWM_MspInit+0x92>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b21      	ldr	r3, [pc, #132]	; (80033dc <HAL_TIM_PWM_MspInit+0x9c>)
 8003358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800335a:	4a20      	ldr	r2, [pc, #128]	; (80033dc <HAL_TIM_PWM_MspInit+0x9c>)
 800335c:	f043 0301 	orr.w	r3, r3, #1
 8003360:	6413      	str	r3, [r2, #64]	; 0x40
 8003362:	4b1e      	ldr	r3, [pc, #120]	; (80033dc <HAL_TIM_PWM_MspInit+0x9c>)
 8003364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003366:	f003 0301 	and.w	r3, r3, #1
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 800336e:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8003370:	4a1c      	ldr	r2, [pc, #112]	; (80033e4 <HAL_TIM_PWM_MspInit+0xa4>)
 8003372:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8003374:	4b1a      	ldr	r3, [pc, #104]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8003376:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 800337a:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800337c:	4b18      	ldr	r3, [pc, #96]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800337e:	2240      	movs	r2, #64	; 0x40
 8003380:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003382:	4b17      	ldr	r3, [pc, #92]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8003384:	2200      	movs	r2, #0
 8003386:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003388:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800338a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800338e:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003390:	4b13      	ldr	r3, [pc, #76]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 8003392:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003396:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8003398:	4b11      	ldr	r3, [pc, #68]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 800339a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800339e:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_CIRCULAR;
 80033a0:	4b0f      	ldr	r3, [pc, #60]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80033a6:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 80033a8:	4b0d      	ldr	r3, [pc, #52]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033aa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80033ae:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80033b0:	4b0b      	ldr	r3, [pc, #44]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80033b6:	480a      	ldr	r0, [pc, #40]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033b8:	f000 fa92 	bl	80038e0 <HAL_DMA_Init>
 80033bc:	4603      	mov	r3, r0
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d001      	beq.n	80033c6 <HAL_TIM_PWM_MspInit+0x86>
    {
      Error_Handler();
 80033c2:	f7ff fe7f 	bl	80030c4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	4a05      	ldr	r2, [pc, #20]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033ca:	625a      	str	r2, [r3, #36]	; 0x24
 80033cc:	4a04      	ldr	r2, [pc, #16]	; (80033e0 <HAL_TIM_PWM_MspInit+0xa0>)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80033d2:	bf00      	nop
 80033d4:	3710      	adds	r7, #16
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
 80033da:	bf00      	nop
 80033dc:	40023800 	.word	0x40023800
 80033e0:	20000954 	.word	0x20000954
 80033e4:	40026088 	.word	0x40026088

080033e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033f0:	f107 030c 	add.w	r3, r7, #12
 80033f4:	2200      	movs	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	605a      	str	r2, [r3, #4]
 80033fa:	609a      	str	r2, [r3, #8]
 80033fc:	60da      	str	r2, [r3, #12]
 80033fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003408:	d11d      	bne.n	8003446 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800340a:	2300      	movs	r3, #0
 800340c:	60bb      	str	r3, [r7, #8]
 800340e:	4b10      	ldr	r3, [pc, #64]	; (8003450 <HAL_TIM_MspPostInit+0x68>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <HAL_TIM_MspPostInit+0x68>)
 8003414:	f043 0301 	orr.w	r3, r3, #1
 8003418:	6313      	str	r3, [r2, #48]	; 0x30
 800341a:	4b0d      	ldr	r3, [pc, #52]	; (8003450 <HAL_TIM_MspPostInit+0x68>)
 800341c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	60bb      	str	r3, [r7, #8]
 8003424:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003426:	2301      	movs	r3, #1
 8003428:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800342a:	2302      	movs	r3, #2
 800342c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800342e:	2300      	movs	r3, #0
 8003430:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003432:	2300      	movs	r3, #0
 8003434:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003436:	2301      	movs	r3, #1
 8003438:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800343a:	f107 030c 	add.w	r3, r7, #12
 800343e:	4619      	mov	r1, r3
 8003440:	4804      	ldr	r0, [pc, #16]	; (8003454 <HAL_TIM_MspPostInit+0x6c>)
 8003442:	f001 f8c3 	bl	80045cc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003446:	bf00      	nop
 8003448:	3720      	adds	r7, #32
 800344a:	46bd      	mov	sp, r7
 800344c:	bd80      	pop	{r7, pc}
 800344e:	bf00      	nop
 8003450:	40023800 	.word	0x40023800
 8003454:	40020000 	.word	0x40020000

08003458 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003458:	b580      	push	{r7, lr}
 800345a:	af00      	add	r7, sp, #0

  huart2.Instance = USART2;
 800345c:	4b11      	ldr	r3, [pc, #68]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 800345e:	4a12      	ldr	r2, [pc, #72]	; (80034a8 <MX_USART2_UART_Init+0x50>)
 8003460:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8003462:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003464:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003468:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800346a:	4b0e      	ldr	r3, [pc, #56]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 800346c:	2200      	movs	r2, #0
 800346e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003470:	4b0c      	ldr	r3, [pc, #48]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003472:	2200      	movs	r2, #0
 8003474:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003478:	2200      	movs	r2, #0
 800347a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800347c:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 800347e:	220c      	movs	r2, #12
 8003480:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003482:	4b08      	ldr	r3, [pc, #32]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003484:	2200      	movs	r2, #0
 8003486:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003488:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 800348a:	2200      	movs	r2, #0
 800348c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800348e:	4805      	ldr	r0, [pc, #20]	; (80034a4 <MX_USART2_UART_Init+0x4c>)
 8003490:	f002 fd24 	bl	8005edc <HAL_UART_Init>
 8003494:	4603      	mov	r3, r0
 8003496:	2b00      	cmp	r3, #0
 8003498:	d001      	beq.n	800349e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800349a:	f7ff fe13 	bl	80030c4 <Error_Handler>
  }

}
 800349e:	bf00      	nop
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200009f4 	.word	0x200009f4
 80034a8:	40004400 	.word	0x40004400

080034ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b08a      	sub	sp, #40	; 0x28
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80034b4:	f107 0314 	add.w	r3, r7, #20
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	4a1d      	ldr	r2, [pc, #116]	; (8003540 <HAL_UART_MspInit+0x94>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d133      	bne.n	8003536 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	4b1c      	ldr	r3, [pc, #112]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b19      	ldr	r3, [pc, #100]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034e6:	613b      	str	r3, [r7, #16]
 80034e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034ea:	2300      	movs	r3, #0
 80034ec:	60fb      	str	r3, [r7, #12]
 80034ee:	4b15      	ldr	r3, [pc, #84]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f2:	4a14      	ldr	r2, [pc, #80]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034f4:	f043 0301 	orr.w	r3, r3, #1
 80034f8:	6313      	str	r3, [r2, #48]	; 0x30
 80034fa:	4b12      	ldr	r3, [pc, #72]	; (8003544 <HAL_UART_MspInit+0x98>)
 80034fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034fe:	f003 0301 	and.w	r3, r3, #1
 8003502:	60fb      	str	r3, [r7, #12]
 8003504:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003506:	230c      	movs	r3, #12
 8003508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350a:	2302      	movs	r3, #2
 800350c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800350e:	2300      	movs	r3, #0
 8003510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003512:	2303      	movs	r3, #3
 8003514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003516:	2307      	movs	r3, #7
 8003518:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4809      	ldr	r0, [pc, #36]	; (8003548 <HAL_UART_MspInit+0x9c>)
 8003522:	f001 f853 	bl	80045cc <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	2026      	movs	r0, #38	; 0x26
 800352c:	f000 f985 	bl	800383a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003530:	2026      	movs	r0, #38	; 0x26
 8003532:	f000 f99e 	bl	8003872 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}
 800353e:	bf00      	nop
 8003540:	40004400 	.word	0x40004400
 8003544:	40023800 	.word	0x40023800
 8003548:	40020000 	.word	0x40020000

0800354c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800354c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003584 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003550:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003552:	e003      	b.n	800355c <LoopCopyDataInit>

08003554 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003554:	4b0c      	ldr	r3, [pc, #48]	; (8003588 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003556:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003558:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800355a:	3104      	adds	r1, #4

0800355c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800355c:	480b      	ldr	r0, [pc, #44]	; (800358c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800355e:	4b0c      	ldr	r3, [pc, #48]	; (8003590 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003560:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003562:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003564:	d3f6      	bcc.n	8003554 <CopyDataInit>
  ldr  r2, =_sbss
 8003566:	4a0b      	ldr	r2, [pc, #44]	; (8003594 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003568:	e002      	b.n	8003570 <LoopFillZerobss>

0800356a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800356a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800356c:	f842 3b04 	str.w	r3, [r2], #4

08003570 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003570:	4b09      	ldr	r3, [pc, #36]	; (8003598 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003572:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003574:	d3f9      	bcc.n	800356a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003576:	f7ff fe75 	bl	8003264 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800357a:	f003 fb45 	bl	8006c08 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800357e:	f7fd fe7d 	bl	800127c <main>
  bx  lr    
 8003582:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003584:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003588:	08008178 	.word	0x08008178
  ldr  r0, =_sdata
 800358c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003590:	20000270 	.word	0x20000270
  ldr  r2, =_sbss
 8003594:	20000270 	.word	0x20000270
  ldr  r3, = _ebss
 8003598:	20000a5c 	.word	0x20000a5c

0800359c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800359c:	e7fe      	b.n	800359c <ADC_IRQHandler>
	...

080035a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_Init+0x40>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a0d      	ldr	r2, [pc, #52]	; (80035e0 <HAL_Init+0x40>)
 80035aa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035ae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80035b0:	4b0b      	ldr	r3, [pc, #44]	; (80035e0 <HAL_Init+0x40>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a0a      	ldr	r2, [pc, #40]	; (80035e0 <HAL_Init+0x40>)
 80035b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80035bc:	4b08      	ldr	r3, [pc, #32]	; (80035e0 <HAL_Init+0x40>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a07      	ldr	r2, [pc, #28]	; (80035e0 <HAL_Init+0x40>)
 80035c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80035c8:	2003      	movs	r0, #3
 80035ca:	f000 f92b 	bl	8003824 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80035ce:	2000      	movs	r0, #0
 80035d0:	f000 f808 	bl	80035e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80035d4:	f7ff fd7e 	bl	80030d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40023c00 	.word	0x40023c00

080035e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b082      	sub	sp, #8
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80035ec:	4b12      	ldr	r3, [pc, #72]	; (8003638 <HAL_InitTick+0x54>)
 80035ee:	681a      	ldr	r2, [r3, #0]
 80035f0:	4b12      	ldr	r3, [pc, #72]	; (800363c <HAL_InitTick+0x58>)
 80035f2:	781b      	ldrb	r3, [r3, #0]
 80035f4:	4619      	mov	r1, r3
 80035f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80035fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f943 	bl	800388e <HAL_SYSTICK_Config>
 8003608:	4603      	mov	r3, r0
 800360a:	2b00      	cmp	r3, #0
 800360c:	d001      	beq.n	8003612 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800360e:	2301      	movs	r3, #1
 8003610:	e00e      	b.n	8003630 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2b0f      	cmp	r3, #15
 8003616:	d80a      	bhi.n	800362e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003618:	2200      	movs	r2, #0
 800361a:	6879      	ldr	r1, [r7, #4]
 800361c:	f04f 30ff 	mov.w	r0, #4294967295
 8003620:	f000 f90b 	bl	800383a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003624:	4a06      	ldr	r2, [pc, #24]	; (8003640 <HAL_InitTick+0x5c>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800362a:	2300      	movs	r3, #0
 800362c:	e000      	b.n	8003630 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
}
 8003630:	4618      	mov	r0, r3
 8003632:	3708      	adds	r7, #8
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}
 8003638:	20000094 	.word	0x20000094
 800363c:	2000009c 	.word	0x2000009c
 8003640:	20000098 	.word	0x20000098

08003644 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003644:	b480      	push	{r7}
 8003646:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003648:	4b06      	ldr	r3, [pc, #24]	; (8003664 <HAL_IncTick+0x20>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	461a      	mov	r2, r3
 800364e:	4b06      	ldr	r3, [pc, #24]	; (8003668 <HAL_IncTick+0x24>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4413      	add	r3, r2
 8003654:	4a04      	ldr	r2, [pc, #16]	; (8003668 <HAL_IncTick+0x24>)
 8003656:	6013      	str	r3, [r2, #0]
}
 8003658:	bf00      	nop
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	2000009c 	.word	0x2000009c
 8003668:	20000a34 	.word	0x20000a34

0800366c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return uwTick;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_GetTick+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000a34 	.word	0x20000a34

08003684 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f003 0307 	and.w	r3, r3, #7
 8003692:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003694:	4b0c      	ldr	r3, [pc, #48]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036a0:	4013      	ands	r3, r2
 80036a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036a8:	68bb      	ldr	r3, [r7, #8]
 80036aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036b6:	4a04      	ldr	r2, [pc, #16]	; (80036c8 <__NVIC_SetPriorityGrouping+0x44>)
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	60d3      	str	r3, [r2, #12]
}
 80036bc:	bf00      	nop
 80036be:	3714      	adds	r7, #20
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	e000ed00 	.word	0xe000ed00

080036cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036d0:	4b04      	ldr	r3, [pc, #16]	; (80036e4 <__NVIC_GetPriorityGrouping+0x18>)
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	0a1b      	lsrs	r3, r3, #8
 80036d6:	f003 0307 	and.w	r3, r3, #7
}
 80036da:	4618      	mov	r0, r3
 80036dc:	46bd      	mov	sp, r7
 80036de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e2:	4770      	bx	lr
 80036e4:	e000ed00 	.word	0xe000ed00

080036e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036e8:	b480      	push	{r7}
 80036ea:	b083      	sub	sp, #12
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	4603      	mov	r3, r0
 80036f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	db0b      	blt.n	8003712 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80036fa:	79fb      	ldrb	r3, [r7, #7]
 80036fc:	f003 021f 	and.w	r2, r3, #31
 8003700:	4907      	ldr	r1, [pc, #28]	; (8003720 <__NVIC_EnableIRQ+0x38>)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	095b      	lsrs	r3, r3, #5
 8003708:	2001      	movs	r0, #1
 800370a:	fa00 f202 	lsl.w	r2, r0, r2
 800370e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003712:	bf00      	nop
 8003714:	370c      	adds	r7, #12
 8003716:	46bd      	mov	sp, r7
 8003718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371c:	4770      	bx	lr
 800371e:	bf00      	nop
 8003720:	e000e100 	.word	0xe000e100

08003724 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	4603      	mov	r3, r0
 800372c:	6039      	str	r1, [r7, #0]
 800372e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003730:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003734:	2b00      	cmp	r3, #0
 8003736:	db0a      	blt.n	800374e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	b2da      	uxtb	r2, r3
 800373c:	490c      	ldr	r1, [pc, #48]	; (8003770 <__NVIC_SetPriority+0x4c>)
 800373e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003742:	0112      	lsls	r2, r2, #4
 8003744:	b2d2      	uxtb	r2, r2
 8003746:	440b      	add	r3, r1
 8003748:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800374c:	e00a      	b.n	8003764 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	b2da      	uxtb	r2, r3
 8003752:	4908      	ldr	r1, [pc, #32]	; (8003774 <__NVIC_SetPriority+0x50>)
 8003754:	79fb      	ldrb	r3, [r7, #7]
 8003756:	f003 030f 	and.w	r3, r3, #15
 800375a:	3b04      	subs	r3, #4
 800375c:	0112      	lsls	r2, r2, #4
 800375e:	b2d2      	uxtb	r2, r2
 8003760:	440b      	add	r3, r1
 8003762:	761a      	strb	r2, [r3, #24]
}
 8003764:	bf00      	nop
 8003766:	370c      	adds	r7, #12
 8003768:	46bd      	mov	sp, r7
 800376a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376e:	4770      	bx	lr
 8003770:	e000e100 	.word	0xe000e100
 8003774:	e000ed00 	.word	0xe000ed00

08003778 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003778:	b480      	push	{r7}
 800377a:	b089      	sub	sp, #36	; 0x24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f003 0307 	and.w	r3, r3, #7
 800378a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800378c:	69fb      	ldr	r3, [r7, #28]
 800378e:	f1c3 0307 	rsb	r3, r3, #7
 8003792:	2b04      	cmp	r3, #4
 8003794:	bf28      	it	cs
 8003796:	2304      	movcs	r3, #4
 8003798:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3304      	adds	r3, #4
 800379e:	2b06      	cmp	r3, #6
 80037a0:	d902      	bls.n	80037a8 <NVIC_EncodePriority+0x30>
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	3b03      	subs	r3, #3
 80037a6:	e000      	b.n	80037aa <NVIC_EncodePriority+0x32>
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037ac:	f04f 32ff 	mov.w	r2, #4294967295
 80037b0:	69bb      	ldr	r3, [r7, #24]
 80037b2:	fa02 f303 	lsl.w	r3, r2, r3
 80037b6:	43da      	mvns	r2, r3
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037c0:	f04f 31ff 	mov.w	r1, #4294967295
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ca:	43d9      	mvns	r1, r3
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037d0:	4313      	orrs	r3, r2
         );
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3724      	adds	r7, #36	; 0x24
 80037d6:	46bd      	mov	sp, r7
 80037d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037dc:	4770      	bx	lr
	...

080037e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	3b01      	subs	r3, #1
 80037ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80037f0:	d301      	bcc.n	80037f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80037f2:	2301      	movs	r3, #1
 80037f4:	e00f      	b.n	8003816 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80037f6:	4a0a      	ldr	r2, [pc, #40]	; (8003820 <SysTick_Config+0x40>)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80037fe:	210f      	movs	r1, #15
 8003800:	f04f 30ff 	mov.w	r0, #4294967295
 8003804:	f7ff ff8e 	bl	8003724 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003808:	4b05      	ldr	r3, [pc, #20]	; (8003820 <SysTick_Config+0x40>)
 800380a:	2200      	movs	r2, #0
 800380c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800380e:	4b04      	ldr	r3, [pc, #16]	; (8003820 <SysTick_Config+0x40>)
 8003810:	2207      	movs	r2, #7
 8003812:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	e000e010 	.word	0xe000e010

08003824 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b082      	sub	sp, #8
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f7ff ff29 	bl	8003684 <__NVIC_SetPriorityGrouping>
}
 8003832:	bf00      	nop
 8003834:	3708      	adds	r7, #8
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}

0800383a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800383a:	b580      	push	{r7, lr}
 800383c:	b086      	sub	sp, #24
 800383e:	af00      	add	r7, sp, #0
 8003840:	4603      	mov	r3, r0
 8003842:	60b9      	str	r1, [r7, #8]
 8003844:	607a      	str	r2, [r7, #4]
 8003846:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003848:	2300      	movs	r3, #0
 800384a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800384c:	f7ff ff3e 	bl	80036cc <__NVIC_GetPriorityGrouping>
 8003850:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003852:	687a      	ldr	r2, [r7, #4]
 8003854:	68b9      	ldr	r1, [r7, #8]
 8003856:	6978      	ldr	r0, [r7, #20]
 8003858:	f7ff ff8e 	bl	8003778 <NVIC_EncodePriority>
 800385c:	4602      	mov	r2, r0
 800385e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003862:	4611      	mov	r1, r2
 8003864:	4618      	mov	r0, r3
 8003866:	f7ff ff5d 	bl	8003724 <__NVIC_SetPriority>
}
 800386a:	bf00      	nop
 800386c:	3718      	adds	r7, #24
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}

08003872 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003872:	b580      	push	{r7, lr}
 8003874:	b082      	sub	sp, #8
 8003876:	af00      	add	r7, sp, #0
 8003878:	4603      	mov	r3, r0
 800387a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800387c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003880:	4618      	mov	r0, r3
 8003882:	f7ff ff31 	bl	80036e8 <__NVIC_EnableIRQ>
}
 8003886:	bf00      	nop
 8003888:	3708      	adds	r7, #8
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}

0800388e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800388e:	b580      	push	{r7, lr}
 8003890:	b082      	sub	sp, #8
 8003892:	af00      	add	r7, sp, #0
 8003894:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff ffa2 	bl	80037e0 <SysTick_Config>
 800389c:	4603      	mov	r3, r0
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3708      	adds	r7, #8
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}

080038a6 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80038a6:	b580      	push	{r7, lr}
 80038a8:	b082      	sub	sp, #8
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d101      	bne.n	80038b8 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	e00e      	b.n	80038d6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	795b      	ldrb	r3, [r3, #5]
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d105      	bne.n	80038ce <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80038c8:	6878      	ldr	r0, [r7, #4]
 80038ca:	f7fd fb53 	bl	8000f74 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2201      	movs	r2, #1
 80038d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80038d4:	2300      	movs	r3, #0
}
 80038d6:	4618      	mov	r0, r3
 80038d8:	3708      	adds	r7, #8
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
	...

080038e0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b086      	sub	sp, #24
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80038e8:	2300      	movs	r3, #0
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80038ec:	f7ff febe 	bl	800366c <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e099      	b.n	8003a30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	2200      	movs	r2, #0
 8003900:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0201 	bic.w	r2, r2, #1
 800391a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800391c:	e00f      	b.n	800393e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800391e:	f7ff fea5 	bl	800366c <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	2b05      	cmp	r3, #5
 800392a:	d908      	bls.n	800393e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2220      	movs	r2, #32
 8003930:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	2203      	movs	r2, #3
 8003936:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800393a:	2303      	movs	r3, #3
 800393c:	e078      	b.n	8003a30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f003 0301 	and.w	r3, r3, #1
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e8      	bne.n	800391e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	4b38      	ldr	r3, [pc, #224]	; (8003a38 <HAL_DMA_Init+0x158>)
 8003958:	4013      	ands	r3, r2
 800395a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685a      	ldr	r2, [r3, #4]
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	689b      	ldr	r3, [r3, #8]
 8003964:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800396a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	691b      	ldr	r3, [r3, #16]
 8003970:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003976:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003982:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6a1b      	ldr	r3, [r3, #32]
 8003988:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800398a:	697a      	ldr	r2, [r7, #20]
 800398c:	4313      	orrs	r3, r2
 800398e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003994:	2b04      	cmp	r3, #4
 8003996:	d107      	bne.n	80039a8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	4313      	orrs	r3, r2
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	697a      	ldr	r2, [r7, #20]
 80039ae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	695b      	ldr	r3, [r3, #20]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	f023 0307 	bic.w	r3, r3, #7
 80039be:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c4:	697a      	ldr	r2, [r7, #20]
 80039c6:	4313      	orrs	r3, r2
 80039c8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d117      	bne.n	8003a02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039d6:	697a      	ldr	r2, [r7, #20]
 80039d8:	4313      	orrs	r3, r2
 80039da:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d00e      	beq.n	8003a02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 fa91 	bl	8003f0c <DMA_CheckFifoParam>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d008      	beq.n	8003a02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	2240      	movs	r2, #64	; 0x40
 80039f4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2201      	movs	r2, #1
 80039fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80039fe:	2301      	movs	r3, #1
 8003a00:	e016      	b.n	8003a30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	697a      	ldr	r2, [r7, #20]
 8003a08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 fa48 	bl	8003ea0 <DMA_CalcBaseAndBitshift>
 8003a10:	4603      	mov	r3, r0
 8003a12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a18:	223f      	movs	r2, #63	; 0x3f
 8003a1a:	409a      	lsls	r2, r3
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2201      	movs	r2, #1
 8003a2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003a2e:	2300      	movs	r3, #0
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	f010803f 	.word	0xf010803f

08003a3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b086      	sub	sp, #24
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	60f8      	str	r0, [r7, #12]
 8003a44:	60b9      	str	r1, [r7, #8]
 8003a46:	607a      	str	r2, [r7, #4]
 8003a48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4a:	2300      	movs	r3, #0
 8003a4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003a5a:	2b01      	cmp	r3, #1
 8003a5c:	d101      	bne.n	8003a62 <HAL_DMA_Start_IT+0x26>
 8003a5e:	2302      	movs	r3, #2
 8003a60:	e040      	b.n	8003ae4 <HAL_DMA_Start_IT+0xa8>
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2201      	movs	r2, #1
 8003a66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a70:	b2db      	uxtb	r3, r3
 8003a72:	2b01      	cmp	r3, #1
 8003a74:	d12f      	bne.n	8003ad6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2202      	movs	r2, #2
 8003a7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	2200      	movs	r2, #0
 8003a82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003a84:	683b      	ldr	r3, [r7, #0]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68b9      	ldr	r1, [r7, #8]
 8003a8a:	68f8      	ldr	r0, [r7, #12]
 8003a8c:	f000 f9da 	bl	8003e44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a94:	223f      	movs	r2, #63	; 0x3f
 8003a96:	409a      	lsls	r2, r3
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	f042 0216 	orr.w	r2, r2, #22
 8003aaa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0208 	orr.w	r2, r2, #8
 8003ac2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
 8003ad4:	e005      	b.n	8003ae2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003ade:	2302      	movs	r3, #2
 8003ae0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003ae2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3718      	adds	r7, #24
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b083      	sub	sp, #12
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003afa:	b2db      	uxtb	r3, r3
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d004      	beq.n	8003b0a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2280      	movs	r2, #128	; 0x80
 8003b04:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003b06:	2301      	movs	r3, #1
 8003b08:	e00c      	b.n	8003b24 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2205      	movs	r2, #5
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 0201 	bic.w	r2, r2, #1
 8003b20:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003b22:	2300      	movs	r3, #0
}
 8003b24:	4618      	mov	r0, r3
 8003b26:	370c      	adds	r7, #12
 8003b28:	46bd      	mov	sp, r7
 8003b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2e:	4770      	bx	lr

08003b30 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	b086      	sub	sp, #24
 8003b34:	af00      	add	r7, sp, #0
 8003b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003b38:	2300      	movs	r3, #0
 8003b3a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003b3c:	4b92      	ldr	r3, [pc, #584]	; (8003d88 <HAL_DMA_IRQHandler+0x258>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	4a92      	ldr	r2, [pc, #584]	; (8003d8c <HAL_DMA_IRQHandler+0x25c>)
 8003b42:	fba2 2303 	umull	r2, r3, r2, r3
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b4e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003b50:	693b      	ldr	r3, [r7, #16]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b5a:	2208      	movs	r2, #8
 8003b5c:	409a      	lsls	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d01a      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	f003 0304 	and.w	r3, r3, #4
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d013      	beq.n	8003b9c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0204 	bic.w	r2, r2, #4
 8003b82:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b88:	2208      	movs	r2, #8
 8003b8a:	409a      	lsls	r2, r3
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b94:	f043 0201 	orr.w	r2, r3, #1
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba0:	2201      	movs	r2, #1
 8003ba2:	409a      	lsls	r2, r3
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	4013      	ands	r3, r2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d012      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d00b      	beq.n	8003bd2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	409a      	lsls	r2, r3
 8003bc2:	693b      	ldr	r3, [r7, #16]
 8003bc4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bca:	f043 0202 	orr.w	r2, r3, #2
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd6:	2204      	movs	r2, #4
 8003bd8:	409a      	lsls	r2, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4013      	ands	r3, r2
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d012      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00b      	beq.n	8003c08 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bf4:	2204      	movs	r2, #4
 8003bf6:	409a      	lsls	r2, r3
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c00:	f043 0204 	orr.w	r2, r3, #4
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0c:	2210      	movs	r2, #16
 8003c0e:	409a      	lsls	r2, r3
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d043      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f003 0308 	and.w	r3, r3, #8
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d03c      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c2a:	2210      	movs	r2, #16
 8003c2c:	409a      	lsls	r2, r3
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d018      	beq.n	8003c72 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d108      	bne.n	8003c60 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d024      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	4798      	blx	r3
 8003c5e:	e01f      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d01b      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4798      	blx	r3
 8003c70:	e016      	b.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d107      	bne.n	8003c90 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	681a      	ldr	r2, [r3, #0]
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	f022 0208 	bic.w	r2, r2, #8
 8003c8e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d003      	beq.n	8003ca0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ca4:	2220      	movs	r2, #32
 8003ca6:	409a      	lsls	r2, r3
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4013      	ands	r3, r2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	f000 808e 	beq.w	8003dce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f003 0310 	and.w	r3, r3, #16
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	f000 8086 	beq.w	8003dce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cc6:	2220      	movs	r2, #32
 8003cc8:	409a      	lsls	r2, r3
 8003cca:	693b      	ldr	r3, [r7, #16]
 8003ccc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b05      	cmp	r3, #5
 8003cd8:	d136      	bne.n	8003d48 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f022 0216 	bic.w	r2, r2, #22
 8003ce8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cf8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d103      	bne.n	8003d0a <HAL_DMA_IRQHandler+0x1da>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d007      	beq.n	8003d1a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	f022 0208 	bic.w	r2, r2, #8
 8003d18:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d1e:	223f      	movs	r2, #63	; 0x3f
 8003d20:	409a      	lsls	r2, r3
 8003d22:	693b      	ldr	r3, [r7, #16]
 8003d24:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	2201      	movs	r2, #1
 8003d32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d07d      	beq.n	8003e3a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	4798      	blx	r3
        }
        return;
 8003d46:	e078      	b.n	8003e3a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d01c      	beq.n	8003d90 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d108      	bne.n	8003d76 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d030      	beq.n	8003dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	4798      	blx	r3
 8003d74:	e02b      	b.n	8003dce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d027      	beq.n	8003dce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	4798      	blx	r3
 8003d86:	e022      	b.n	8003dce <HAL_DMA_IRQHandler+0x29e>
 8003d88:	20000094 	.word	0x20000094
 8003d8c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d10f      	bne.n	8003dbe <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	681a      	ldr	r2, [r3, #0]
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	f022 0210 	bic.w	r2, r2, #16
 8003dac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	2200      	movs	r2, #0
 8003db2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2201      	movs	r2, #1
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d003      	beq.n	8003dce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	6878      	ldr	r0, [r7, #4]
 8003dcc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d032      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dda:	f003 0301 	and.w	r3, r3, #1
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d022      	beq.n	8003e28 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	2205      	movs	r2, #5
 8003de6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f022 0201 	bic.w	r2, r2, #1
 8003df8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	60bb      	str	r3, [r7, #8]
 8003e00:	697a      	ldr	r2, [r7, #20]
 8003e02:	429a      	cmp	r2, r3
 8003e04:	d307      	bcc.n	8003e16 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 0301 	and.w	r3, r3, #1
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d1f2      	bne.n	8003dfa <HAL_DMA_IRQHandler+0x2ca>
 8003e14:	e000      	b.n	8003e18 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003e16:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2201      	movs	r2, #1
 8003e24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d005      	beq.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	4798      	blx	r3
 8003e38:	e000      	b.n	8003e3c <HAL_DMA_IRQHandler+0x30c>
        return;
 8003e3a:	bf00      	nop
    }
  }
}
 8003e3c:	3718      	adds	r7, #24
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}
 8003e42:	bf00      	nop

08003e44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e44:	b480      	push	{r7}
 8003e46:	b085      	sub	sp, #20
 8003e48:	af00      	add	r7, sp, #0
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	60b9      	str	r1, [r7, #8]
 8003e4e:	607a      	str	r2, [r7, #4]
 8003e50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681a      	ldr	r2, [r3, #0]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003e60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	2b40      	cmp	r3, #64	; 0x40
 8003e70:	d108      	bne.n	8003e84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	687a      	ldr	r2, [r7, #4]
 8003e78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003e82:	e007      	b.n	8003e94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68ba      	ldr	r2, [r7, #8]
 8003e8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	687a      	ldr	r2, [r7, #4]
 8003e92:	60da      	str	r2, [r3, #12]
}
 8003e94:	bf00      	nop
 8003e96:	3714      	adds	r7, #20
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	b085      	sub	sp, #20
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	3b10      	subs	r3, #16
 8003eb0:	4a14      	ldr	r2, [pc, #80]	; (8003f04 <DMA_CalcBaseAndBitshift+0x64>)
 8003eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8003eb6:	091b      	lsrs	r3, r3, #4
 8003eb8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003eba:	4a13      	ldr	r2, [pc, #76]	; (8003f08 <DMA_CalcBaseAndBitshift+0x68>)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	4413      	add	r3, r2
 8003ec0:	781b      	ldrb	r3, [r3, #0]
 8003ec2:	461a      	mov	r2, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	2b03      	cmp	r3, #3
 8003ecc:	d909      	bls.n	8003ee2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ed6:	f023 0303 	bic.w	r3, r3, #3
 8003eda:	1d1a      	adds	r2, r3, #4
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	659a      	str	r2, [r3, #88]	; 0x58
 8003ee0:	e007      	b.n	8003ef2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003eea:	f023 0303 	bic.w	r3, r3, #3
 8003eee:	687a      	ldr	r2, [r7, #4]
 8003ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	3714      	adds	r7, #20
 8003efa:	46bd      	mov	sp, r7
 8003efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f00:	4770      	bx	lr
 8003f02:	bf00      	nop
 8003f04:	aaaaaaab 	.word	0xaaaaaaab
 8003f08:	08007fa4 	.word	0x08007fa4

08003f0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b085      	sub	sp, #20
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f14:	2300      	movs	r3, #0
 8003f16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	699b      	ldr	r3, [r3, #24]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d11f      	bne.n	8003f66 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	2b03      	cmp	r3, #3
 8003f2a:	d855      	bhi.n	8003fd8 <DMA_CheckFifoParam+0xcc>
 8003f2c:	a201      	add	r2, pc, #4	; (adr r2, 8003f34 <DMA_CheckFifoParam+0x28>)
 8003f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f32:	bf00      	nop
 8003f34:	08003f45 	.word	0x08003f45
 8003f38:	08003f57 	.word	0x08003f57
 8003f3c:	08003f45 	.word	0x08003f45
 8003f40:	08003fd9 	.word	0x08003fd9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d045      	beq.n	8003fdc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f54:	e042      	b.n	8003fdc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003f5e:	d13f      	bne.n	8003fe0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003f60:	2301      	movs	r3, #1
 8003f62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003f64:	e03c      	b.n	8003fe0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	699b      	ldr	r3, [r3, #24]
 8003f6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f6e:	d121      	bne.n	8003fb4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003f70:	68bb      	ldr	r3, [r7, #8]
 8003f72:	2b03      	cmp	r3, #3
 8003f74:	d836      	bhi.n	8003fe4 <DMA_CheckFifoParam+0xd8>
 8003f76:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <DMA_CheckFifoParam+0x70>)
 8003f78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7c:	08003f8d 	.word	0x08003f8d
 8003f80:	08003f93 	.word	0x08003f93
 8003f84:	08003f8d 	.word	0x08003f8d
 8003f88:	08003fa5 	.word	0x08003fa5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e02f      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d024      	beq.n	8003fe8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003fa2:	e021      	b.n	8003fe8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fa8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003fac:	d11e      	bne.n	8003fec <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003fb2:	e01b      	b.n	8003fec <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b02      	cmp	r3, #2
 8003fb8:	d902      	bls.n	8003fc0 <DMA_CheckFifoParam+0xb4>
 8003fba:	2b03      	cmp	r3, #3
 8003fbc:	d003      	beq.n	8003fc6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003fbe:	e018      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fc4:	e015      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d00e      	beq.n	8003ff0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8003fd6:	e00b      	b.n	8003ff0 <DMA_CheckFifoParam+0xe4>
      break;
 8003fd8:	bf00      	nop
 8003fda:	e00a      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fdc:	bf00      	nop
 8003fde:	e008      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fe0:	bf00      	nop
 8003fe2:	e006      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fe4:	bf00      	nop
 8003fe6:	e004      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003fe8:	bf00      	nop
 8003fea:	e002      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;   
 8003fec:	bf00      	nop
 8003fee:	e000      	b.n	8003ff2 <DMA_CheckFifoParam+0xe6>
      break;
 8003ff0:	bf00      	nop
    }
  } 
  
  return status; 
 8003ff2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	3714      	adds	r7, #20
 8003ff8:	46bd      	mov	sp, r7
 8003ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffe:	4770      	bx	lr

08004000 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	60f8      	str	r0, [r7, #12]
 8004008:	60b9      	str	r1, [r7, #8]
 800400a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004012:	4b23      	ldr	r3, [pc, #140]	; (80040a0 <HAL_FLASH_Program+0xa0>)
 8004014:	7e1b      	ldrb	r3, [r3, #24]
 8004016:	2b01      	cmp	r3, #1
 8004018:	d101      	bne.n	800401e <HAL_FLASH_Program+0x1e>
 800401a:	2302      	movs	r3, #2
 800401c:	e03b      	b.n	8004096 <HAL_FLASH_Program+0x96>
 800401e:	4b20      	ldr	r3, [pc, #128]	; (80040a0 <HAL_FLASH_Program+0xa0>)
 8004020:	2201      	movs	r2, #1
 8004022:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004024:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004028:	f000 f870 	bl	800410c <FLASH_WaitForLastOperation>
 800402c:	4603      	mov	r3, r0
 800402e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004030:	7dfb      	ldrb	r3, [r7, #23]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d12b      	bne.n	800408e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d105      	bne.n	8004048 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800403c:	783b      	ldrb	r3, [r7, #0]
 800403e:	4619      	mov	r1, r3
 8004040:	68b8      	ldr	r0, [r7, #8]
 8004042:	f000 f919 	bl	8004278 <FLASH_Program_Byte>
 8004046:	e016      	b.n	8004076 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2b01      	cmp	r3, #1
 800404c:	d105      	bne.n	800405a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800404e:	883b      	ldrh	r3, [r7, #0]
 8004050:	4619      	mov	r1, r3
 8004052:	68b8      	ldr	r0, [r7, #8]
 8004054:	f000 f8ec 	bl	8004230 <FLASH_Program_HalfWord>
 8004058:	e00d      	b.n	8004076 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d105      	bne.n	800406c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	4619      	mov	r1, r3
 8004064:	68b8      	ldr	r0, [r7, #8]
 8004066:	f000 f8c1 	bl	80041ec <FLASH_Program_Word>
 800406a:	e004      	b.n	8004076 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800406c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004070:	68b8      	ldr	r0, [r7, #8]
 8004072:	f000 f88b 	bl	800418c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004076:	f24c 3050 	movw	r0, #50000	; 0xc350
 800407a:	f000 f847 	bl	800410c <FLASH_WaitForLastOperation>
 800407e:	4603      	mov	r3, r0
 8004080:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004082:	4b08      	ldr	r3, [pc, #32]	; (80040a4 <HAL_FLASH_Program+0xa4>)
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	4a07      	ldr	r2, [pc, #28]	; (80040a4 <HAL_FLASH_Program+0xa4>)
 8004088:	f023 0301 	bic.w	r3, r3, #1
 800408c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800408e:	4b04      	ldr	r3, [pc, #16]	; (80040a0 <HAL_FLASH_Program+0xa0>)
 8004090:	2200      	movs	r2, #0
 8004092:	761a      	strb	r2, [r3, #24]
  
  return status;
 8004094:	7dfb      	ldrb	r3, [r7, #23]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20000a38 	.word	0x20000a38
 80040a4:	40023c00 	.word	0x40023c00

080040a8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80040ae:	2300      	movs	r3, #0
 80040b0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040b2:	4b0b      	ldr	r3, [pc, #44]	; (80040e0 <HAL_FLASH_Unlock+0x38>)
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	da0b      	bge.n	80040d2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80040ba:	4b09      	ldr	r3, [pc, #36]	; (80040e0 <HAL_FLASH_Unlock+0x38>)
 80040bc:	4a09      	ldr	r2, [pc, #36]	; (80040e4 <HAL_FLASH_Unlock+0x3c>)
 80040be:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80040c0:	4b07      	ldr	r3, [pc, #28]	; (80040e0 <HAL_FLASH_Unlock+0x38>)
 80040c2:	4a09      	ldr	r2, [pc, #36]	; (80040e8 <HAL_FLASH_Unlock+0x40>)
 80040c4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80040c6:	4b06      	ldr	r3, [pc, #24]	; (80040e0 <HAL_FLASH_Unlock+0x38>)
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	da01      	bge.n	80040d2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80040d2:	79fb      	ldrb	r3, [r7, #7]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	370c      	adds	r7, #12
 80040d8:	46bd      	mov	sp, r7
 80040da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040de:	4770      	bx	lr
 80040e0:	40023c00 	.word	0x40023c00
 80040e4:	45670123 	.word	0x45670123
 80040e8:	cdef89ab 	.word	0xcdef89ab

080040ec <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80040ec:	b480      	push	{r7}
 80040ee:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <HAL_FLASH_Lock+0x1c>)
 80040f2:	691b      	ldr	r3, [r3, #16]
 80040f4:	4a04      	ldr	r2, [pc, #16]	; (8004108 <HAL_FLASH_Lock+0x1c>)
 80040f6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80040fa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 80040fc:	2300      	movs	r3, #0
}
 80040fe:	4618      	mov	r0, r3
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	40023c00 	.word	0x40023c00

0800410c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004114:	2300      	movs	r3, #0
 8004116:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004118:	4b1a      	ldr	r3, [pc, #104]	; (8004184 <FLASH_WaitForLastOperation+0x78>)
 800411a:	2200      	movs	r2, #0
 800411c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800411e:	f7ff faa5 	bl	800366c <HAL_GetTick>
 8004122:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004124:	e010      	b.n	8004148 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412c:	d00c      	beq.n	8004148 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d007      	beq.n	8004144 <FLASH_WaitForLastOperation+0x38>
 8004134:	f7ff fa9a 	bl	800366c <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	687a      	ldr	r2, [r7, #4]
 8004140:	429a      	cmp	r2, r3
 8004142:	d201      	bcs.n	8004148 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8004144:	2303      	movs	r3, #3
 8004146:	e019      	b.n	800417c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <FLASH_WaitForLastOperation+0x7c>)
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1e8      	bne.n	8004126 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <FLASH_WaitForLastOperation+0x7c>)
 8004156:	68db      	ldr	r3, [r3, #12]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	d002      	beq.n	8004166 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004160:	4b09      	ldr	r3, [pc, #36]	; (8004188 <FLASH_WaitForLastOperation+0x7c>)
 8004162:	2201      	movs	r2, #1
 8004164:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8004166:	4b08      	ldr	r3, [pc, #32]	; (8004188 <FLASH_WaitForLastOperation+0x7c>)
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 800416e:	2b00      	cmp	r3, #0
 8004170:	d003      	beq.n	800417a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8004172:	f000 f8a3 	bl	80042bc <FLASH_SetErrorCode>
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e000      	b.n	800417c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800417a:	2300      	movs	r3, #0
  
}  
 800417c:	4618      	mov	r0, r3
 800417e:	3710      	adds	r7, #16
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	20000a38 	.word	0x20000a38
 8004188:	40023c00 	.word	0x40023c00

0800418c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 800418c:	b490      	push	{r4, r7}
 800418e:	b084      	sub	sp, #16
 8004190:	af00      	add	r7, sp, #0
 8004192:	60f8      	str	r0, [r7, #12]
 8004194:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004198:	4b13      	ldr	r3, [pc, #76]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	4a12      	ldr	r2, [pc, #72]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 800419e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041a2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80041a4:	4b10      	ldr	r3, [pc, #64]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	4a0f      	ldr	r2, [pc, #60]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 80041aa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80041ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80041b0:	4b0d      	ldr	r3, [pc, #52]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <FLASH_Program_DoubleWord+0x5c>)
 80041b6:	f043 0301 	orr.w	r3, r3, #1
 80041ba:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	683a      	ldr	r2, [r7, #0]
 80041c0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 80041c2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80041c6:	e9d7 1200 	ldrd	r1, r2, [r7]
 80041ca:	f04f 0300 	mov.w	r3, #0
 80041ce:	f04f 0400 	mov.w	r4, #0
 80041d2:	0013      	movs	r3, r2
 80041d4:	2400      	movs	r4, #0
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	3204      	adds	r2, #4
 80041da:	6013      	str	r3, [r2, #0]
}
 80041dc:	bf00      	nop
 80041de:	3710      	adds	r7, #16
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bc90      	pop	{r4, r7}
 80041e4:	4770      	bx	lr
 80041e6:	bf00      	nop
 80041e8:	40023c00 	.word	0x40023c00

080041ec <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b083      	sub	sp, #12
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80041f6:	4b0d      	ldr	r3, [pc, #52]	; (800422c <FLASH_Program_Word+0x40>)
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	4a0c      	ldr	r2, [pc, #48]	; (800422c <FLASH_Program_Word+0x40>)
 80041fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004200:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004202:	4b0a      	ldr	r3, [pc, #40]	; (800422c <FLASH_Program_Word+0x40>)
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	4a09      	ldr	r2, [pc, #36]	; (800422c <FLASH_Program_Word+0x40>)
 8004208:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800420c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800420e:	4b07      	ldr	r3, [pc, #28]	; (800422c <FLASH_Program_Word+0x40>)
 8004210:	691b      	ldr	r3, [r3, #16]
 8004212:	4a06      	ldr	r2, [pc, #24]	; (800422c <FLASH_Program_Word+0x40>)
 8004214:	f043 0301 	orr.w	r3, r3, #1
 8004218:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	683a      	ldr	r2, [r7, #0]
 800421e:	601a      	str	r2, [r3, #0]
}
 8004220:	bf00      	nop
 8004222:	370c      	adds	r7, #12
 8004224:	46bd      	mov	sp, r7
 8004226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422a:	4770      	bx	lr
 800422c:	40023c00 	.word	0x40023c00

08004230 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	460b      	mov	r3, r1
 800423a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800423c:	4b0d      	ldr	r3, [pc, #52]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	4a0c      	ldr	r2, [pc, #48]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 8004242:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004246:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 800424a:	691b      	ldr	r3, [r3, #16]
 800424c:	4a09      	ldr	r2, [pc, #36]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 800424e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004252:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004254:	4b07      	ldr	r3, [pc, #28]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 8004256:	691b      	ldr	r3, [r3, #16]
 8004258:	4a06      	ldr	r2, [pc, #24]	; (8004274 <FLASH_Program_HalfWord+0x44>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	887a      	ldrh	r2, [r7, #2]
 8004264:	801a      	strh	r2, [r3, #0]
}
 8004266:	bf00      	nop
 8004268:	370c      	adds	r7, #12
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40023c00 	.word	0x40023c00

08004278 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	460b      	mov	r3, r1
 8004282:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004284:	4b0c      	ldr	r3, [pc, #48]	; (80042b8 <FLASH_Program_Byte+0x40>)
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	4a0b      	ldr	r2, [pc, #44]	; (80042b8 <FLASH_Program_Byte+0x40>)
 800428a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800428e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004290:	4b09      	ldr	r3, [pc, #36]	; (80042b8 <FLASH_Program_Byte+0x40>)
 8004292:	4a09      	ldr	r2, [pc, #36]	; (80042b8 <FLASH_Program_Byte+0x40>)
 8004294:	691b      	ldr	r3, [r3, #16]
 8004296:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004298:	4b07      	ldr	r3, [pc, #28]	; (80042b8 <FLASH_Program_Byte+0x40>)
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	4a06      	ldr	r2, [pc, #24]	; (80042b8 <FLASH_Program_Byte+0x40>)
 800429e:	f043 0301 	orr.w	r3, r3, #1
 80042a2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	78fa      	ldrb	r2, [r7, #3]
 80042a8:	701a      	strb	r2, [r3, #0]
}
 80042aa:	bf00      	nop
 80042ac:	370c      	adds	r7, #12
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40023c00 	.word	0x40023c00

080042bc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80042bc:	b480      	push	{r7}
 80042be:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80042c0:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 80042c2:	68db      	ldr	r3, [r3, #12]
 80042c4:	f003 0310 	and.w	r3, r3, #16
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d008      	beq.n	80042de <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80042cc:	4b2d      	ldr	r3, [pc, #180]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 80042ce:	69db      	ldr	r3, [r3, #28]
 80042d0:	f043 0310 	orr.w	r3, r3, #16
 80042d4:	4a2b      	ldr	r2, [pc, #172]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 80042d6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80042d8:	4b29      	ldr	r3, [pc, #164]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 80042da:	2210      	movs	r2, #16
 80042dc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80042de:	4b28      	ldr	r3, [pc, #160]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 80042e0:	68db      	ldr	r3, [r3, #12]
 80042e2:	f003 0320 	and.w	r3, r3, #32
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d008      	beq.n	80042fc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80042ea:	4b26      	ldr	r3, [pc, #152]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	f043 0308 	orr.w	r3, r3, #8
 80042f2:	4a24      	ldr	r2, [pc, #144]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 80042f4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80042f6:	4b22      	ldr	r3, [pc, #136]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 80042f8:	2220      	movs	r2, #32
 80042fa:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80042fc:	4b20      	ldr	r3, [pc, #128]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 80042fe:	68db      	ldr	r3, [r3, #12]
 8004300:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004308:	4b1e      	ldr	r3, [pc, #120]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 800430a:	69db      	ldr	r3, [r3, #28]
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	4a1c      	ldr	r2, [pc, #112]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 8004312:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004314:	4b1a      	ldr	r3, [pc, #104]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 8004316:	2240      	movs	r2, #64	; 0x40
 8004318:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800431a:	4b19      	ldr	r3, [pc, #100]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004322:	2b00      	cmp	r3, #0
 8004324:	d008      	beq.n	8004338 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004326:	4b17      	ldr	r3, [pc, #92]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	f043 0302 	orr.w	r3, r3, #2
 800432e:	4a15      	ldr	r2, [pc, #84]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 8004330:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004332:	4b13      	ldr	r3, [pc, #76]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 8004334:	2280      	movs	r2, #128	; 0x80
 8004336:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8004338:	4b11      	ldr	r3, [pc, #68]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 800433a:	68db      	ldr	r3, [r3, #12]
 800433c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004340:	2b00      	cmp	r3, #0
 8004342:	d009      	beq.n	8004358 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8004344:	4b0f      	ldr	r3, [pc, #60]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 8004346:	69db      	ldr	r3, [r3, #28]
 8004348:	f043 0301 	orr.w	r3, r3, #1
 800434c:	4a0d      	ldr	r2, [pc, #52]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 800434e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8004350:	4b0b      	ldr	r3, [pc, #44]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 8004352:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004356:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 800435a:	68db      	ldr	r3, [r3, #12]
 800435c:	f003 0302 	and.w	r3, r3, #2
 8004360:	2b00      	cmp	r3, #0
 8004362:	d008      	beq.n	8004376 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004364:	4b07      	ldr	r3, [pc, #28]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 8004366:	69db      	ldr	r3, [r3, #28]
 8004368:	f043 0320 	orr.w	r3, r3, #32
 800436c:	4a05      	ldr	r2, [pc, #20]	; (8004384 <FLASH_SetErrorCode+0xc8>)
 800436e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004370:	4b03      	ldr	r3, [pc, #12]	; (8004380 <FLASH_SetErrorCode+0xc4>)
 8004372:	2202      	movs	r2, #2
 8004374:	60da      	str	r2, [r3, #12]
  }
}
 8004376:	bf00      	nop
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	40023c00 	.word	0x40023c00
 8004384:	20000a38 	.word	0x20000a38

08004388 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b084      	sub	sp, #16
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004396:	2300      	movs	r3, #0
 8004398:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800439a:	4b31      	ldr	r3, [pc, #196]	; (8004460 <HAL_FLASHEx_Erase+0xd8>)
 800439c:	7e1b      	ldrb	r3, [r3, #24]
 800439e:	2b01      	cmp	r3, #1
 80043a0:	d101      	bne.n	80043a6 <HAL_FLASHEx_Erase+0x1e>
 80043a2:	2302      	movs	r3, #2
 80043a4:	e058      	b.n	8004458 <HAL_FLASHEx_Erase+0xd0>
 80043a6:	4b2e      	ldr	r3, [pc, #184]	; (8004460 <HAL_FLASHEx_Erase+0xd8>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043ac:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043b0:	f7ff feac 	bl	800410c <FLASH_WaitForLastOperation>
 80043b4:	4603      	mov	r3, r0
 80043b6:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d148      	bne.n	8004450 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d115      	bne.n	80043fa <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	691b      	ldr	r3, [r3, #16]
 80043d2:	b2da      	uxtb	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	4619      	mov	r1, r3
 80043da:	4610      	mov	r0, r2
 80043dc:	f000 f844 	bl	8004468 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80043e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80043e4:	f7ff fe92 	bl	800410c <FLASH_WaitForLastOperation>
 80043e8:	4603      	mov	r3, r0
 80043ea:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80043ec:	4b1d      	ldr	r3, [pc, #116]	; (8004464 <HAL_FLASHEx_Erase+0xdc>)
 80043ee:	691b      	ldr	r3, [r3, #16]
 80043f0:	4a1c      	ldr	r2, [pc, #112]	; (8004464 <HAL_FLASHEx_Erase+0xdc>)
 80043f2:	f023 0304 	bic.w	r3, r3, #4
 80043f6:	6113      	str	r3, [r2, #16]
 80043f8:	e028      	b.n	800444c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	60bb      	str	r3, [r7, #8]
 8004400:	e01c      	b.n	800443c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	691b      	ldr	r3, [r3, #16]
 8004406:	b2db      	uxtb	r3, r3
 8004408:	4619      	mov	r1, r3
 800440a:	68b8      	ldr	r0, [r7, #8]
 800440c:	f000 f850 	bl	80044b0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004410:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004414:	f7ff fe7a 	bl	800410c <FLASH_WaitForLastOperation>
 8004418:	4603      	mov	r3, r0
 800441a:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800441c:	4b11      	ldr	r3, [pc, #68]	; (8004464 <HAL_FLASHEx_Erase+0xdc>)
 800441e:	691b      	ldr	r3, [r3, #16]
 8004420:	4a10      	ldr	r2, [pc, #64]	; (8004464 <HAL_FLASHEx_Erase+0xdc>)
 8004422:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004426:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8004428:	7bfb      	ldrb	r3, [r7, #15]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d003      	beq.n	8004436 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	68ba      	ldr	r2, [r7, #8]
 8004432:	601a      	str	r2, [r3, #0]
          break;
 8004434:	e00a      	b.n	800444c <HAL_FLASHEx_Erase+0xc4>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	3301      	adds	r3, #1
 800443a:	60bb      	str	r3, [r7, #8]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	4413      	add	r3, r2
 8004446:	68ba      	ldr	r2, [r7, #8]
 8004448:	429a      	cmp	r2, r3
 800444a:	d3da      	bcc.n	8004402 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();    
 800444c:	f000 f878 	bl	8004540 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004450:	4b03      	ldr	r3, [pc, #12]	; (8004460 <HAL_FLASHEx_Erase+0xd8>)
 8004452:	2200      	movs	r2, #0
 8004454:	761a      	strb	r2, [r3, #24]

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}
 8004460:	20000a38 	.word	0x20000a38
 8004464:	40023c00 	.word	0x40023c00

08004468 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004468:	b480      	push	{r7}
 800446a:	b083      	sub	sp, #12
 800446c:	af00      	add	r7, sp, #0
 800446e:	4603      	mov	r3, r0
 8004470:	6039      	str	r1, [r7, #0]
 8004472:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));
  
  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004474:	4b0d      	ldr	r3, [pc, #52]	; (80044ac <FLASH_MassErase+0x44>)
 8004476:	691b      	ldr	r3, [r3, #16]
 8004478:	4a0c      	ldr	r2, [pc, #48]	; (80044ac <FLASH_MassErase+0x44>)
 800447a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800447e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004480:	4b0a      	ldr	r3, [pc, #40]	; (80044ac <FLASH_MassErase+0x44>)
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	4a09      	ldr	r2, [pc, #36]	; (80044ac <FLASH_MassErase+0x44>)
 8004486:	f043 0304 	orr.w	r3, r3, #4
 800448a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8U);
 800448c:	4b07      	ldr	r3, [pc, #28]	; (80044ac <FLASH_MassErase+0x44>)
 800448e:	691a      	ldr	r2, [r3, #16]
 8004490:	79fb      	ldrb	r3, [r7, #7]
 8004492:	021b      	lsls	r3, r3, #8
 8004494:	4313      	orrs	r3, r2
 8004496:	4a05      	ldr	r2, [pc, #20]	; (80044ac <FLASH_MassErase+0x44>)
 8004498:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800449c:	6113      	str	r3, [r2, #16]
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40023c00 	.word	0x40023c00

080044b0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	460b      	mov	r3, r1
 80044ba:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80044bc:	2300      	movs	r3, #0
 80044be:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80044c0:	78fb      	ldrb	r3, [r7, #3]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 80044c6:	2300      	movs	r3, #0
 80044c8:	60fb      	str	r3, [r7, #12]
 80044ca:	e010      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80044cc:	78fb      	ldrb	r3, [r7, #3]
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d103      	bne.n	80044da <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80044d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80044d6:	60fb      	str	r3, [r7, #12]
 80044d8:	e009      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b02      	cmp	r3, #2
 80044de:	d103      	bne.n	80044e8 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80044e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	e002      	b.n	80044ee <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80044e8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80044ec:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80044ee:	4b13      	ldr	r3, [pc, #76]	; (800453c <FLASH_Erase_Sector+0x8c>)
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	4a12      	ldr	r2, [pc, #72]	; (800453c <FLASH_Erase_Sector+0x8c>)
 80044f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044f8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <FLASH_Erase_Sector+0x8c>)
 80044fc:	691a      	ldr	r2, [r3, #16]
 80044fe:	490f      	ldr	r1, [pc, #60]	; (800453c <FLASH_Erase_Sector+0x8c>)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004506:	4b0d      	ldr	r3, [pc, #52]	; (800453c <FLASH_Erase_Sector+0x8c>)
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	4a0c      	ldr	r2, [pc, #48]	; (800453c <FLASH_Erase_Sector+0x8c>)
 800450c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004510:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004512:	4b0a      	ldr	r3, [pc, #40]	; (800453c <FLASH_Erase_Sector+0x8c>)
 8004514:	691a      	ldr	r2, [r3, #16]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	00db      	lsls	r3, r3, #3
 800451a:	4313      	orrs	r3, r2
 800451c:	4a07      	ldr	r2, [pc, #28]	; (800453c <FLASH_Erase_Sector+0x8c>)
 800451e:	f043 0302 	orr.w	r3, r3, #2
 8004522:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004524:	4b05      	ldr	r3, [pc, #20]	; (800453c <FLASH_Erase_Sector+0x8c>)
 8004526:	691b      	ldr	r3, [r3, #16]
 8004528:	4a04      	ldr	r2, [pc, #16]	; (800453c <FLASH_Erase_Sector+0x8c>)
 800452a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800452e:	6113      	str	r3, [r2, #16]
}
 8004530:	bf00      	nop
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr
 800453c:	40023c00 	.word	0x40023c00

08004540 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004540:	b480      	push	{r7}
 8004542:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_ICEN)!= RESET)
 8004544:	4b20      	ldr	r3, [pc, #128]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800454c:	2b00      	cmp	r3, #0
 800454e:	d017      	beq.n	8004580 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004550:	4b1d      	ldr	r3, [pc, #116]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	4a1c      	ldr	r2, [pc, #112]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004556:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800455a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 800455c:	4b1a      	ldr	r3, [pc, #104]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	4a19      	ldr	r2, [pc, #100]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004562:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004566:	6013      	str	r3, [r2, #0]
 8004568:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800456e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004572:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004574:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	4a13      	ldr	r2, [pc, #76]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800457a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800457e:	6013      	str	r3, [r2, #0]
  }
  
  /* Flush data cache */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004580:	4b11      	ldr	r3, [pc, #68]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004588:	2b00      	cmp	r3, #0
 800458a:	d017      	beq.n	80045bc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	4a0d      	ldr	r2, [pc, #52]	; (80045c8 <FLASH_FlushCaches+0x88>)
 8004592:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004596:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004598:	4b0b      	ldr	r3, [pc, #44]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a0a      	ldr	r2, [pc, #40]	; (80045c8 <FLASH_FlushCaches+0x88>)
 800459e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b08      	ldr	r3, [pc, #32]	; (80045c8 <FLASH_FlushCaches+0x88>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a07      	ldr	r2, [pc, #28]	; (80045c8 <FLASH_FlushCaches+0x88>)
 80045aa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045ae:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80045b0:	4b05      	ldr	r3, [pc, #20]	; (80045c8 <FLASH_FlushCaches+0x88>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4a04      	ldr	r2, [pc, #16]	; (80045c8 <FLASH_FlushCaches+0x88>)
 80045b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045ba:	6013      	str	r3, [r2, #0]
  }
}
 80045bc:	bf00      	nop
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	40023c00 	.word	0x40023c00

080045cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b089      	sub	sp, #36	; 0x24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045d6:	2300      	movs	r3, #0
 80045d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045da:	2300      	movs	r3, #0
 80045dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045de:	2300      	movs	r3, #0
 80045e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e2:	2300      	movs	r3, #0
 80045e4:	61fb      	str	r3, [r7, #28]
 80045e6:	e165      	b.n	80048b4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045e8:	2201      	movs	r2, #1
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	fa02 f303 	lsl.w	r3, r2, r3
 80045f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4013      	ands	r3, r2
 80045fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	429a      	cmp	r2, r3
 8004602:	f040 8154 	bne.w	80048ae <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d00b      	beq.n	8004626 <HAL_GPIO_Init+0x5a>
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	2b02      	cmp	r3, #2
 8004614:	d007      	beq.n	8004626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800461a:	2b11      	cmp	r3, #17
 800461c:	d003      	beq.n	8004626 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	2b12      	cmp	r3, #18
 8004624:	d130      	bne.n	8004688 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	689b      	ldr	r3, [r3, #8]
 800462a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800462c:	69fb      	ldr	r3, [r7, #28]
 800462e:	005b      	lsls	r3, r3, #1
 8004630:	2203      	movs	r2, #3
 8004632:	fa02 f303 	lsl.w	r3, r2, r3
 8004636:	43db      	mvns	r3, r3
 8004638:	69ba      	ldr	r2, [r7, #24]
 800463a:	4013      	ands	r3, r2
 800463c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	005b      	lsls	r3, r3, #1
 8004646:	fa02 f303 	lsl.w	r3, r2, r3
 800464a:	69ba      	ldr	r2, [r7, #24]
 800464c:	4313      	orrs	r3, r2
 800464e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	69ba      	ldr	r2, [r7, #24]
 8004654:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800465c:	2201      	movs	r2, #1
 800465e:	69fb      	ldr	r3, [r7, #28]
 8004660:	fa02 f303 	lsl.w	r3, r2, r3
 8004664:	43db      	mvns	r3, r3
 8004666:	69ba      	ldr	r2, [r7, #24]
 8004668:	4013      	ands	r3, r2
 800466a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	091b      	lsrs	r3, r3, #4
 8004672:	f003 0201 	and.w	r2, r3, #1
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	fa02 f303 	lsl.w	r3, r2, r3
 800467c:	69ba      	ldr	r2, [r7, #24]
 800467e:	4313      	orrs	r3, r2
 8004680:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	69ba      	ldr	r2, [r7, #24]
 8004686:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	2203      	movs	r2, #3
 8004694:	fa02 f303 	lsl.w	r3, r2, r3
 8004698:	43db      	mvns	r3, r3
 800469a:	69ba      	ldr	r2, [r7, #24]
 800469c:	4013      	ands	r3, r2
 800469e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	689a      	ldr	r2, [r3, #8]
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	005b      	lsls	r3, r3, #1
 80046a8:	fa02 f303 	lsl.w	r3, r2, r3
 80046ac:	69ba      	ldr	r2, [r7, #24]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	2b02      	cmp	r3, #2
 80046be:	d003      	beq.n	80046c8 <HAL_GPIO_Init+0xfc>
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	685b      	ldr	r3, [r3, #4]
 80046c4:	2b12      	cmp	r3, #18
 80046c6:	d123      	bne.n	8004710 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046c8:	69fb      	ldr	r3, [r7, #28]
 80046ca:	08da      	lsrs	r2, r3, #3
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	3208      	adds	r2, #8
 80046d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046d6:	69fb      	ldr	r3, [r7, #28]
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	220f      	movs	r2, #15
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	691a      	ldr	r2, [r3, #16]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	f003 0307 	and.w	r3, r3, #7
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	4313      	orrs	r3, r2
 8004700:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004702:	69fb      	ldr	r3, [r7, #28]
 8004704:	08da      	lsrs	r2, r3, #3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	3208      	adds	r2, #8
 800470a:	69b9      	ldr	r1, [r7, #24]
 800470c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	005b      	lsls	r3, r3, #1
 800471a:	2203      	movs	r2, #3
 800471c:	fa02 f303 	lsl.w	r3, r2, r3
 8004720:	43db      	mvns	r3, r3
 8004722:	69ba      	ldr	r2, [r7, #24]
 8004724:	4013      	ands	r3, r2
 8004726:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004728:	683b      	ldr	r3, [r7, #0]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	f003 0203 	and.w	r2, r3, #3
 8004730:	69fb      	ldr	r3, [r7, #28]
 8004732:	005b      	lsls	r3, r3, #1
 8004734:	fa02 f303 	lsl.w	r3, r2, r3
 8004738:	69ba      	ldr	r2, [r7, #24]
 800473a:	4313      	orrs	r3, r2
 800473c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	685b      	ldr	r3, [r3, #4]
 8004748:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474c:	2b00      	cmp	r3, #0
 800474e:	f000 80ae 	beq.w	80048ae <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004752:	2300      	movs	r3, #0
 8004754:	60fb      	str	r3, [r7, #12]
 8004756:	4b5c      	ldr	r3, [pc, #368]	; (80048c8 <HAL_GPIO_Init+0x2fc>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	4a5b      	ldr	r2, [pc, #364]	; (80048c8 <HAL_GPIO_Init+0x2fc>)
 800475c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004760:	6453      	str	r3, [r2, #68]	; 0x44
 8004762:	4b59      	ldr	r3, [pc, #356]	; (80048c8 <HAL_GPIO_Init+0x2fc>)
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800476a:	60fb      	str	r3, [r7, #12]
 800476c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800476e:	4a57      	ldr	r2, [pc, #348]	; (80048cc <HAL_GPIO_Init+0x300>)
 8004770:	69fb      	ldr	r3, [r7, #28]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	3302      	adds	r3, #2
 8004776:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800477a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	f003 0303 	and.w	r3, r3, #3
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	220f      	movs	r2, #15
 8004786:	fa02 f303 	lsl.w	r3, r2, r3
 800478a:	43db      	mvns	r3, r3
 800478c:	69ba      	ldr	r2, [r7, #24]
 800478e:	4013      	ands	r3, r2
 8004790:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	4a4e      	ldr	r2, [pc, #312]	; (80048d0 <HAL_GPIO_Init+0x304>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d025      	beq.n	80047e6 <HAL_GPIO_Init+0x21a>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a4d      	ldr	r2, [pc, #308]	; (80048d4 <HAL_GPIO_Init+0x308>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d01f      	beq.n	80047e2 <HAL_GPIO_Init+0x216>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	4a4c      	ldr	r2, [pc, #304]	; (80048d8 <HAL_GPIO_Init+0x30c>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d019      	beq.n	80047de <HAL_GPIO_Init+0x212>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a4b      	ldr	r2, [pc, #300]	; (80048dc <HAL_GPIO_Init+0x310>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d013      	beq.n	80047da <HAL_GPIO_Init+0x20e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a4a      	ldr	r2, [pc, #296]	; (80048e0 <HAL_GPIO_Init+0x314>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d00d      	beq.n	80047d6 <HAL_GPIO_Init+0x20a>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a49      	ldr	r2, [pc, #292]	; (80048e4 <HAL_GPIO_Init+0x318>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d007      	beq.n	80047d2 <HAL_GPIO_Init+0x206>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a48      	ldr	r2, [pc, #288]	; (80048e8 <HAL_GPIO_Init+0x31c>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d101      	bne.n	80047ce <HAL_GPIO_Init+0x202>
 80047ca:	2306      	movs	r3, #6
 80047cc:	e00c      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047ce:	2307      	movs	r3, #7
 80047d0:	e00a      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047d2:	2305      	movs	r3, #5
 80047d4:	e008      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047d6:	2304      	movs	r3, #4
 80047d8:	e006      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047da:	2303      	movs	r3, #3
 80047dc:	e004      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047de:	2302      	movs	r3, #2
 80047e0:	e002      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <HAL_GPIO_Init+0x21c>
 80047e6:	2300      	movs	r3, #0
 80047e8:	69fa      	ldr	r2, [r7, #28]
 80047ea:	f002 0203 	and.w	r2, r2, #3
 80047ee:	0092      	lsls	r2, r2, #2
 80047f0:	4093      	lsls	r3, r2
 80047f2:	69ba      	ldr	r2, [r7, #24]
 80047f4:	4313      	orrs	r3, r2
 80047f6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f8:	4934      	ldr	r1, [pc, #208]	; (80048cc <HAL_GPIO_Init+0x300>)
 80047fa:	69fb      	ldr	r3, [r7, #28]
 80047fc:	089b      	lsrs	r3, r3, #2
 80047fe:	3302      	adds	r3, #2
 8004800:	69ba      	ldr	r2, [r7, #24]
 8004802:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004806:	4b39      	ldr	r3, [pc, #228]	; (80048ec <HAL_GPIO_Init+0x320>)
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	43db      	mvns	r3, r3
 8004810:	69ba      	ldr	r2, [r7, #24]
 8004812:	4013      	ands	r3, r2
 8004814:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004816:	683b      	ldr	r3, [r7, #0]
 8004818:	685b      	ldr	r3, [r3, #4]
 800481a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800481e:	2b00      	cmp	r3, #0
 8004820:	d003      	beq.n	800482a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	4313      	orrs	r3, r2
 8004828:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800482a:	4a30      	ldr	r2, [pc, #192]	; (80048ec <HAL_GPIO_Init+0x320>)
 800482c:	69bb      	ldr	r3, [r7, #24]
 800482e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004830:	4b2e      	ldr	r3, [pc, #184]	; (80048ec <HAL_GPIO_Init+0x320>)
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	43db      	mvns	r3, r3
 800483a:	69ba      	ldr	r2, [r7, #24]
 800483c:	4013      	ands	r3, r2
 800483e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004848:	2b00      	cmp	r3, #0
 800484a:	d003      	beq.n	8004854 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	4313      	orrs	r3, r2
 8004852:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004854:	4a25      	ldr	r2, [pc, #148]	; (80048ec <HAL_GPIO_Init+0x320>)
 8004856:	69bb      	ldr	r3, [r7, #24]
 8004858:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800485a:	4b24      	ldr	r3, [pc, #144]	; (80048ec <HAL_GPIO_Init+0x320>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	43db      	mvns	r3, r3
 8004864:	69ba      	ldr	r2, [r7, #24]
 8004866:	4013      	ands	r3, r2
 8004868:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004872:	2b00      	cmp	r3, #0
 8004874:	d003      	beq.n	800487e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	4313      	orrs	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800487e:	4a1b      	ldr	r2, [pc, #108]	; (80048ec <HAL_GPIO_Init+0x320>)
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004884:	4b19      	ldr	r3, [pc, #100]	; (80048ec <HAL_GPIO_Init+0x320>)
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	43db      	mvns	r3, r3
 800488e:	69ba      	ldr	r2, [r7, #24]
 8004890:	4013      	ands	r3, r2
 8004892:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800489c:	2b00      	cmp	r3, #0
 800489e:	d003      	beq.n	80048a8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80048a0:	69ba      	ldr	r2, [r7, #24]
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048a8:	4a10      	ldr	r2, [pc, #64]	; (80048ec <HAL_GPIO_Init+0x320>)
 80048aa:	69bb      	ldr	r3, [r7, #24]
 80048ac:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	3301      	adds	r3, #1
 80048b2:	61fb      	str	r3, [r7, #28]
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	2b0f      	cmp	r3, #15
 80048b8:	f67f ae96 	bls.w	80045e8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048bc:	bf00      	nop
 80048be:	3724      	adds	r7, #36	; 0x24
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40013800 	.word	0x40013800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40020400 	.word	0x40020400
 80048d8:	40020800 	.word	0x40020800
 80048dc:	40020c00 	.word	0x40020c00
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40021400 	.word	0x40021400
 80048e8:	40021800 	.word	0x40021800
 80048ec:	40013c00 	.word	0x40013c00

080048f0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
 80048f8:	460b      	mov	r3, r1
 80048fa:	807b      	strh	r3, [r7, #2]
 80048fc:	4613      	mov	r3, r2
 80048fe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004900:	787b      	ldrb	r3, [r7, #1]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d003      	beq.n	800490e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004906:	887a      	ldrh	r2, [r7, #2]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800490c:	e003      	b.n	8004916 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800490e:	887b      	ldrh	r3, [r7, #2]
 8004910:	041a      	lsls	r2, r3, #16
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	619a      	str	r2, [r3, #24]
}
 8004916:	bf00      	nop
 8004918:	370c      	adds	r7, #12
 800491a:	46bd      	mov	sp, r7
 800491c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004920:	4770      	bx	lr

08004922 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004922:	b480      	push	{r7}
 8004924:	b083      	sub	sp, #12
 8004926:	af00      	add	r7, sp, #0
 8004928:	6078      	str	r0, [r7, #4]
 800492a:	460b      	mov	r3, r1
 800492c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	695a      	ldr	r2, [r3, #20]
 8004932:	887b      	ldrh	r3, [r7, #2]
 8004934:	401a      	ands	r2, r3
 8004936:	887b      	ldrh	r3, [r7, #2]
 8004938:	429a      	cmp	r2, r3
 800493a:	d104      	bne.n	8004946 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800493c:	887b      	ldrh	r3, [r7, #2]
 800493e:	041a      	lsls	r2, r3, #16
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8004944:	e002      	b.n	800494c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8004946:	887a      	ldrh	r2, [r7, #2]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	619a      	str	r2, [r3, #24]
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	b082      	sub	sp, #8
 800495c:	af00      	add	r7, sp, #0
 800495e:	4603      	mov	r3, r0
 8004960:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004962:	4b08      	ldr	r3, [pc, #32]	; (8004984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004964:	695a      	ldr	r2, [r3, #20]
 8004966:	88fb      	ldrh	r3, [r7, #6]
 8004968:	4013      	ands	r3, r2
 800496a:	2b00      	cmp	r3, #0
 800496c:	d006      	beq.n	800497c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800496e:	4a05      	ldr	r2, [pc, #20]	; (8004984 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004970:	88fb      	ldrh	r3, [r7, #6]
 8004972:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004974:	88fb      	ldrh	r3, [r7, #6]
 8004976:	4618      	mov	r0, r3
 8004978:	f7fc fbee 	bl	8001158 <HAL_GPIO_EXTI_Callback>
  }
}
 800497c:	bf00      	nop
 800497e:	3708      	adds	r7, #8
 8004980:	46bd      	mov	sp, r7
 8004982:	bd80      	pop	{r7, pc}
 8004984:	40013c00 	.word	0x40013c00

08004988 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
 8004990:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d101      	bne.n	800499c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004998:	2301      	movs	r3, #1
 800499a:	e0cc      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800499c:	4b68      	ldr	r3, [pc, #416]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f003 030f 	and.w	r3, r3, #15
 80049a4:	683a      	ldr	r2, [r7, #0]
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d90c      	bls.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049aa:	4b65      	ldr	r3, [pc, #404]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049ac:	683a      	ldr	r2, [r7, #0]
 80049ae:	b2d2      	uxtb	r2, r2
 80049b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b2:	4b63      	ldr	r3, [pc, #396]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f003 030f 	and.w	r3, r3, #15
 80049ba:	683a      	ldr	r2, [r7, #0]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d001      	beq.n	80049c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80049c0:	2301      	movs	r3, #1
 80049c2:	e0b8      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f003 0302 	and.w	r3, r3, #2
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d020      	beq.n	8004a12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 0304 	and.w	r3, r3, #4
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d005      	beq.n	80049e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80049dc:	4b59      	ldr	r3, [pc, #356]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	4a58      	ldr	r2, [pc, #352]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80049e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d005      	beq.n	8004a00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80049f4:	4b53      	ldr	r3, [pc, #332]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	4a52      	ldr	r2, [pc, #328]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 80049fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80049fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a00:	4b50      	ldr	r3, [pc, #320]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	494d      	ldr	r1, [pc, #308]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0301 	and.w	r3, r3, #1
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d044      	beq.n	8004aa8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d107      	bne.n	8004a36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a26:	4b47      	ldr	r3, [pc, #284]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d119      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a32:	2301      	movs	r3, #1
 8004a34:	e07f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	2b02      	cmp	r3, #2
 8004a3c:	d003      	beq.n	8004a46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d107      	bne.n	8004a56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a46:	4b3f      	ldr	r3, [pc, #252]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d109      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e06f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a56:	4b3b      	ldr	r3, [pc, #236]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0302 	and.w	r3, r3, #2
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d101      	bne.n	8004a66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a62:	2301      	movs	r3, #1
 8004a64:	e067      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004a66:	4b37      	ldr	r3, [pc, #220]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a68:	689b      	ldr	r3, [r3, #8]
 8004a6a:	f023 0203 	bic.w	r2, r3, #3
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	685b      	ldr	r3, [r3, #4]
 8004a72:	4934      	ldr	r1, [pc, #208]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a74:	4313      	orrs	r3, r2
 8004a76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004a78:	f7fe fdf8 	bl	800366c <HAL_GetTick>
 8004a7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a7e:	e00a      	b.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004a80:	f7fe fdf4 	bl	800366c <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a8e:	4293      	cmp	r3, r2
 8004a90:	d901      	bls.n	8004a96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004a92:	2303      	movs	r3, #3
 8004a94:	e04f      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004a98:	689b      	ldr	r3, [r3, #8]
 8004a9a:	f003 020c 	and.w	r2, r3, #12
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d1eb      	bne.n	8004a80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f003 030f 	and.w	r3, r3, #15
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	429a      	cmp	r2, r3
 8004ab4:	d20c      	bcs.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ab6:	4b22      	ldr	r3, [pc, #136]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ab8:	683a      	ldr	r2, [r7, #0]
 8004aba:	b2d2      	uxtb	r2, r2
 8004abc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004abe:	4b20      	ldr	r3, [pc, #128]	; (8004b40 <HAL_RCC_ClockConfig+0x1b8>)
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f003 030f 	and.w	r3, r3, #15
 8004ac6:	683a      	ldr	r2, [r7, #0]
 8004ac8:	429a      	cmp	r2, r3
 8004aca:	d001      	beq.n	8004ad0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004acc:	2301      	movs	r3, #1
 8004ace:	e032      	b.n	8004b36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 0304 	and.w	r3, r3, #4
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d008      	beq.n	8004aee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004adc:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	68db      	ldr	r3, [r3, #12]
 8004ae8:	4916      	ldr	r1, [pc, #88]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004aea:	4313      	orrs	r3, r2
 8004aec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f003 0308 	and.w	r3, r3, #8
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004afa:	4b12      	ldr	r3, [pc, #72]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	689b      	ldr	r3, [r3, #8]
 8004afe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	691b      	ldr	r3, [r3, #16]
 8004b06:	00db      	lsls	r3, r3, #3
 8004b08:	490e      	ldr	r1, [pc, #56]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004b0e:	f000 f855 	bl	8004bbc <HAL_RCC_GetSysClockFreq>
 8004b12:	4601      	mov	r1, r0
 8004b14:	4b0b      	ldr	r3, [pc, #44]	; (8004b44 <HAL_RCC_ClockConfig+0x1bc>)
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	091b      	lsrs	r3, r3, #4
 8004b1a:	f003 030f 	and.w	r3, r3, #15
 8004b1e:	4a0a      	ldr	r2, [pc, #40]	; (8004b48 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	5cd3      	ldrb	r3, [r2, r3]
 8004b22:	fa21 f303 	lsr.w	r3, r1, r3
 8004b26:	4a09      	ldr	r2, [pc, #36]	; (8004b4c <HAL_RCC_ClockConfig+0x1c4>)
 8004b28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004b2a:	4b09      	ldr	r3, [pc, #36]	; (8004b50 <HAL_RCC_ClockConfig+0x1c8>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7fe fd58 	bl	80035e4 <HAL_InitTick>

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
}
 8004b36:	4618      	mov	r0, r3
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	40023c00 	.word	0x40023c00
 8004b44:	40023800 	.word	0x40023800
 8004b48:	08007f8c 	.word	0x08007f8c
 8004b4c:	20000094 	.word	0x20000094
 8004b50:	20000098 	.word	0x20000098

08004b54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b54:	b480      	push	{r7}
 8004b56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b58:	4b03      	ldr	r3, [pc, #12]	; (8004b68 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5a:	681b      	ldr	r3, [r3, #0]
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr
 8004b66:	bf00      	nop
 8004b68:	20000094 	.word	0x20000094

08004b6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b70:	f7ff fff0 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b74:	4601      	mov	r1, r0
 8004b76:	4b05      	ldr	r3, [pc, #20]	; (8004b8c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	0a9b      	lsrs	r3, r3, #10
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	4a03      	ldr	r2, [pc, #12]	; (8004b90 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b82:	5cd3      	ldrb	r3, [r2, r3]
 8004b84:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	40023800 	.word	0x40023800
 8004b90:	08007f9c 	.word	0x08007f9c

08004b94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b98:	f7ff ffdc 	bl	8004b54 <HAL_RCC_GetHCLKFreq>
 8004b9c:	4601      	mov	r1, r0
 8004b9e:	4b05      	ldr	r3, [pc, #20]	; (8004bb4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	0b5b      	lsrs	r3, r3, #13
 8004ba4:	f003 0307 	and.w	r3, r3, #7
 8004ba8:	4a03      	ldr	r2, [pc, #12]	; (8004bb8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004baa:	5cd3      	ldrb	r3, [r2, r3]
 8004bac:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	bd80      	pop	{r7, pc}
 8004bb4:	40023800 	.word	0x40023800
 8004bb8:	08007f9c 	.word	0x08007f9c

08004bbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004bbe:	b087      	sub	sp, #28
 8004bc0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd6:	4bc6      	ldr	r3, [pc, #792]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004bd8:	689b      	ldr	r3, [r3, #8]
 8004bda:	f003 030c 	and.w	r3, r3, #12
 8004bde:	2b0c      	cmp	r3, #12
 8004be0:	f200 817e 	bhi.w	8004ee0 <HAL_RCC_GetSysClockFreq+0x324>
 8004be4:	a201      	add	r2, pc, #4	; (adr r2, 8004bec <HAL_RCC_GetSysClockFreq+0x30>)
 8004be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bea:	bf00      	nop
 8004bec:	08004c21 	.word	0x08004c21
 8004bf0:	08004ee1 	.word	0x08004ee1
 8004bf4:	08004ee1 	.word	0x08004ee1
 8004bf8:	08004ee1 	.word	0x08004ee1
 8004bfc:	08004c27 	.word	0x08004c27
 8004c00:	08004ee1 	.word	0x08004ee1
 8004c04:	08004ee1 	.word	0x08004ee1
 8004c08:	08004ee1 	.word	0x08004ee1
 8004c0c:	08004c2d 	.word	0x08004c2d
 8004c10:	08004ee1 	.word	0x08004ee1
 8004c14:	08004ee1 	.word	0x08004ee1
 8004c18:	08004ee1 	.word	0x08004ee1
 8004c1c:	08004d89 	.word	0x08004d89
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c20:	4bb4      	ldr	r3, [pc, #720]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004c22:	613b      	str	r3, [r7, #16]
       break;
 8004c24:	e15f      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c26:	4bb4      	ldr	r3, [pc, #720]	; (8004ef8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8004c28:	613b      	str	r3, [r7, #16]
      break;
 8004c2a:	e15c      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c2c:	4bb0      	ldr	r3, [pc, #704]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004c34:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c36:	4bae      	ldr	r3, [pc, #696]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d04a      	beq.n	8004cd8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c42:	4bab      	ldr	r3, [pc, #684]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	099b      	lsrs	r3, r3, #6
 8004c48:	f04f 0400 	mov.w	r4, #0
 8004c4c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004c50:	f04f 0200 	mov.w	r2, #0
 8004c54:	ea03 0501 	and.w	r5, r3, r1
 8004c58:	ea04 0602 	and.w	r6, r4, r2
 8004c5c:	4629      	mov	r1, r5
 8004c5e:	4632      	mov	r2, r6
 8004c60:	f04f 0300 	mov.w	r3, #0
 8004c64:	f04f 0400 	mov.w	r4, #0
 8004c68:	0154      	lsls	r4, r2, #5
 8004c6a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004c6e:	014b      	lsls	r3, r1, #5
 8004c70:	4619      	mov	r1, r3
 8004c72:	4622      	mov	r2, r4
 8004c74:	1b49      	subs	r1, r1, r5
 8004c76:	eb62 0206 	sbc.w	r2, r2, r6
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	f04f 0400 	mov.w	r4, #0
 8004c82:	0194      	lsls	r4, r2, #6
 8004c84:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004c88:	018b      	lsls	r3, r1, #6
 8004c8a:	1a5b      	subs	r3, r3, r1
 8004c8c:	eb64 0402 	sbc.w	r4, r4, r2
 8004c90:	f04f 0100 	mov.w	r1, #0
 8004c94:	f04f 0200 	mov.w	r2, #0
 8004c98:	00e2      	lsls	r2, r4, #3
 8004c9a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004c9e:	00d9      	lsls	r1, r3, #3
 8004ca0:	460b      	mov	r3, r1
 8004ca2:	4614      	mov	r4, r2
 8004ca4:	195b      	adds	r3, r3, r5
 8004ca6:	eb44 0406 	adc.w	r4, r4, r6
 8004caa:	f04f 0100 	mov.w	r1, #0
 8004cae:	f04f 0200 	mov.w	r2, #0
 8004cb2:	0262      	lsls	r2, r4, #9
 8004cb4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004cb8:	0259      	lsls	r1, r3, #9
 8004cba:	460b      	mov	r3, r1
 8004cbc:	4614      	mov	r4, r2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	4621      	mov	r1, r4
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f04f 0400 	mov.w	r4, #0
 8004cc8:	461a      	mov	r2, r3
 8004cca:	4623      	mov	r3, r4
 8004ccc:	f7fb ffbe 	bl	8000c4c <__aeabi_uldivmod>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	460c      	mov	r4, r1
 8004cd4:	617b      	str	r3, [r7, #20]
 8004cd6:	e049      	b.n	8004d6c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cd8:	4b85      	ldr	r3, [pc, #532]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	099b      	lsrs	r3, r3, #6
 8004cde:	f04f 0400 	mov.w	r4, #0
 8004ce2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	ea03 0501 	and.w	r5, r3, r1
 8004cee:	ea04 0602 	and.w	r6, r4, r2
 8004cf2:	4629      	mov	r1, r5
 8004cf4:	4632      	mov	r2, r6
 8004cf6:	f04f 0300 	mov.w	r3, #0
 8004cfa:	f04f 0400 	mov.w	r4, #0
 8004cfe:	0154      	lsls	r4, r2, #5
 8004d00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004d04:	014b      	lsls	r3, r1, #5
 8004d06:	4619      	mov	r1, r3
 8004d08:	4622      	mov	r2, r4
 8004d0a:	1b49      	subs	r1, r1, r5
 8004d0c:	eb62 0206 	sbc.w	r2, r2, r6
 8004d10:	f04f 0300 	mov.w	r3, #0
 8004d14:	f04f 0400 	mov.w	r4, #0
 8004d18:	0194      	lsls	r4, r2, #6
 8004d1a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004d1e:	018b      	lsls	r3, r1, #6
 8004d20:	1a5b      	subs	r3, r3, r1
 8004d22:	eb64 0402 	sbc.w	r4, r4, r2
 8004d26:	f04f 0100 	mov.w	r1, #0
 8004d2a:	f04f 0200 	mov.w	r2, #0
 8004d2e:	00e2      	lsls	r2, r4, #3
 8004d30:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004d34:	00d9      	lsls	r1, r3, #3
 8004d36:	460b      	mov	r3, r1
 8004d38:	4614      	mov	r4, r2
 8004d3a:	195b      	adds	r3, r3, r5
 8004d3c:	eb44 0406 	adc.w	r4, r4, r6
 8004d40:	f04f 0100 	mov.w	r1, #0
 8004d44:	f04f 0200 	mov.w	r2, #0
 8004d48:	02a2      	lsls	r2, r4, #10
 8004d4a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004d4e:	0299      	lsls	r1, r3, #10
 8004d50:	460b      	mov	r3, r1
 8004d52:	4614      	mov	r4, r2
 8004d54:	4618      	mov	r0, r3
 8004d56:	4621      	mov	r1, r4
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f04f 0400 	mov.w	r4, #0
 8004d5e:	461a      	mov	r2, r3
 8004d60:	4623      	mov	r3, r4
 8004d62:	f7fb ff73 	bl	8000c4c <__aeabi_uldivmod>
 8004d66:	4603      	mov	r3, r0
 8004d68:	460c      	mov	r4, r1
 8004d6a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004d6c:	4b60      	ldr	r3, [pc, #384]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	0c1b      	lsrs	r3, r3, #16
 8004d72:	f003 0303 	and.w	r3, r3, #3
 8004d76:	3301      	adds	r3, #1
 8004d78:	005b      	lsls	r3, r3, #1
 8004d7a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8004d7c:	697a      	ldr	r2, [r7, #20]
 8004d7e:	68bb      	ldr	r3, [r7, #8]
 8004d80:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d84:	613b      	str	r3, [r7, #16]
      break;
 8004d86:	e0ae      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d88:	4b59      	ldr	r3, [pc, #356]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d90:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004d92:	4b57      	ldr	r3, [pc, #348]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d04a      	beq.n	8004e34 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d9e:	4b54      	ldr	r3, [pc, #336]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	099b      	lsrs	r3, r3, #6
 8004da4:	f04f 0400 	mov.w	r4, #0
 8004da8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004dac:	f04f 0200 	mov.w	r2, #0
 8004db0:	ea03 0501 	and.w	r5, r3, r1
 8004db4:	ea04 0602 	and.w	r6, r4, r2
 8004db8:	4629      	mov	r1, r5
 8004dba:	4632      	mov	r2, r6
 8004dbc:	f04f 0300 	mov.w	r3, #0
 8004dc0:	f04f 0400 	mov.w	r4, #0
 8004dc4:	0154      	lsls	r4, r2, #5
 8004dc6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004dca:	014b      	lsls	r3, r1, #5
 8004dcc:	4619      	mov	r1, r3
 8004dce:	4622      	mov	r2, r4
 8004dd0:	1b49      	subs	r1, r1, r5
 8004dd2:	eb62 0206 	sbc.w	r2, r2, r6
 8004dd6:	f04f 0300 	mov.w	r3, #0
 8004dda:	f04f 0400 	mov.w	r4, #0
 8004dde:	0194      	lsls	r4, r2, #6
 8004de0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004de4:	018b      	lsls	r3, r1, #6
 8004de6:	1a5b      	subs	r3, r3, r1
 8004de8:	eb64 0402 	sbc.w	r4, r4, r2
 8004dec:	f04f 0100 	mov.w	r1, #0
 8004df0:	f04f 0200 	mov.w	r2, #0
 8004df4:	00e2      	lsls	r2, r4, #3
 8004df6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004dfa:	00d9      	lsls	r1, r3, #3
 8004dfc:	460b      	mov	r3, r1
 8004dfe:	4614      	mov	r4, r2
 8004e00:	195b      	adds	r3, r3, r5
 8004e02:	eb44 0406 	adc.w	r4, r4, r6
 8004e06:	f04f 0100 	mov.w	r1, #0
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	0262      	lsls	r2, r4, #9
 8004e10:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004e14:	0259      	lsls	r1, r3, #9
 8004e16:	460b      	mov	r3, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	4621      	mov	r1, r4
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f04f 0400 	mov.w	r4, #0
 8004e24:	461a      	mov	r2, r3
 8004e26:	4623      	mov	r3, r4
 8004e28:	f7fb ff10 	bl	8000c4c <__aeabi_uldivmod>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	460c      	mov	r4, r1
 8004e30:	617b      	str	r3, [r7, #20]
 8004e32:	e049      	b.n	8004ec8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e34:	4b2e      	ldr	r3, [pc, #184]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	099b      	lsrs	r3, r3, #6
 8004e3a:	f04f 0400 	mov.w	r4, #0
 8004e3e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004e42:	f04f 0200 	mov.w	r2, #0
 8004e46:	ea03 0501 	and.w	r5, r3, r1
 8004e4a:	ea04 0602 	and.w	r6, r4, r2
 8004e4e:	4629      	mov	r1, r5
 8004e50:	4632      	mov	r2, r6
 8004e52:	f04f 0300 	mov.w	r3, #0
 8004e56:	f04f 0400 	mov.w	r4, #0
 8004e5a:	0154      	lsls	r4, r2, #5
 8004e5c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004e60:	014b      	lsls	r3, r1, #5
 8004e62:	4619      	mov	r1, r3
 8004e64:	4622      	mov	r2, r4
 8004e66:	1b49      	subs	r1, r1, r5
 8004e68:	eb62 0206 	sbc.w	r2, r2, r6
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	f04f 0400 	mov.w	r4, #0
 8004e74:	0194      	lsls	r4, r2, #6
 8004e76:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8004e7a:	018b      	lsls	r3, r1, #6
 8004e7c:	1a5b      	subs	r3, r3, r1
 8004e7e:	eb64 0402 	sbc.w	r4, r4, r2
 8004e82:	f04f 0100 	mov.w	r1, #0
 8004e86:	f04f 0200 	mov.w	r2, #0
 8004e8a:	00e2      	lsls	r2, r4, #3
 8004e8c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004e90:	00d9      	lsls	r1, r3, #3
 8004e92:	460b      	mov	r3, r1
 8004e94:	4614      	mov	r4, r2
 8004e96:	195b      	adds	r3, r3, r5
 8004e98:	eb44 0406 	adc.w	r4, r4, r6
 8004e9c:	f04f 0100 	mov.w	r1, #0
 8004ea0:	f04f 0200 	mov.w	r2, #0
 8004ea4:	02a2      	lsls	r2, r4, #10
 8004ea6:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8004eaa:	0299      	lsls	r1, r3, #10
 8004eac:	460b      	mov	r3, r1
 8004eae:	4614      	mov	r4, r2
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f04f 0400 	mov.w	r4, #0
 8004eba:	461a      	mov	r2, r3
 8004ebc:	4623      	mov	r3, r4
 8004ebe:	f7fb fec5 	bl	8000c4c <__aeabi_uldivmod>
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	460c      	mov	r4, r1
 8004ec6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8004ec8:	4b09      	ldr	r3, [pc, #36]	; (8004ef0 <HAL_RCC_GetSysClockFreq+0x334>)
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	0f1b      	lsrs	r3, r3, #28
 8004ece:	f003 0307 	and.w	r3, r3, #7
 8004ed2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004edc:	613b      	str	r3, [r7, #16]
      break;
 8004ede:	e002      	b.n	8004ee6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004ee0:	4b04      	ldr	r3, [pc, #16]	; (8004ef4 <HAL_RCC_GetSysClockFreq+0x338>)
 8004ee2:	613b      	str	r3, [r7, #16]
      break;
 8004ee4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004ee6:	693b      	ldr	r3, [r7, #16]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	371c      	adds	r7, #28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ef0:	40023800 	.word	0x40023800
 8004ef4:	00f42400 	.word	0x00f42400
 8004ef8:	007a1200 	.word	0x007a1200

08004efc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b086      	sub	sp, #24
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004f04:	2300      	movs	r3, #0
 8004f06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0301 	and.w	r3, r3, #1
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	f000 8083 	beq.w	800501c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f16:	4b95      	ldr	r3, [pc, #596]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f18:	689b      	ldr	r3, [r3, #8]
 8004f1a:	f003 030c 	and.w	r3, r3, #12
 8004f1e:	2b04      	cmp	r3, #4
 8004f20:	d019      	beq.n	8004f56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f22:	4b92      	ldr	r3, [pc, #584]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	d106      	bne.n	8004f3c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f2e:	4b8f      	ldr	r3, [pc, #572]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f36:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f3a:	d00c      	beq.n	8004f56 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f3c:	4b8b      	ldr	r3, [pc, #556]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8004f44:	2b0c      	cmp	r3, #12
 8004f46:	d112      	bne.n	8004f6e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004f48:	4b88      	ldr	r3, [pc, #544]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004f54:	d10b      	bne.n	8004f6e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f56:	4b85      	ldr	r3, [pc, #532]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d05b      	beq.n	800501a <HAL_RCC_OscConfig+0x11e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d157      	bne.n	800501a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e216      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f76:	d106      	bne.n	8004f86 <HAL_RCC_OscConfig+0x8a>
 8004f78:	4b7c      	ldr	r3, [pc, #496]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a7b      	ldr	r2, [pc, #492]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f7e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f82:	6013      	str	r3, [r2, #0]
 8004f84:	e01d      	b.n	8004fc2 <HAL_RCC_OscConfig+0xc6>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	685b      	ldr	r3, [r3, #4]
 8004f8a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f8e:	d10c      	bne.n	8004faa <HAL_RCC_OscConfig+0xae>
 8004f90:	4b76      	ldr	r3, [pc, #472]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	4a75      	ldr	r2, [pc, #468]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f96:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f9a:	6013      	str	r3, [r2, #0]
 8004f9c:	4b73      	ldr	r3, [pc, #460]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a72      	ldr	r2, [pc, #456]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004fa6:	6013      	str	r3, [r2, #0]
 8004fa8:	e00b      	b.n	8004fc2 <HAL_RCC_OscConfig+0xc6>
 8004faa:	4b70      	ldr	r3, [pc, #448]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a6f      	ldr	r2, [pc, #444]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fb0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004fb4:	6013      	str	r3, [r2, #0]
 8004fb6:	4b6d      	ldr	r3, [pc, #436]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	4a6c      	ldr	r2, [pc, #432]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004fc0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	685b      	ldr	r3, [r3, #4]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d013      	beq.n	8004ff2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fca:	f7fe fb4f 	bl	800366c <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fd0:	e008      	b.n	8004fe4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004fd2:	f7fe fb4b 	bl	800366c <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b64      	cmp	r3, #100	; 0x64
 8004fde:	d901      	bls.n	8004fe4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e1db      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004fe4:	4b61      	ldr	r3, [pc, #388]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0f0      	beq.n	8004fd2 <HAL_RCC_OscConfig+0xd6>
 8004ff0:	e014      	b.n	800501c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ff2:	f7fe fb3b 	bl	800366c <HAL_GetTick>
 8004ff6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ff8:	e008      	b.n	800500c <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004ffa:	f7fe fb37 	bl	800366c <HAL_GetTick>
 8004ffe:	4602      	mov	r2, r0
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	1ad3      	subs	r3, r2, r3
 8005004:	2b64      	cmp	r3, #100	; 0x64
 8005006:	d901      	bls.n	800500c <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8005008:	2303      	movs	r3, #3
 800500a:	e1c7      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800500c:	4b57      	ldr	r3, [pc, #348]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005014:	2b00      	cmp	r3, #0
 8005016:	d1f0      	bne.n	8004ffa <HAL_RCC_OscConfig+0xfe>
 8005018:	e000      	b.n	800501c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800501a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f003 0302 	and.w	r3, r3, #2
 8005024:	2b00      	cmp	r3, #0
 8005026:	d06f      	beq.n	8005108 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8005028:	4b50      	ldr	r3, [pc, #320]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	f003 030c 	and.w	r3, r3, #12
 8005030:	2b00      	cmp	r3, #0
 8005032:	d017      	beq.n	8005064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005034:	4b4d      	ldr	r3, [pc, #308]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800503c:	2b08      	cmp	r3, #8
 800503e:	d105      	bne.n	800504c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005040:	4b4a      	ldr	r3, [pc, #296]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d00b      	beq.n	8005064 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800504c:	4b47      	ldr	r3, [pc, #284]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800504e:	689b      	ldr	r3, [r3, #8]
 8005050:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8005054:	2b0c      	cmp	r3, #12
 8005056:	d11c      	bne.n	8005092 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005058:	4b44      	ldr	r3, [pc, #272]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005060:	2b00      	cmp	r3, #0
 8005062:	d116      	bne.n	8005092 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005064:	4b41      	ldr	r3, [pc, #260]	; (800516c <HAL_RCC_OscConfig+0x270>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f003 0302 	and.w	r3, r3, #2
 800506c:	2b00      	cmp	r3, #0
 800506e:	d005      	beq.n	800507c <HAL_RCC_OscConfig+0x180>
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	68db      	ldr	r3, [r3, #12]
 8005074:	2b01      	cmp	r3, #1
 8005076:	d001      	beq.n	800507c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e18f      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800507c:	4b3b      	ldr	r3, [pc, #236]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	691b      	ldr	r3, [r3, #16]
 8005088:	00db      	lsls	r3, r3, #3
 800508a:	4938      	ldr	r1, [pc, #224]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800508c:	4313      	orrs	r3, r2
 800508e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005090:	e03a      	b.n	8005108 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	68db      	ldr	r3, [r3, #12]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d020      	beq.n	80050dc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800509a:	4b35      	ldr	r3, [pc, #212]	; (8005170 <HAL_RCC_OscConfig+0x274>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050a0:	f7fe fae4 	bl	800366c <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050a8:	f7fe fae0 	bl	800366c <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e170      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80050c6:	4b29      	ldr	r3, [pc, #164]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	00db      	lsls	r3, r3, #3
 80050d4:	4925      	ldr	r1, [pc, #148]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050d6:	4313      	orrs	r3, r2
 80050d8:	600b      	str	r3, [r1, #0]
 80050da:	e015      	b.n	8005108 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80050dc:	4b24      	ldr	r3, [pc, #144]	; (8005170 <HAL_RCC_OscConfig+0x274>)
 80050de:	2200      	movs	r2, #0
 80050e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80050e2:	f7fe fac3 	bl	800366c <HAL_GetTick>
 80050e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050e8:	e008      	b.n	80050fc <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ea:	f7fe fabf 	bl	800366c <HAL_GetTick>
 80050ee:	4602      	mov	r2, r0
 80050f0:	693b      	ldr	r3, [r7, #16]
 80050f2:	1ad3      	subs	r3, r2, r3
 80050f4:	2b02      	cmp	r3, #2
 80050f6:	d901      	bls.n	80050fc <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80050f8:	2303      	movs	r3, #3
 80050fa:	e14f      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050fc:	4b1b      	ldr	r3, [pc, #108]	; (800516c <HAL_RCC_OscConfig+0x270>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f003 0302 	and.w	r3, r3, #2
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f0      	bne.n	80050ea <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f003 0308 	and.w	r3, r3, #8
 8005110:	2b00      	cmp	r3, #0
 8005112:	d037      	beq.n	8005184 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	695b      	ldr	r3, [r3, #20]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d016      	beq.n	800514a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800511c:	4b15      	ldr	r3, [pc, #84]	; (8005174 <HAL_RCC_OscConfig+0x278>)
 800511e:	2201      	movs	r2, #1
 8005120:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005122:	f7fe faa3 	bl	800366c <HAL_GetTick>
 8005126:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005128:	e008      	b.n	800513c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800512a:	f7fe fa9f 	bl	800366c <HAL_GetTick>
 800512e:	4602      	mov	r2, r0
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	1ad3      	subs	r3, r2, r3
 8005134:	2b02      	cmp	r3, #2
 8005136:	d901      	bls.n	800513c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005138:	2303      	movs	r3, #3
 800513a:	e12f      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800513c:	4b0b      	ldr	r3, [pc, #44]	; (800516c <HAL_RCC_OscConfig+0x270>)
 800513e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005140:	f003 0302 	and.w	r3, r3, #2
 8005144:	2b00      	cmp	r3, #0
 8005146:	d0f0      	beq.n	800512a <HAL_RCC_OscConfig+0x22e>
 8005148:	e01c      	b.n	8005184 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800514a:	4b0a      	ldr	r3, [pc, #40]	; (8005174 <HAL_RCC_OscConfig+0x278>)
 800514c:	2200      	movs	r2, #0
 800514e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005150:	f7fe fa8c 	bl	800366c <HAL_GetTick>
 8005154:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005156:	e00f      	b.n	8005178 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005158:	f7fe fa88 	bl	800366c <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d908      	bls.n	8005178 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8005166:	2303      	movs	r3, #3
 8005168:	e118      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
 800516a:	bf00      	nop
 800516c:	40023800 	.word	0x40023800
 8005170:	42470000 	.word	0x42470000
 8005174:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005178:	4b8a      	ldr	r3, [pc, #552]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800517a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800517c:	f003 0302 	and.w	r3, r3, #2
 8005180:	2b00      	cmp	r3, #0
 8005182:	d1e9      	bne.n	8005158 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	f003 0304 	and.w	r3, r3, #4
 800518c:	2b00      	cmp	r3, #0
 800518e:	f000 8097 	beq.w	80052c0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005192:	2300      	movs	r3, #0
 8005194:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005196:	4b83      	ldr	r3, [pc, #524]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800519a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d10f      	bne.n	80051c2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80051a2:	2300      	movs	r3, #0
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	4b7f      	ldr	r3, [pc, #508]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80051a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051aa:	4a7e      	ldr	r2, [pc, #504]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80051ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051b0:	6413      	str	r3, [r2, #64]	; 0x40
 80051b2:	4b7c      	ldr	r3, [pc, #496]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80051b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80051be:	2301      	movs	r3, #1
 80051c0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051c2:	4b79      	ldr	r3, [pc, #484]	; (80053a8 <HAL_RCC_OscConfig+0x4ac>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d118      	bne.n	8005200 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80051ce:	4b76      	ldr	r3, [pc, #472]	; (80053a8 <HAL_RCC_OscConfig+0x4ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	4a75      	ldr	r2, [pc, #468]	; (80053a8 <HAL_RCC_OscConfig+0x4ac>)
 80051d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051d8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80051da:	f7fe fa47 	bl	800366c <HAL_GetTick>
 80051de:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051e0:	e008      	b.n	80051f4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80051e2:	f7fe fa43 	bl	800366c <HAL_GetTick>
 80051e6:	4602      	mov	r2, r0
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	1ad3      	subs	r3, r2, r3
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d901      	bls.n	80051f4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80051f0:	2303      	movs	r3, #3
 80051f2:	e0d3      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80051f4:	4b6c      	ldr	r3, [pc, #432]	; (80053a8 <HAL_RCC_OscConfig+0x4ac>)
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d0f0      	beq.n	80051e2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	689b      	ldr	r3, [r3, #8]
 8005204:	2b01      	cmp	r3, #1
 8005206:	d106      	bne.n	8005216 <HAL_RCC_OscConfig+0x31a>
 8005208:	4b66      	ldr	r3, [pc, #408]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800520a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800520c:	4a65      	ldr	r2, [pc, #404]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800520e:	f043 0301 	orr.w	r3, r3, #1
 8005212:	6713      	str	r3, [r2, #112]	; 0x70
 8005214:	e01c      	b.n	8005250 <HAL_RCC_OscConfig+0x354>
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	689b      	ldr	r3, [r3, #8]
 800521a:	2b05      	cmp	r3, #5
 800521c:	d10c      	bne.n	8005238 <HAL_RCC_OscConfig+0x33c>
 800521e:	4b61      	ldr	r3, [pc, #388]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	4a60      	ldr	r2, [pc, #384]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005224:	f043 0304 	orr.w	r3, r3, #4
 8005228:	6713      	str	r3, [r2, #112]	; 0x70
 800522a:	4b5e      	ldr	r3, [pc, #376]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800522c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800522e:	4a5d      	ldr	r2, [pc, #372]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005230:	f043 0301 	orr.w	r3, r3, #1
 8005234:	6713      	str	r3, [r2, #112]	; 0x70
 8005236:	e00b      	b.n	8005250 <HAL_RCC_OscConfig+0x354>
 8005238:	4b5a      	ldr	r3, [pc, #360]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800523a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800523c:	4a59      	ldr	r2, [pc, #356]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	6713      	str	r3, [r2, #112]	; 0x70
 8005244:	4b57      	ldr	r3, [pc, #348]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005248:	4a56      	ldr	r2, [pc, #344]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800524a:	f023 0304 	bic.w	r3, r3, #4
 800524e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	689b      	ldr	r3, [r3, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d015      	beq.n	8005284 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005258:	f7fe fa08 	bl	800366c <HAL_GetTick>
 800525c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800525e:	e00a      	b.n	8005276 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005260:	f7fe fa04 	bl	800366c <HAL_GetTick>
 8005264:	4602      	mov	r2, r0
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	1ad3      	subs	r3, r2, r3
 800526a:	f241 3288 	movw	r2, #5000	; 0x1388
 800526e:	4293      	cmp	r3, r2
 8005270:	d901      	bls.n	8005276 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8005272:	2303      	movs	r3, #3
 8005274:	e092      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005276:	4b4b      	ldr	r3, [pc, #300]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800527a:	f003 0302 	and.w	r3, r3, #2
 800527e:	2b00      	cmp	r3, #0
 8005280:	d0ee      	beq.n	8005260 <HAL_RCC_OscConfig+0x364>
 8005282:	e014      	b.n	80052ae <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005284:	f7fe f9f2 	bl	800366c <HAL_GetTick>
 8005288:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800528a:	e00a      	b.n	80052a2 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800528c:	f7fe f9ee 	bl	800366c <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	f241 3288 	movw	r2, #5000	; 0x1388
 800529a:	4293      	cmp	r3, r2
 800529c:	d901      	bls.n	80052a2 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800529e:	2303      	movs	r3, #3
 80052a0:	e07c      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80052a2:	4b40      	ldr	r3, [pc, #256]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80052a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052a6:	f003 0302 	and.w	r3, r3, #2
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d1ee      	bne.n	800528c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80052ae:	7dfb      	ldrb	r3, [r7, #23]
 80052b0:	2b01      	cmp	r3, #1
 80052b2:	d105      	bne.n	80052c0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80052b4:	4b3b      	ldr	r3, [pc, #236]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80052b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b8:	4a3a      	ldr	r2, [pc, #232]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80052ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80052be:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d068      	beq.n	800539a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80052c8:	4b36      	ldr	r3, [pc, #216]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80052ca:	689b      	ldr	r3, [r3, #8]
 80052cc:	f003 030c 	and.w	r3, r3, #12
 80052d0:	2b08      	cmp	r3, #8
 80052d2:	d060      	beq.n	8005396 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	699b      	ldr	r3, [r3, #24]
 80052d8:	2b02      	cmp	r3, #2
 80052da:	d145      	bne.n	8005368 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052dc:	4b33      	ldr	r3, [pc, #204]	; (80053ac <HAL_RCC_OscConfig+0x4b0>)
 80052de:	2200      	movs	r2, #0
 80052e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fe f9c3 	bl	800366c <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ea:	f7fe f9bf 	bl	800366c <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b02      	cmp	r3, #2
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e04f      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fc:	4b29      	ldr	r3, [pc, #164]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1f0      	bne.n	80052ea <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	69da      	ldr	r2, [r3, #28]
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6a1b      	ldr	r3, [r3, #32]
 8005310:	431a      	orrs	r2, r3
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005316:	019b      	lsls	r3, r3, #6
 8005318:	431a      	orrs	r2, r3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	085b      	lsrs	r3, r3, #1
 8005320:	3b01      	subs	r3, #1
 8005322:	041b      	lsls	r3, r3, #16
 8005324:	431a      	orrs	r2, r3
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800532a:	061b      	lsls	r3, r3, #24
 800532c:	431a      	orrs	r2, r3
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	071b      	lsls	r3, r3, #28
 8005334:	491b      	ldr	r1, [pc, #108]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 8005336:	4313      	orrs	r3, r2
 8005338:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800533a:	4b1c      	ldr	r3, [pc, #112]	; (80053ac <HAL_RCC_OscConfig+0x4b0>)
 800533c:	2201      	movs	r2, #1
 800533e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005340:	f7fe f994 	bl	800366c <HAL_GetTick>
 8005344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005346:	e008      	b.n	800535a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005348:	f7fe f990 	bl	800366c <HAL_GetTick>
 800534c:	4602      	mov	r2, r0
 800534e:	693b      	ldr	r3, [r7, #16]
 8005350:	1ad3      	subs	r3, r2, r3
 8005352:	2b02      	cmp	r3, #2
 8005354:	d901      	bls.n	800535a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8005356:	2303      	movs	r3, #3
 8005358:	e020      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800535a:	4b12      	ldr	r3, [pc, #72]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005362:	2b00      	cmp	r3, #0
 8005364:	d0f0      	beq.n	8005348 <HAL_RCC_OscConfig+0x44c>
 8005366:	e018      	b.n	800539a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005368:	4b10      	ldr	r3, [pc, #64]	; (80053ac <HAL_RCC_OscConfig+0x4b0>)
 800536a:	2200      	movs	r2, #0
 800536c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800536e:	f7fe f97d 	bl	800366c <HAL_GetTick>
 8005372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005374:	e008      	b.n	8005388 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005376:	f7fe f979 	bl	800366c <HAL_GetTick>
 800537a:	4602      	mov	r2, r0
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	1ad3      	subs	r3, r2, r3
 8005380:	2b02      	cmp	r3, #2
 8005382:	d901      	bls.n	8005388 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8005384:	2303      	movs	r3, #3
 8005386:	e009      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005388:	4b06      	ldr	r3, [pc, #24]	; (80053a4 <HAL_RCC_OscConfig+0x4a8>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d1f0      	bne.n	8005376 <HAL_RCC_OscConfig+0x47a>
 8005394:	e001      	b.n	800539a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e000      	b.n	800539c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800539a:	2300      	movs	r3, #0
}
 800539c:	4618      	mov	r0, r3
 800539e:	3718      	adds	r7, #24
 80053a0:	46bd      	mov	sp, r7
 80053a2:	bd80      	pop	{r7, pc}
 80053a4:	40023800 	.word	0x40023800
 80053a8:	40007000 	.word	0x40007000
 80053ac:	42470060 	.word	0x42470060

080053b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d101      	bne.n	80053c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	e01d      	b.n	80053fe <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d106      	bne.n	80053dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2200      	movs	r2, #0
 80053d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80053d6:	6878      	ldr	r0, [r7, #4]
 80053d8:	f7fd ffb2 	bl	8003340 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681a      	ldr	r2, [r3, #0]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	3304      	adds	r3, #4
 80053ec:	4619      	mov	r1, r3
 80053ee:	4610      	mov	r0, r2
 80053f0:	f000 fa82 	bl	80058f8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2201      	movs	r2, #1
 80053f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80053fc:	2300      	movs	r3, #0
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3708      	adds	r7, #8
 8005402:	46bd      	mov	sp, r7
 8005404:	bd80      	pop	{r7, pc}
	...

08005408 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b086      	sub	sp, #24
 800540c:	af00      	add	r7, sp, #0
 800540e:	60f8      	str	r0, [r7, #12]
 8005410:	60b9      	str	r1, [r7, #8]
 8005412:	607a      	str	r2, [r7, #4]
 8005414:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  if (htim->State == HAL_TIM_STATE_BUSY)
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800541c:	b2db      	uxtb	r3, r3
 800541e:	2b02      	cmp	r3, #2
 8005420:	d101      	bne.n	8005426 <HAL_TIM_PWM_Start_DMA+0x1e>
  {
    return HAL_BUSY;
 8005422:	2302      	movs	r3, #2
 8005424:	e0f3      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
  }
  else if (htim->State == HAL_TIM_STATE_READY)
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800542c:	b2db      	uxtb	r3, r3
 800542e:	2b01      	cmp	r3, #1
 8005430:	d10b      	bne.n	800544a <HAL_TIM_PWM_Start_DMA+0x42>
  {
    if ((pData == NULL) && (Length > 0U))
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d104      	bne.n	8005442 <HAL_TIM_PWM_Start_DMA+0x3a>
 8005438:	887b      	ldrh	r3, [r7, #2]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d001      	beq.n	8005442 <HAL_TIM_PWM_Start_DMA+0x3a>
    {
      return HAL_ERROR;
 800543e:	2301      	movs	r3, #1
 8005440:	e0e5      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
    }
    else
    {
      htim->State = HAL_TIM_STATE_BUSY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2202      	movs	r2, #2
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  else
  {
    /* nothing to do */
  }

  switch (Channel)
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	2b0c      	cmp	r3, #12
 800544e:	f200 80ad 	bhi.w	80055ac <HAL_TIM_PWM_Start_DMA+0x1a4>
 8005452:	a201      	add	r2, pc, #4	; (adr r2, 8005458 <HAL_TIM_PWM_Start_DMA+0x50>)
 8005454:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005458:	0800548d 	.word	0x0800548d
 800545c:	080055ad 	.word	0x080055ad
 8005460:	080055ad 	.word	0x080055ad
 8005464:	080055ad 	.word	0x080055ad
 8005468:	080054d5 	.word	0x080054d5
 800546c:	080055ad 	.word	0x080055ad
 8005470:	080055ad 	.word	0x080055ad
 8005474:	080055ad 	.word	0x080055ad
 8005478:	0800551d 	.word	0x0800551d
 800547c:	080055ad 	.word	0x080055ad
 8005480:	080055ad 	.word	0x080055ad
 8005484:	080055ad 	.word	0x080055ad
 8005488:	08005565 	.word	0x08005565
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005490:	4a61      	ldr	r2, [pc, #388]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005492:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005498:	4a60      	ldr	r2, [pc, #384]	; (800561c <HAL_TIM_PWM_Start_DMA+0x214>)
 800549a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a0:	4a5f      	ldr	r2, [pc, #380]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x218>)
 80054a2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1, Length) != HAL_OK)
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80054a8:	6879      	ldr	r1, [r7, #4]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3334      	adds	r3, #52	; 0x34
 80054b0:	461a      	mov	r2, r3
 80054b2:	887b      	ldrh	r3, [r7, #2]
 80054b4:	f7fe fac2 	bl	8003a3c <HAL_DMA_Start_IT>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_PWM_Start_DMA+0xba>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e0a5      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	68da      	ldr	r2, [r3, #12]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d0:	60da      	str	r2, [r3, #12]
      break;
 80054d2:	e06c      	b.n	80055ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054d8:	4a4f      	ldr	r2, [pc, #316]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x210>)
 80054da:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e0:	4a4e      	ldr	r2, [pc, #312]	; (800561c <HAL_TIM_PWM_Start_DMA+0x214>)
 80054e2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e8:	4a4d      	ldr	r2, [pc, #308]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x218>)
 80054ea:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2, Length) != HAL_OK)
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80054f0:	6879      	ldr	r1, [r7, #4]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	3338      	adds	r3, #56	; 0x38
 80054f8:	461a      	mov	r2, r3
 80054fa:	887b      	ldrh	r3, [r7, #2]
 80054fc:	f7fe fa9e 	bl	8003a3c <HAL_DMA_Start_IT>
 8005500:	4603      	mov	r3, r0
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_TIM_PWM_Start_DMA+0x102>
      {
        return HAL_ERROR;
 8005506:	2301      	movs	r3, #1
 8005508:	e081      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005518:	60da      	str	r2, [r3, #12]
      break;
 800551a:	e048      	b.n	80055ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a3d      	ldr	r2, [pc, #244]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x210>)
 8005522:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005528:	4a3c      	ldr	r2, [pc, #240]	; (800561c <HAL_TIM_PWM_Start_DMA+0x214>)
 800552a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005530:	4a3b      	ldr	r2, [pc, #236]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x218>)
 8005532:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3, Length) != HAL_OK)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005538:	6879      	ldr	r1, [r7, #4]
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	333c      	adds	r3, #60	; 0x3c
 8005540:	461a      	mov	r2, r3
 8005542:	887b      	ldrh	r3, [r7, #2]
 8005544:	f7fe fa7a 	bl	8003a3c <HAL_DMA_Start_IT>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <HAL_TIM_PWM_Start_DMA+0x14a>
      {
        return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e05d      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	68da      	ldr	r2, [r3, #12]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005560:	60da      	str	r2, [r3, #12]
      break;
 8005562:	e024      	b.n	80055ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	4a2b      	ldr	r2, [pc, #172]	; (8005618 <HAL_TIM_PWM_Start_DMA+0x210>)
 800556a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005570:	4a2a      	ldr	r2, [pc, #168]	; (800561c <HAL_TIM_PWM_Start_DMA+0x214>)
 8005572:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005578:	4a29      	ldr	r2, [pc, #164]	; (8005620 <HAL_TIM_PWM_Start_DMA+0x218>)
 800557a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4, Length) != HAL_OK)
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005580:	6879      	ldr	r1, [r7, #4]
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	3340      	adds	r3, #64	; 0x40
 8005588:	461a      	mov	r2, r3
 800558a:	887b      	ldrh	r3, [r7, #2]
 800558c:	f7fe fa56 	bl	8003a3c <HAL_DMA_Start_IT>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	d001      	beq.n	800559a <HAL_TIM_PWM_Start_DMA+0x192>
      {
        return HAL_ERROR;
 8005596:	2301      	movs	r3, #1
 8005598:	e039      	b.n	800560e <HAL_TIM_PWM_Start_DMA+0x206>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	68da      	ldr	r2, [r3, #12]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80055a8:	60da      	str	r2, [r3, #12]
      break;
 80055aa:	e000      	b.n	80055ae <HAL_TIM_PWM_Start_DMA+0x1a6>
    }

    default:
      break;
 80055ac:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2201      	movs	r2, #1
 80055b4:	68b9      	ldr	r1, [r7, #8]
 80055b6:	4618      	mov	r0, r3
 80055b8:	f000 fbee 	bl	8005d98 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a18      	ldr	r2, [pc, #96]	; (8005624 <HAL_TIM_PWM_Start_DMA+0x21c>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d004      	beq.n	80055d0 <HAL_TIM_PWM_Start_DMA+0x1c8>
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a17      	ldr	r2, [pc, #92]	; (8005628 <HAL_TIM_PWM_Start_DMA+0x220>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d101      	bne.n	80055d4 <HAL_TIM_PWM_Start_DMA+0x1cc>
 80055d0:	2301      	movs	r3, #1
 80055d2:	e000      	b.n	80055d6 <HAL_TIM_PWM_Start_DMA+0x1ce>
 80055d4:	2300      	movs	r3, #0
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d007      	beq.n	80055ea <HAL_TIM_PWM_Start_DMA+0x1e2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80055e8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f003 0307 	and.w	r3, r3, #7
 80055f4:	617b      	str	r3, [r7, #20]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80055f6:	697b      	ldr	r3, [r7, #20]
 80055f8:	2b06      	cmp	r3, #6
 80055fa:	d007      	beq.n	800560c <HAL_TIM_PWM_Start_DMA+0x204>
  {
    __HAL_TIM_ENABLE(htim);
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681a      	ldr	r2, [r3, #0]
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f042 0201 	orr.w	r2, r2, #1
 800560a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800560c:	2300      	movs	r3, #0
}
 800560e:	4618      	mov	r0, r3
 8005610:	3718      	adds	r7, #24
 8005612:	46bd      	mov	sp, r7
 8005614:	bd80      	pop	{r7, pc}
 8005616:	bf00      	nop
 8005618:	08005819 	.word	0x08005819
 800561c:	08005889 	.word	0x08005889
 8005620:	080057f5 	.word	0x080057f5
 8005624:	40010000 	.word	0x40010000
 8005628:	40010400 	.word	0x40010400

0800562c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	60f8      	str	r0, [r7, #12]
 8005634:	60b9      	str	r1, [r7, #8]
 8005636:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800563e:	2b01      	cmp	r3, #1
 8005640:	d101      	bne.n	8005646 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005642:	2302      	movs	r3, #2
 8005644:	e0b4      	b.n	80057b0 <HAL_TIM_PWM_ConfigChannel+0x184>
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2201      	movs	r2, #1
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	2202      	movs	r2, #2
 8005652:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2b0c      	cmp	r3, #12
 800565a:	f200 809f 	bhi.w	800579c <HAL_TIM_PWM_ConfigChannel+0x170>
 800565e:	a201      	add	r2, pc, #4	; (adr r2, 8005664 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005664:	08005699 	.word	0x08005699
 8005668:	0800579d 	.word	0x0800579d
 800566c:	0800579d 	.word	0x0800579d
 8005670:	0800579d 	.word	0x0800579d
 8005674:	080056d9 	.word	0x080056d9
 8005678:	0800579d 	.word	0x0800579d
 800567c:	0800579d 	.word	0x0800579d
 8005680:	0800579d 	.word	0x0800579d
 8005684:	0800571b 	.word	0x0800571b
 8005688:	0800579d 	.word	0x0800579d
 800568c:	0800579d 	.word	0x0800579d
 8005690:	0800579d 	.word	0x0800579d
 8005694:	0800575b 	.word	0x0800575b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68b9      	ldr	r1, [r7, #8]
 800569e:	4618      	mov	r0, r3
 80056a0:	f000 f9ca 	bl	8005a38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	699a      	ldr	r2, [r3, #24]
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f042 0208 	orr.w	r2, r2, #8
 80056b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0204 	bic.w	r2, r2, #4
 80056c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	6999      	ldr	r1, [r3, #24]
 80056ca:	68bb      	ldr	r3, [r7, #8]
 80056cc:	691a      	ldr	r2, [r3, #16]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	430a      	orrs	r2, r1
 80056d4:	619a      	str	r2, [r3, #24]
      break;
 80056d6:	e062      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68b9      	ldr	r1, [r7, #8]
 80056de:	4618      	mov	r0, r3
 80056e0:	f000 fa1a 	bl	8005b18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	699a      	ldr	r2, [r3, #24]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699a      	ldr	r2, [r3, #24]
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005702:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	6999      	ldr	r1, [r3, #24]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	691b      	ldr	r3, [r3, #16]
 800570e:	021a      	lsls	r2, r3, #8
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	430a      	orrs	r2, r1
 8005716:	619a      	str	r2, [r3, #24]
      break;
 8005718:	e041      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	68b9      	ldr	r1, [r7, #8]
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fa6f 	bl	8005c04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	69da      	ldr	r2, [r3, #28]
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f042 0208 	orr.w	r2, r2, #8
 8005734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f022 0204 	bic.w	r2, r2, #4
 8005744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69d9      	ldr	r1, [r3, #28]
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	691a      	ldr	r2, [r3, #16]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	430a      	orrs	r2, r1
 8005756:	61da      	str	r2, [r3, #28]
      break;
 8005758:	e021      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	68b9      	ldr	r1, [r7, #8]
 8005760:	4618      	mov	r0, r3
 8005762:	f000 fac3 	bl	8005cec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	69da      	ldr	r2, [r3, #28]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005774:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	69da      	ldr	r2, [r3, #28]
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005784:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	69d9      	ldr	r1, [r3, #28]
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	021a      	lsls	r2, r3, #8
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	430a      	orrs	r2, r1
 8005798:	61da      	str	r2, [r3, #28]
      break;
 800579a:	e000      	b.n	800579e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800579c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2200      	movs	r2, #0
 80057aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80057ae:	2300      	movs	r3, #0
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	3710      	adds	r7, #16
 80057b4:	46bd      	mov	sp, r7
 80057b6:	bd80      	pop	{r7, pc}

080057b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80057b8:	b480      	push	{r7}
 80057ba:	b083      	sub	sp, #12
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80057c0:	bf00      	nop
 80057c2:	370c      	adds	r7, #12
 80057c4:	46bd      	mov	sp, r7
 80057c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ca:	4770      	bx	lr

080057cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80057cc:	b480      	push	{r7}
 80057ce:	b083      	sub	sp, #12
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 80057d4:	bf00      	nop
 80057d6:	370c      	adds	r7, #12
 80057d8:	46bd      	mov	sp, r7
 80057da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057de:	4770      	bx	lr

080057e0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 80057e0:	b480      	push	{r7}
 80057e2:	b083      	sub	sp, #12
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 80057e8:	bf00      	nop
 80057ea:	370c      	adds	r7, #12
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005800:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2201      	movs	r2, #1
 8005806:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800580a:	68f8      	ldr	r0, [r7, #12]
 800580c:	f7ff ffe8 	bl	80057e0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
}
 8005810:	bf00      	nop
 8005812:	3710      	adds	r7, #16
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8005818:	b580      	push	{r7, lr}
 800581a:	b084      	sub	sp, #16
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005824:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2201      	movs	r2, #1
 800582a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	429a      	cmp	r2, r3
 8005836:	d103      	bne.n	8005840 <TIM_DMADelayPulseCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2201      	movs	r2, #1
 800583c:	771a      	strb	r2, [r3, #28]
 800583e:	e019      	b.n	8005874 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	429a      	cmp	r2, r3
 8005848:	d103      	bne.n	8005852 <TIM_DMADelayPulseCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	2202      	movs	r2, #2
 800584e:	771a      	strb	r2, [r3, #28]
 8005850:	e010      	b.n	8005874 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	687a      	ldr	r2, [r7, #4]
 8005858:	429a      	cmp	r2, r3
 800585a:	d103      	bne.n	8005864 <TIM_DMADelayPulseCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2204      	movs	r2, #4
 8005860:	771a      	strb	r2, [r3, #28]
 8005862:	e007      	b.n	8005874 <TIM_DMADelayPulseCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	429a      	cmp	r2, r3
 800586c:	d102      	bne.n	8005874 <TIM_DMADelayPulseCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2208      	movs	r2, #8
 8005872:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005874:	68f8      	ldr	r0, [r7, #12]
 8005876:	f7ff ff9f 	bl	80057b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2200      	movs	r2, #0
 800587e:	771a      	strb	r2, [r3, #28]
}
 8005880:	bf00      	nop
 8005882:	3710      	adds	r7, #16
 8005884:	46bd      	mov	sp, r7
 8005886:	bd80      	pop	{r7, pc}

08005888 <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b084      	sub	sp, #16
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005894:	60fb      	str	r3, [r7, #12]

  htim->State = HAL_TIM_STATE_READY;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	2201      	movs	r2, #1
 800589a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d103      	bne.n	80058b0 <TIM_DMADelayPulseHalfCplt+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2201      	movs	r2, #1
 80058ac:	771a      	strb	r2, [r3, #28]
 80058ae:	e019      	b.n	80058e4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058b4:	687a      	ldr	r2, [r7, #4]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d103      	bne.n	80058c2 <TIM_DMADelayPulseHalfCplt+0x3a>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2202      	movs	r2, #2
 80058be:	771a      	strb	r2, [r3, #28]
 80058c0:	e010      	b.n	80058e4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	429a      	cmp	r2, r3
 80058ca:	d103      	bne.n	80058d4 <TIM_DMADelayPulseHalfCplt+0x4c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	2204      	movs	r2, #4
 80058d0:	771a      	strb	r2, [r3, #28]
 80058d2:	e007      	b.n	80058e4 <TIM_DMADelayPulseHalfCplt+0x5c>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058d8:	687a      	ldr	r2, [r7, #4]
 80058da:	429a      	cmp	r2, r3
 80058dc:	d102      	bne.n	80058e4 <TIM_DMADelayPulseHalfCplt+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	2208      	movs	r2, #8
 80058e2:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7ff ff71 	bl	80057cc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	2200      	movs	r2, #0
 80058ee:	771a      	strb	r2, [r3, #28]
}
 80058f0:	bf00      	nop
 80058f2:	3710      	adds	r7, #16
 80058f4:	46bd      	mov	sp, r7
 80058f6:	bd80      	pop	{r7, pc}

080058f8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b085      	sub	sp, #20
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	4a40      	ldr	r2, [pc, #256]	; (8005a0c <TIM_Base_SetConfig+0x114>)
 800590c:	4293      	cmp	r3, r2
 800590e:	d013      	beq.n	8005938 <TIM_Base_SetConfig+0x40>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005916:	d00f      	beq.n	8005938 <TIM_Base_SetConfig+0x40>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	4a3d      	ldr	r2, [pc, #244]	; (8005a10 <TIM_Base_SetConfig+0x118>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d00b      	beq.n	8005938 <TIM_Base_SetConfig+0x40>
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	4a3c      	ldr	r2, [pc, #240]	; (8005a14 <TIM_Base_SetConfig+0x11c>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d007      	beq.n	8005938 <TIM_Base_SetConfig+0x40>
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	4a3b      	ldr	r2, [pc, #236]	; (8005a18 <TIM_Base_SetConfig+0x120>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d003      	beq.n	8005938 <TIM_Base_SetConfig+0x40>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	4a3a      	ldr	r2, [pc, #232]	; (8005a1c <TIM_Base_SetConfig+0x124>)
 8005934:	4293      	cmp	r3, r2
 8005936:	d108      	bne.n	800594a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800593e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	4313      	orrs	r3, r2
 8005948:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	4a2f      	ldr	r2, [pc, #188]	; (8005a0c <TIM_Base_SetConfig+0x114>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d02b      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005958:	d027      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	4a2c      	ldr	r2, [pc, #176]	; (8005a10 <TIM_Base_SetConfig+0x118>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d023      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	4a2b      	ldr	r2, [pc, #172]	; (8005a14 <TIM_Base_SetConfig+0x11c>)
 8005966:	4293      	cmp	r3, r2
 8005968:	d01f      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	4a2a      	ldr	r2, [pc, #168]	; (8005a18 <TIM_Base_SetConfig+0x120>)
 800596e:	4293      	cmp	r3, r2
 8005970:	d01b      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	4a29      	ldr	r2, [pc, #164]	; (8005a1c <TIM_Base_SetConfig+0x124>)
 8005976:	4293      	cmp	r3, r2
 8005978:	d017      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	4a28      	ldr	r2, [pc, #160]	; (8005a20 <TIM_Base_SetConfig+0x128>)
 800597e:	4293      	cmp	r3, r2
 8005980:	d013      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a27      	ldr	r2, [pc, #156]	; (8005a24 <TIM_Base_SetConfig+0x12c>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d00f      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	4a26      	ldr	r2, [pc, #152]	; (8005a28 <TIM_Base_SetConfig+0x130>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d00b      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a25      	ldr	r2, [pc, #148]	; (8005a2c <TIM_Base_SetConfig+0x134>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d007      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a24      	ldr	r2, [pc, #144]	; (8005a30 <TIM_Base_SetConfig+0x138>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d003      	beq.n	80059aa <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a23      	ldr	r2, [pc, #140]	; (8005a34 <TIM_Base_SetConfig+0x13c>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d108      	bne.n	80059bc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059b2:	683b      	ldr	r3, [r7, #0]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	68fa      	ldr	r2, [r7, #12]
 80059b8:	4313      	orrs	r3, r2
 80059ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059c2:	683b      	ldr	r3, [r7, #0]
 80059c4:	695b      	ldr	r3, [r3, #20]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	68fa      	ldr	r2, [r7, #12]
 80059ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	689a      	ldr	r2, [r3, #8]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a0a      	ldr	r2, [pc, #40]	; (8005a0c <TIM_Base_SetConfig+0x114>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d003      	beq.n	80059f0 <TIM_Base_SetConfig+0xf8>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	4a0c      	ldr	r2, [pc, #48]	; (8005a1c <TIM_Base_SetConfig+0x124>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d103      	bne.n	80059f8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	691a      	ldr	r2, [r3, #16]
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2201      	movs	r2, #1
 80059fc:	615a      	str	r2, [r3, #20]
}
 80059fe:	bf00      	nop
 8005a00:	3714      	adds	r7, #20
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr
 8005a0a:	bf00      	nop
 8005a0c:	40010000 	.word	0x40010000
 8005a10:	40000400 	.word	0x40000400
 8005a14:	40000800 	.word	0x40000800
 8005a18:	40000c00 	.word	0x40000c00
 8005a1c:	40010400 	.word	0x40010400
 8005a20:	40014000 	.word	0x40014000
 8005a24:	40014400 	.word	0x40014400
 8005a28:	40014800 	.word	0x40014800
 8005a2c:	40001800 	.word	0x40001800
 8005a30:	40001c00 	.word	0x40001c00
 8005a34:	40002000 	.word	0x40002000

08005a38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b087      	sub	sp, #28
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6a1b      	ldr	r3, [r3, #32]
 8005a46:	f023 0201 	bic.w	r2, r3, #1
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6a1b      	ldr	r3, [r3, #32]
 8005a52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	685b      	ldr	r3, [r3, #4]
 8005a58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	699b      	ldr	r3, [r3, #24]
 8005a5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0303 	bic.w	r3, r3, #3
 8005a6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a70:	683b      	ldr	r3, [r7, #0]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	68fa      	ldr	r2, [r7, #12]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005a7a:	697b      	ldr	r3, [r7, #20]
 8005a7c:	f023 0302 	bic.w	r3, r3, #2
 8005a80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	4313      	orrs	r3, r2
 8005a8a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	4a20      	ldr	r2, [pc, #128]	; (8005b10 <TIM_OC1_SetConfig+0xd8>)
 8005a90:	4293      	cmp	r3, r2
 8005a92:	d003      	beq.n	8005a9c <TIM_OC1_SetConfig+0x64>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4a1f      	ldr	r2, [pc, #124]	; (8005b14 <TIM_OC1_SetConfig+0xdc>)
 8005a98:	4293      	cmp	r3, r2
 8005a9a:	d10c      	bne.n	8005ab6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0308 	bic.w	r3, r3, #8
 8005aa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	68db      	ldr	r3, [r3, #12]
 8005aa8:	697a      	ldr	r2, [r7, #20]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0304 	bic.w	r3, r3, #4
 8005ab4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	4a15      	ldr	r2, [pc, #84]	; (8005b10 <TIM_OC1_SetConfig+0xd8>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d003      	beq.n	8005ac6 <TIM_OC1_SetConfig+0x8e>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	4a14      	ldr	r2, [pc, #80]	; (8005b14 <TIM_OC1_SetConfig+0xdc>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d111      	bne.n	8005aea <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005ac6:	693b      	ldr	r3, [r7, #16]
 8005ac8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005acc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005ad4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	695b      	ldr	r3, [r3, #20]
 8005ada:	693a      	ldr	r2, [r7, #16]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	699b      	ldr	r3, [r3, #24]
 8005ae4:	693a      	ldr	r2, [r7, #16]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	693a      	ldr	r2, [r7, #16]
 8005aee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68fa      	ldr	r2, [r7, #12]
 8005af4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	685a      	ldr	r2, [r3, #4]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	697a      	ldr	r2, [r7, #20]
 8005b02:	621a      	str	r2, [r3, #32]
}
 8005b04:	bf00      	nop
 8005b06:	371c      	adds	r7, #28
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0e:	4770      	bx	lr
 8005b10:	40010000 	.word	0x40010000
 8005b14:	40010400 	.word	0x40010400

08005b18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b087      	sub	sp, #28
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	6078      	str	r0, [r7, #4]
 8005b20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0210 	bic.w	r2, r3, #16
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	685b      	ldr	r3, [r3, #4]
 8005b38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	699b      	ldr	r3, [r3, #24]
 8005b3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b4e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	021b      	lsls	r3, r3, #8
 8005b56:	68fa      	ldr	r2, [r7, #12]
 8005b58:	4313      	orrs	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	f023 0320 	bic.w	r3, r3, #32
 8005b62:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	689b      	ldr	r3, [r3, #8]
 8005b68:	011b      	lsls	r3, r3, #4
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4a22      	ldr	r2, [pc, #136]	; (8005bfc <TIM_OC2_SetConfig+0xe4>)
 8005b74:	4293      	cmp	r3, r2
 8005b76:	d003      	beq.n	8005b80 <TIM_OC2_SetConfig+0x68>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	4a21      	ldr	r2, [pc, #132]	; (8005c00 <TIM_OC2_SetConfig+0xe8>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d10d      	bne.n	8005b9c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b86:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	68db      	ldr	r3, [r3, #12]
 8005b8c:	011b      	lsls	r3, r3, #4
 8005b8e:	697a      	ldr	r2, [r7, #20]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b9a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a17      	ldr	r2, [pc, #92]	; (8005bfc <TIM_OC2_SetConfig+0xe4>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d003      	beq.n	8005bac <TIM_OC2_SetConfig+0x94>
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a16      	ldr	r2, [pc, #88]	; (8005c00 <TIM_OC2_SetConfig+0xe8>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d113      	bne.n	8005bd4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bb2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005bb4:	693b      	ldr	r3, [r7, #16]
 8005bb6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	695b      	ldr	r3, [r3, #20]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	693a      	ldr	r2, [r7, #16]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	699b      	ldr	r3, [r3, #24]
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	693a      	ldr	r2, [r7, #16]
 8005bd8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	68fa      	ldr	r2, [r7, #12]
 8005bde:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005be0:	683b      	ldr	r3, [r7, #0]
 8005be2:	685a      	ldr	r2, [r3, #4]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	621a      	str	r2, [r3, #32]
}
 8005bee:	bf00      	nop
 8005bf0:	371c      	adds	r7, #28
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr
 8005bfa:	bf00      	nop
 8005bfc:	40010000 	.word	0x40010000
 8005c00:	40010400 	.word	0x40010400

08005c04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f023 0303 	bic.w	r3, r3, #3
 8005c3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	68fa      	ldr	r2, [r7, #12]
 8005c42:	4313      	orrs	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	689b      	ldr	r3, [r3, #8]
 8005c52:	021b      	lsls	r3, r3, #8
 8005c54:	697a      	ldr	r2, [r7, #20]
 8005c56:	4313      	orrs	r3, r2
 8005c58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	4a21      	ldr	r2, [pc, #132]	; (8005ce4 <TIM_OC3_SetConfig+0xe0>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d003      	beq.n	8005c6a <TIM_OC3_SetConfig+0x66>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	4a20      	ldr	r2, [pc, #128]	; (8005ce8 <TIM_OC3_SetConfig+0xe4>)
 8005c66:	4293      	cmp	r3, r2
 8005c68:	d10d      	bne.n	8005c86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005c70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	68db      	ldr	r3, [r3, #12]
 8005c76:	021b      	lsls	r3, r3, #8
 8005c78:	697a      	ldr	r2, [r7, #20]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005c7e:	697b      	ldr	r3, [r7, #20]
 8005c80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005c84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	4a16      	ldr	r2, [pc, #88]	; (8005ce4 <TIM_OC3_SetConfig+0xe0>)
 8005c8a:	4293      	cmp	r3, r2
 8005c8c:	d003      	beq.n	8005c96 <TIM_OC3_SetConfig+0x92>
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a15      	ldr	r2, [pc, #84]	; (8005ce8 <TIM_OC3_SetConfig+0xe4>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d113      	bne.n	8005cbe <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c96:	693b      	ldr	r3, [r7, #16]
 8005c98:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005ca4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	695b      	ldr	r3, [r3, #20]
 8005caa:	011b      	lsls	r3, r3, #4
 8005cac:	693a      	ldr	r2, [r7, #16]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	699b      	ldr	r3, [r3, #24]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cca:	683b      	ldr	r3, [r7, #0]
 8005ccc:	685a      	ldr	r2, [r3, #4]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	621a      	str	r2, [r3, #32]
}
 8005cd8:	bf00      	nop
 8005cda:	371c      	adds	r7, #28
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	40010000 	.word	0x40010000
 8005ce8:	40010400 	.word	0x40010400

08005cec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b087      	sub	sp, #28
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6a1b      	ldr	r3, [r3, #32]
 8005cfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	6a1b      	ldr	r3, [r3, #32]
 8005d06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	69db      	ldr	r3, [r3, #28]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d24:	683b      	ldr	r3, [r7, #0]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	021b      	lsls	r3, r3, #8
 8005d2a:	68fa      	ldr	r2, [r7, #12]
 8005d2c:	4313      	orrs	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	031b      	lsls	r3, r3, #12
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	4a12      	ldr	r2, [pc, #72]	; (8005d90 <TIM_OC4_SetConfig+0xa4>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d003      	beq.n	8005d54 <TIM_OC4_SetConfig+0x68>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a11      	ldr	r2, [pc, #68]	; (8005d94 <TIM_OC4_SetConfig+0xa8>)
 8005d50:	4293      	cmp	r3, r2
 8005d52:	d109      	bne.n	8005d68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d54:	697b      	ldr	r3, [r7, #20]
 8005d56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	695b      	ldr	r3, [r3, #20]
 8005d60:	019b      	lsls	r3, r3, #6
 8005d62:	697a      	ldr	r2, [r7, #20]
 8005d64:	4313      	orrs	r3, r2
 8005d66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	68fa      	ldr	r2, [r7, #12]
 8005d72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	685a      	ldr	r2, [r3, #4]
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	693a      	ldr	r2, [r7, #16]
 8005d80:	621a      	str	r2, [r3, #32]
}
 8005d82:	bf00      	nop
 8005d84:	371c      	adds	r7, #28
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	40010000 	.word	0x40010000
 8005d94:	40010400 	.word	0x40010400

08005d98 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b087      	sub	sp, #28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	60f8      	str	r0, [r7, #12]
 8005da0:	60b9      	str	r1, [r7, #8]
 8005da2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	f003 031f 	and.w	r3, r3, #31
 8005daa:	2201      	movs	r2, #1
 8005dac:	fa02 f303 	lsl.w	r3, r2, r3
 8005db0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6a1a      	ldr	r2, [r3, #32]
 8005db6:	697b      	ldr	r3, [r7, #20]
 8005db8:	43db      	mvns	r3, r3
 8005dba:	401a      	ands	r2, r3
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	6a1a      	ldr	r2, [r3, #32]
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	6879      	ldr	r1, [r7, #4]
 8005dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8005dd0:	431a      	orrs	r2, r3
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	621a      	str	r2, [r3, #32]
}
 8005dd6:	bf00      	nop
 8005dd8:	371c      	adds	r7, #28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr
	...

08005de4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b085      	sub	sp, #20
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005df4:	2b01      	cmp	r3, #1
 8005df6:	d101      	bne.n	8005dfc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	e05a      	b.n	8005eb2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2201      	movs	r2, #1
 8005e00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2202      	movs	r2, #2
 8005e08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	685b      	ldr	r3, [r3, #4]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	68fa      	ldr	r2, [r7, #12]
 8005e34:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	4a21      	ldr	r2, [pc, #132]	; (8005ec0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d022      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d01d      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	4a1d      	ldr	r2, [pc, #116]	; (8005ec4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d018      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	4a1b      	ldr	r2, [pc, #108]	; (8005ec8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e5a:	4293      	cmp	r3, r2
 8005e5c:	d013      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	4a1a      	ldr	r2, [pc, #104]	; (8005ecc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e64:	4293      	cmp	r3, r2
 8005e66:	d00e      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a18      	ldr	r2, [pc, #96]	; (8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d009      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e78:	4293      	cmp	r3, r2
 8005e7a:	d004      	beq.n	8005e86 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a15      	ldr	r2, [pc, #84]	; (8005ed8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d10c      	bne.n	8005ea0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e86:	68bb      	ldr	r3, [r7, #8]
 8005e88:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e8c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	685b      	ldr	r3, [r3, #4]
 8005e92:	68ba      	ldr	r2, [r7, #8]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	68ba      	ldr	r2, [r7, #8]
 8005e9e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3714      	adds	r7, #20
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop
 8005ec0:	40010000 	.word	0x40010000
 8005ec4:	40000400 	.word	0x40000400
 8005ec8:	40000800 	.word	0x40000800
 8005ecc:	40000c00 	.word	0x40000c00
 8005ed0:	40010400 	.word	0x40010400
 8005ed4:	40014000 	.word	0x40014000
 8005ed8:	40001800 	.word	0x40001800

08005edc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b082      	sub	sp, #8
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e03f      	b.n	8005f6e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d106      	bne.n	8005f08 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f7fd fad2 	bl	80034ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2224      	movs	r2, #36	; 0x24
 8005f0c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	68da      	ldr	r2, [r3, #12]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f1e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f000 faef 	bl	8006504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691a      	ldr	r2, [r3, #16]
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005f34:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	695a      	ldr	r2, [r3, #20]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f44:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	68da      	ldr	r2, [r3, #12]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f54:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2200      	movs	r2, #0
 8005f5a:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2220      	movs	r2, #32
 8005f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2220      	movs	r2, #32
 8005f68:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005f6c:	2300      	movs	r3, #0
}
 8005f6e:	4618      	mov	r0, r3
 8005f70:	3708      	adds	r7, #8
 8005f72:	46bd      	mov	sp, r7
 8005f74:	bd80      	pop	{r7, pc}

08005f76 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f76:	b480      	push	{r7}
 8005f78:	b085      	sub	sp, #20
 8005f7a:	af00      	add	r7, sp, #0
 8005f7c:	60f8      	str	r0, [r7, #12]
 8005f7e:	60b9      	str	r1, [r7, #8]
 8005f80:	4613      	mov	r3, r2
 8005f82:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005f8a:	b2db      	uxtb	r3, r3
 8005f8c:	2b20      	cmp	r3, #32
 8005f8e:	d130      	bne.n	8005ff2 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d002      	beq.n	8005f9c <HAL_UART_Transmit_IT+0x26>
 8005f96:	88fb      	ldrh	r3, [r7, #6]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e029      	b.n	8005ff4 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005fa6:	2b01      	cmp	r3, #1
 8005fa8:	d101      	bne.n	8005fae <HAL_UART_Transmit_IT+0x38>
 8005faa:	2302      	movs	r3, #2
 8005fac:	e022      	b.n	8005ff4 <HAL_UART_Transmit_IT+0x7e>
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2201      	movs	r2, #1
 8005fb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	68ba      	ldr	r2, [r7, #8]
 8005fba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	88fa      	ldrh	r2, [r7, #6]
 8005fc0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	88fa      	ldrh	r2, [r7, #6]
 8005fc6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	2221      	movs	r2, #33	; 0x21
 8005fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68da      	ldr	r2, [r3, #12]
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005fec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	e000      	b.n	8005ff4 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005ff2:	2302      	movs	r3, #2
  }
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3714      	adds	r7, #20
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr

08006000 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006000:	b480      	push	{r7}
 8006002:	b085      	sub	sp, #20
 8006004:	af00      	add	r7, sp, #0
 8006006:	60f8      	str	r0, [r7, #12]
 8006008:	60b9      	str	r1, [r7, #8]
 800600a:	4613      	mov	r3, r2
 800600c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8006014:	b2db      	uxtb	r3, r3
 8006016:	2b20      	cmp	r3, #32
 8006018:	d140      	bne.n	800609c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d002      	beq.n	8006026 <HAL_UART_Receive_IT+0x26>
 8006020:	88fb      	ldrh	r3, [r7, #6]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d101      	bne.n	800602a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006026:	2301      	movs	r3, #1
 8006028:	e039      	b.n	800609e <HAL_UART_Receive_IT+0x9e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006030:	2b01      	cmp	r3, #1
 8006032:	d101      	bne.n	8006038 <HAL_UART_Receive_IT+0x38>
 8006034:	2302      	movs	r3, #2
 8006036:	e032      	b.n	800609e <HAL_UART_Receive_IT+0x9e>
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	68ba      	ldr	r2, [r7, #8]
 8006044:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	88fa      	ldrh	r2, [r7, #6]
 800604a:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	88fa      	ldrh	r2, [r7, #6]
 8006050:	85da      	strh	r2, [r3, #46]	; 0x2e

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2200      	movs	r2, #0
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	2222      	movs	r2, #34	; 0x22
 800605c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	2200      	movs	r2, #0
 8006064:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006076:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	695a      	ldr	r2, [r3, #20]
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	615a      	str	r2, [r3, #20]

    /* Enable the UART Data Register not empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f042 0220 	orr.w	r2, r2, #32
 8006096:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e000      	b.n	800609e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800609c:	2302      	movs	r3, #2
  }
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
	...

080060ac <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	68db      	ldr	r3, [r3, #12]
 80060c2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	695b      	ldr	r3, [r3, #20]
 80060ca:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 80060cc:	2300      	movs	r3, #0
 80060ce:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 80060d0:	2300      	movs	r3, #0
 80060d2:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80060d4:	69fb      	ldr	r3, [r7, #28]
 80060d6:	f003 030f 	and.w	r3, r3, #15
 80060da:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d10d      	bne.n	80060fe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	f003 0320 	and.w	r3, r3, #32
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d008      	beq.n	80060fe <HAL_UART_IRQHandler+0x52>
 80060ec:	69bb      	ldr	r3, [r7, #24]
 80060ee:	f003 0320 	and.w	r3, r3, #32
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 f982 	bl	8006400 <UART_Receive_IT>
      return;
 80060fc:	e0d1      	b.n	80062a2 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80060fe:	693b      	ldr	r3, [r7, #16]
 8006100:	2b00      	cmp	r3, #0
 8006102:	f000 80b0 	beq.w	8006266 <HAL_UART_IRQHandler+0x1ba>
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	f003 0301 	and.w	r3, r3, #1
 800610c:	2b00      	cmp	r3, #0
 800610e:	d105      	bne.n	800611c <HAL_UART_IRQHandler+0x70>
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006116:	2b00      	cmp	r3, #0
 8006118:	f000 80a5 	beq.w	8006266 <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800611c:	69fb      	ldr	r3, [r7, #28]
 800611e:	f003 0301 	and.w	r3, r3, #1
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00a      	beq.n	800613c <HAL_UART_IRQHandler+0x90>
 8006126:	69bb      	ldr	r3, [r7, #24]
 8006128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800612c:	2b00      	cmp	r3, #0
 800612e:	d005      	beq.n	800613c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006134:	f043 0201 	orr.w	r2, r3, #1
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800613c:	69fb      	ldr	r3, [r7, #28]
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_UART_IRQHandler+0xb0>
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	f003 0301 	and.w	r3, r3, #1
 800614c:	2b00      	cmp	r3, #0
 800614e:	d005      	beq.n	800615c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006154:	f043 0202 	orr.w	r2, r3, #2
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800615c:	69fb      	ldr	r3, [r7, #28]
 800615e:	f003 0302 	and.w	r3, r3, #2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00a      	beq.n	800617c <HAL_UART_IRQHandler+0xd0>
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0301 	and.w	r3, r3, #1
 800616c:	2b00      	cmp	r3, #0
 800616e:	d005      	beq.n	800617c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006174:	f043 0204 	orr.w	r2, r3, #4
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	f003 0308 	and.w	r3, r3, #8
 8006182:	2b00      	cmp	r3, #0
 8006184:	d00f      	beq.n	80061a6 <HAL_UART_IRQHandler+0xfa>
 8006186:	69bb      	ldr	r3, [r7, #24]
 8006188:	f003 0320 	and.w	r3, r3, #32
 800618c:	2b00      	cmp	r3, #0
 800618e:	d104      	bne.n	800619a <HAL_UART_IRQHandler+0xee>
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d005      	beq.n	80061a6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800619e:	f043 0208 	orr.w	r2, r3, #8
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d078      	beq.n	80062a0 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f003 0320 	and.w	r3, r3, #32
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d007      	beq.n	80061c8 <HAL_UART_IRQHandler+0x11c>
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	f003 0320 	and.w	r3, r3, #32
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d002      	beq.n	80061c8 <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 f91c 	bl	8006400 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80061d2:	2b40      	cmp	r3, #64	; 0x40
 80061d4:	bf0c      	ite	eq
 80061d6:	2301      	moveq	r3, #1
 80061d8:	2300      	movne	r3, #0
 80061da:	b2db      	uxtb	r3, r3
 80061dc:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80061e2:	f003 0308 	and.w	r3, r3, #8
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d102      	bne.n	80061f0 <HAL_UART_IRQHandler+0x144>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d031      	beq.n	8006254 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80061f0:	6878      	ldr	r0, [r7, #4]
 80061f2:	f000 f865 	bl	80062c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	695b      	ldr	r3, [r3, #20]
 80061fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006200:	2b40      	cmp	r3, #64	; 0x40
 8006202:	d123      	bne.n	800624c <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695a      	ldr	r2, [r3, #20]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006212:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006218:	2b00      	cmp	r3, #0
 800621a:	d013      	beq.n	8006244 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006220:	4a21      	ldr	r2, [pc, #132]	; (80062a8 <HAL_UART_IRQHandler+0x1fc>)
 8006222:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006228:	4618      	mov	r0, r3
 800622a:	f7fd fc5f 	bl	8003aec <HAL_DMA_Abort_IT>
 800622e:	4603      	mov	r3, r0
 8006230:	2b00      	cmp	r3, #0
 8006232:	d016      	beq.n	8006262 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800623a:	687a      	ldr	r2, [r7, #4]
 800623c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800623e:	4610      	mov	r0, r2
 8006240:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006242:	e00e      	b.n	8006262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	f000 f831 	bl	80062ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800624a:	e00a      	b.n	8006262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 f82d 	bl	80062ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006252:	e006      	b.n	8006262 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 f829 	bl	80062ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8006260:	e01e      	b.n	80062a0 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006262:	bf00      	nop
    return;
 8006264:	e01c      	b.n	80062a0 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006266:	69fb      	ldr	r3, [r7, #28]
 8006268:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800626c:	2b00      	cmp	r3, #0
 800626e:	d008      	beq.n	8006282 <HAL_UART_IRQHandler+0x1d6>
 8006270:	69bb      	ldr	r3, [r7, #24]
 8006272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f000 f852 	bl	8006324 <UART_Transmit_IT>
    return;
 8006280:	e00f      	b.n	80062a2 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006282:	69fb      	ldr	r3, [r7, #28]
 8006284:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006288:	2b00      	cmp	r3, #0
 800628a:	d00a      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1f6>
 800628c:	69bb      	ldr	r3, [r7, #24]
 800628e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006292:	2b00      	cmp	r3, #0
 8006294:	d005      	beq.n	80062a2 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 f89a 	bl	80063d0 <UART_EndTransmit_IT>
    return;
 800629c:	bf00      	nop
 800629e:	e000      	b.n	80062a2 <HAL_UART_IRQHandler+0x1f6>
    return;
 80062a0:	bf00      	nop
  }
}
 80062a2:	3720      	adds	r7, #32
 80062a4:	46bd      	mov	sp, r7
 80062a6:	bd80      	pop	{r7, pc}
 80062a8:	080062fd 	.word	0x080062fd

080062ac <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	68da      	ldr	r2, [r3, #12]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80062d6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	695a      	ldr	r2, [r3, #20]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f022 0201 	bic.w	r2, r2, #1
 80062e6:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2220      	movs	r2, #32
 80062ec:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 80062f0:	bf00      	nop
 80062f2:	370c      	adds	r7, #12
 80062f4:	46bd      	mov	sp, r7
 80062f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fa:	4770      	bx	lr

080062fc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b084      	sub	sp, #16
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2200      	movs	r2, #0
 800630e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2200      	movs	r2, #0
 8006314:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006316:	68f8      	ldr	r0, [r7, #12]
 8006318:	f7ff ffc8 	bl	80062ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800631c:	bf00      	nop
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006324:	b480      	push	{r7}
 8006326:	b085      	sub	sp, #20
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006332:	b2db      	uxtb	r3, r3
 8006334:	2b21      	cmp	r3, #33	; 0x21
 8006336:	d144      	bne.n	80063c2 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006340:	d11a      	bne.n	8006378 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6a1b      	ldr	r3, [r3, #32]
 8006346:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	881b      	ldrh	r3, [r3, #0]
 800634c:	461a      	mov	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006356:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d105      	bne.n	800636c <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	6a1b      	ldr	r3, [r3, #32]
 8006364:	1c9a      	adds	r2, r3, #2
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	621a      	str	r2, [r3, #32]
 800636a:	e00e      	b.n	800638a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a1b      	ldr	r3, [r3, #32]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	621a      	str	r2, [r3, #32]
 8006376:	e008      	b.n	800638a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	6a1b      	ldr	r3, [r3, #32]
 800637c:	1c59      	adds	r1, r3, #1
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	6211      	str	r1, [r2, #32]
 8006382:	781a      	ldrb	r2, [r3, #0]
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800638e:	b29b      	uxth	r3, r3
 8006390:	3b01      	subs	r3, #1
 8006392:	b29b      	uxth	r3, r3
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	4619      	mov	r1, r3
 8006398:	84d1      	strh	r1, [r2, #38]	; 0x26
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10f      	bne.n	80063be <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	68da      	ldr	r2, [r3, #12]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80063ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	68da      	ldr	r2, [r3, #12]
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80063be:	2300      	movs	r3, #0
 80063c0:	e000      	b.n	80063c4 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80063c2:	2302      	movs	r3, #2
  }
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3714      	adds	r7, #20
 80063c8:	46bd      	mov	sp, r7
 80063ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ce:	4770      	bx	lr

080063d0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
 80063d6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	68da      	ldr	r2, [r3, #12]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063e6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f7fc fdbd 	bl	8002f70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063f6:	2300      	movs	r3, #0
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	3708      	adds	r7, #8
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bd80      	pop	{r7, pc}

08006400 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800640e:	b2db      	uxtb	r3, r3
 8006410:	2b22      	cmp	r3, #34	; 0x22
 8006412:	d171      	bne.n	80064f8 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800641c:	d123      	bne.n	8006466 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006422:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	691b      	ldr	r3, [r3, #16]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d10e      	bne.n	800644a <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006438:	b29a      	uxth	r2, r3
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006442:	1c9a      	adds	r2, r3, #2
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	629a      	str	r2, [r3, #40]	; 0x28
 8006448:	e029      	b.n	800649e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	685b      	ldr	r3, [r3, #4]
 8006450:	b29b      	uxth	r3, r3
 8006452:	b2db      	uxtb	r3, r3
 8006454:	b29a      	uxth	r2, r3
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800645e:	1c5a      	adds	r2, r3, #1
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	629a      	str	r2, [r3, #40]	; 0x28
 8006464:	e01b      	b.n	800649e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	691b      	ldr	r3, [r3, #16]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10a      	bne.n	8006484 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	6858      	ldr	r0, [r3, #4]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006478:	1c59      	adds	r1, r3, #1
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6291      	str	r1, [r2, #40]	; 0x28
 800647e:	b2c2      	uxtb	r2, r0
 8006480:	701a      	strb	r2, [r3, #0]
 8006482:	e00c      	b.n	800649e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	b2da      	uxtb	r2, r3
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006490:	1c58      	adds	r0, r3, #1
 8006492:	6879      	ldr	r1, [r7, #4]
 8006494:	6288      	str	r0, [r1, #40]	; 0x28
 8006496:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800649a:	b2d2      	uxtb	r2, r2
 800649c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	3b01      	subs	r3, #1
 80064a6:	b29b      	uxth	r3, r3
 80064a8:	687a      	ldr	r2, [r7, #4]
 80064aa:	4619      	mov	r1, r3
 80064ac:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d120      	bne.n	80064f4 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68da      	ldr	r2, [r3, #12]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f022 0220 	bic.w	r2, r2, #32
 80064c0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68da      	ldr	r2, [r3, #12]
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80064d0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695a      	ldr	r2, [r3, #20]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2220      	movs	r2, #32
 80064e6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f7fc fd10 	bl	8002f10 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 80064f0:	2300      	movs	r3, #0
 80064f2:	e002      	b.n	80064fa <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 80064f4:	2300      	movs	r3, #0
 80064f6:	e000      	b.n	80064fa <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 80064f8:	2302      	movs	r3, #2
  }
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3710      	adds	r7, #16
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006508:	b085      	sub	sp, #20
 800650a:	af00      	add	r7, sp, #0
 800650c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	691b      	ldr	r3, [r3, #16]
 8006514:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	430a      	orrs	r2, r1
 8006522:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	689a      	ldr	r2, [r3, #8]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	691b      	ldr	r3, [r3, #16]
 800652c:	431a      	orrs	r2, r3
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	695b      	ldr	r3, [r3, #20]
 8006532:	431a      	orrs	r2, r3
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	69db      	ldr	r3, [r3, #28]
 8006538:	4313      	orrs	r3, r2
 800653a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8006546:	f023 030c 	bic.w	r3, r3, #12
 800654a:	687a      	ldr	r2, [r7, #4]
 800654c:	6812      	ldr	r2, [r2, #0]
 800654e:	68f9      	ldr	r1, [r7, #12]
 8006550:	430b      	orrs	r3, r1
 8006552:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	695b      	ldr	r3, [r3, #20]
 800655a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	699a      	ldr	r2, [r3, #24]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	430a      	orrs	r2, r1
 8006568:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	69db      	ldr	r3, [r3, #28]
 800656e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006572:	f040 818b 	bne.w	800688c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	4ac1      	ldr	r2, [pc, #772]	; (8006880 <UART_SetConfig+0x37c>)
 800657c:	4293      	cmp	r3, r2
 800657e:	d005      	beq.n	800658c <UART_SetConfig+0x88>
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	4abf      	ldr	r2, [pc, #764]	; (8006884 <UART_SetConfig+0x380>)
 8006586:	4293      	cmp	r3, r2
 8006588:	f040 80bd 	bne.w	8006706 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800658c:	f7fe fb02 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 8006590:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	461d      	mov	r5, r3
 8006596:	f04f 0600 	mov.w	r6, #0
 800659a:	46a8      	mov	r8, r5
 800659c:	46b1      	mov	r9, r6
 800659e:	eb18 0308 	adds.w	r3, r8, r8
 80065a2:	eb49 0409 	adc.w	r4, r9, r9
 80065a6:	4698      	mov	r8, r3
 80065a8:	46a1      	mov	r9, r4
 80065aa:	eb18 0805 	adds.w	r8, r8, r5
 80065ae:	eb49 0906 	adc.w	r9, r9, r6
 80065b2:	f04f 0100 	mov.w	r1, #0
 80065b6:	f04f 0200 	mov.w	r2, #0
 80065ba:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80065be:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80065c2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80065c6:	4688      	mov	r8, r1
 80065c8:	4691      	mov	r9, r2
 80065ca:	eb18 0005 	adds.w	r0, r8, r5
 80065ce:	eb49 0106 	adc.w	r1, r9, r6
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	685b      	ldr	r3, [r3, #4]
 80065d6:	461d      	mov	r5, r3
 80065d8:	f04f 0600 	mov.w	r6, #0
 80065dc:	196b      	adds	r3, r5, r5
 80065de:	eb46 0406 	adc.w	r4, r6, r6
 80065e2:	461a      	mov	r2, r3
 80065e4:	4623      	mov	r3, r4
 80065e6:	f7fa fb31 	bl	8000c4c <__aeabi_uldivmod>
 80065ea:	4603      	mov	r3, r0
 80065ec:	460c      	mov	r4, r1
 80065ee:	461a      	mov	r2, r3
 80065f0:	4ba5      	ldr	r3, [pc, #660]	; (8006888 <UART_SetConfig+0x384>)
 80065f2:	fba3 2302 	umull	r2, r3, r3, r2
 80065f6:	095b      	lsrs	r3, r3, #5
 80065f8:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	461d      	mov	r5, r3
 8006600:	f04f 0600 	mov.w	r6, #0
 8006604:	46a9      	mov	r9, r5
 8006606:	46b2      	mov	sl, r6
 8006608:	eb19 0309 	adds.w	r3, r9, r9
 800660c:	eb4a 040a 	adc.w	r4, sl, sl
 8006610:	4699      	mov	r9, r3
 8006612:	46a2      	mov	sl, r4
 8006614:	eb19 0905 	adds.w	r9, r9, r5
 8006618:	eb4a 0a06 	adc.w	sl, sl, r6
 800661c:	f04f 0100 	mov.w	r1, #0
 8006620:	f04f 0200 	mov.w	r2, #0
 8006624:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006628:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800662c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006630:	4689      	mov	r9, r1
 8006632:	4692      	mov	sl, r2
 8006634:	eb19 0005 	adds.w	r0, r9, r5
 8006638:	eb4a 0106 	adc.w	r1, sl, r6
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	685b      	ldr	r3, [r3, #4]
 8006640:	461d      	mov	r5, r3
 8006642:	f04f 0600 	mov.w	r6, #0
 8006646:	196b      	adds	r3, r5, r5
 8006648:	eb46 0406 	adc.w	r4, r6, r6
 800664c:	461a      	mov	r2, r3
 800664e:	4623      	mov	r3, r4
 8006650:	f7fa fafc 	bl	8000c4c <__aeabi_uldivmod>
 8006654:	4603      	mov	r3, r0
 8006656:	460c      	mov	r4, r1
 8006658:	461a      	mov	r2, r3
 800665a:	4b8b      	ldr	r3, [pc, #556]	; (8006888 <UART_SetConfig+0x384>)
 800665c:	fba3 1302 	umull	r1, r3, r3, r2
 8006660:	095b      	lsrs	r3, r3, #5
 8006662:	2164      	movs	r1, #100	; 0x64
 8006664:	fb01 f303 	mul.w	r3, r1, r3
 8006668:	1ad3      	subs	r3, r2, r3
 800666a:	00db      	lsls	r3, r3, #3
 800666c:	3332      	adds	r3, #50	; 0x32
 800666e:	4a86      	ldr	r2, [pc, #536]	; (8006888 <UART_SetConfig+0x384>)
 8006670:	fba2 2303 	umull	r2, r3, r2, r3
 8006674:	095b      	lsrs	r3, r3, #5
 8006676:	005b      	lsls	r3, r3, #1
 8006678:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800667c:	4498      	add	r8, r3
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	461d      	mov	r5, r3
 8006682:	f04f 0600 	mov.w	r6, #0
 8006686:	46a9      	mov	r9, r5
 8006688:	46b2      	mov	sl, r6
 800668a:	eb19 0309 	adds.w	r3, r9, r9
 800668e:	eb4a 040a 	adc.w	r4, sl, sl
 8006692:	4699      	mov	r9, r3
 8006694:	46a2      	mov	sl, r4
 8006696:	eb19 0905 	adds.w	r9, r9, r5
 800669a:	eb4a 0a06 	adc.w	sl, sl, r6
 800669e:	f04f 0100 	mov.w	r1, #0
 80066a2:	f04f 0200 	mov.w	r2, #0
 80066a6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066aa:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80066ae:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80066b2:	4689      	mov	r9, r1
 80066b4:	4692      	mov	sl, r2
 80066b6:	eb19 0005 	adds.w	r0, r9, r5
 80066ba:	eb4a 0106 	adc.w	r1, sl, r6
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	461d      	mov	r5, r3
 80066c4:	f04f 0600 	mov.w	r6, #0
 80066c8:	196b      	adds	r3, r5, r5
 80066ca:	eb46 0406 	adc.w	r4, r6, r6
 80066ce:	461a      	mov	r2, r3
 80066d0:	4623      	mov	r3, r4
 80066d2:	f7fa fabb 	bl	8000c4c <__aeabi_uldivmod>
 80066d6:	4603      	mov	r3, r0
 80066d8:	460c      	mov	r4, r1
 80066da:	461a      	mov	r2, r3
 80066dc:	4b6a      	ldr	r3, [pc, #424]	; (8006888 <UART_SetConfig+0x384>)
 80066de:	fba3 1302 	umull	r1, r3, r3, r2
 80066e2:	095b      	lsrs	r3, r3, #5
 80066e4:	2164      	movs	r1, #100	; 0x64
 80066e6:	fb01 f303 	mul.w	r3, r1, r3
 80066ea:	1ad3      	subs	r3, r2, r3
 80066ec:	00db      	lsls	r3, r3, #3
 80066ee:	3332      	adds	r3, #50	; 0x32
 80066f0:	4a65      	ldr	r2, [pc, #404]	; (8006888 <UART_SetConfig+0x384>)
 80066f2:	fba2 2303 	umull	r2, r3, r2, r3
 80066f6:	095b      	lsrs	r3, r3, #5
 80066f8:	f003 0207 	and.w	r2, r3, #7
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4442      	add	r2, r8
 8006702:	609a      	str	r2, [r3, #8]
 8006704:	e26f      	b.n	8006be6 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006706:	f7fe fa31 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 800670a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	461d      	mov	r5, r3
 8006710:	f04f 0600 	mov.w	r6, #0
 8006714:	46a8      	mov	r8, r5
 8006716:	46b1      	mov	r9, r6
 8006718:	eb18 0308 	adds.w	r3, r8, r8
 800671c:	eb49 0409 	adc.w	r4, r9, r9
 8006720:	4698      	mov	r8, r3
 8006722:	46a1      	mov	r9, r4
 8006724:	eb18 0805 	adds.w	r8, r8, r5
 8006728:	eb49 0906 	adc.w	r9, r9, r6
 800672c:	f04f 0100 	mov.w	r1, #0
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006738:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800673c:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006740:	4688      	mov	r8, r1
 8006742:	4691      	mov	r9, r2
 8006744:	eb18 0005 	adds.w	r0, r8, r5
 8006748:	eb49 0106 	adc.w	r1, r9, r6
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	685b      	ldr	r3, [r3, #4]
 8006750:	461d      	mov	r5, r3
 8006752:	f04f 0600 	mov.w	r6, #0
 8006756:	196b      	adds	r3, r5, r5
 8006758:	eb46 0406 	adc.w	r4, r6, r6
 800675c:	461a      	mov	r2, r3
 800675e:	4623      	mov	r3, r4
 8006760:	f7fa fa74 	bl	8000c4c <__aeabi_uldivmod>
 8006764:	4603      	mov	r3, r0
 8006766:	460c      	mov	r4, r1
 8006768:	461a      	mov	r2, r3
 800676a:	4b47      	ldr	r3, [pc, #284]	; (8006888 <UART_SetConfig+0x384>)
 800676c:	fba3 2302 	umull	r2, r3, r3, r2
 8006770:	095b      	lsrs	r3, r3, #5
 8006772:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	461d      	mov	r5, r3
 800677a:	f04f 0600 	mov.w	r6, #0
 800677e:	46a9      	mov	r9, r5
 8006780:	46b2      	mov	sl, r6
 8006782:	eb19 0309 	adds.w	r3, r9, r9
 8006786:	eb4a 040a 	adc.w	r4, sl, sl
 800678a:	4699      	mov	r9, r3
 800678c:	46a2      	mov	sl, r4
 800678e:	eb19 0905 	adds.w	r9, r9, r5
 8006792:	eb4a 0a06 	adc.w	sl, sl, r6
 8006796:	f04f 0100 	mov.w	r1, #0
 800679a:	f04f 0200 	mov.w	r2, #0
 800679e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a2:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067a6:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067aa:	4689      	mov	r9, r1
 80067ac:	4692      	mov	sl, r2
 80067ae:	eb19 0005 	adds.w	r0, r9, r5
 80067b2:	eb4a 0106 	adc.w	r1, sl, r6
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	461d      	mov	r5, r3
 80067bc:	f04f 0600 	mov.w	r6, #0
 80067c0:	196b      	adds	r3, r5, r5
 80067c2:	eb46 0406 	adc.w	r4, r6, r6
 80067c6:	461a      	mov	r2, r3
 80067c8:	4623      	mov	r3, r4
 80067ca:	f7fa fa3f 	bl	8000c4c <__aeabi_uldivmod>
 80067ce:	4603      	mov	r3, r0
 80067d0:	460c      	mov	r4, r1
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b2c      	ldr	r3, [pc, #176]	; (8006888 <UART_SetConfig+0x384>)
 80067d6:	fba3 1302 	umull	r1, r3, r3, r2
 80067da:	095b      	lsrs	r3, r3, #5
 80067dc:	2164      	movs	r1, #100	; 0x64
 80067de:	fb01 f303 	mul.w	r3, r1, r3
 80067e2:	1ad3      	subs	r3, r2, r3
 80067e4:	00db      	lsls	r3, r3, #3
 80067e6:	3332      	adds	r3, #50	; 0x32
 80067e8:	4a27      	ldr	r2, [pc, #156]	; (8006888 <UART_SetConfig+0x384>)
 80067ea:	fba2 2303 	umull	r2, r3, r2, r3
 80067ee:	095b      	lsrs	r3, r3, #5
 80067f0:	005b      	lsls	r3, r3, #1
 80067f2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067f6:	4498      	add	r8, r3
 80067f8:	68bb      	ldr	r3, [r7, #8]
 80067fa:	461d      	mov	r5, r3
 80067fc:	f04f 0600 	mov.w	r6, #0
 8006800:	46a9      	mov	r9, r5
 8006802:	46b2      	mov	sl, r6
 8006804:	eb19 0309 	adds.w	r3, r9, r9
 8006808:	eb4a 040a 	adc.w	r4, sl, sl
 800680c:	4699      	mov	r9, r3
 800680e:	46a2      	mov	sl, r4
 8006810:	eb19 0905 	adds.w	r9, r9, r5
 8006814:	eb4a 0a06 	adc.w	sl, sl, r6
 8006818:	f04f 0100 	mov.w	r1, #0
 800681c:	f04f 0200 	mov.w	r2, #0
 8006820:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006824:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006828:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800682c:	4689      	mov	r9, r1
 800682e:	4692      	mov	sl, r2
 8006830:	eb19 0005 	adds.w	r0, r9, r5
 8006834:	eb4a 0106 	adc.w	r1, sl, r6
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	685b      	ldr	r3, [r3, #4]
 800683c:	461d      	mov	r5, r3
 800683e:	f04f 0600 	mov.w	r6, #0
 8006842:	196b      	adds	r3, r5, r5
 8006844:	eb46 0406 	adc.w	r4, r6, r6
 8006848:	461a      	mov	r2, r3
 800684a:	4623      	mov	r3, r4
 800684c:	f7fa f9fe 	bl	8000c4c <__aeabi_uldivmod>
 8006850:	4603      	mov	r3, r0
 8006852:	460c      	mov	r4, r1
 8006854:	461a      	mov	r2, r3
 8006856:	4b0c      	ldr	r3, [pc, #48]	; (8006888 <UART_SetConfig+0x384>)
 8006858:	fba3 1302 	umull	r1, r3, r3, r2
 800685c:	095b      	lsrs	r3, r3, #5
 800685e:	2164      	movs	r1, #100	; 0x64
 8006860:	fb01 f303 	mul.w	r3, r1, r3
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	00db      	lsls	r3, r3, #3
 8006868:	3332      	adds	r3, #50	; 0x32
 800686a:	4a07      	ldr	r2, [pc, #28]	; (8006888 <UART_SetConfig+0x384>)
 800686c:	fba2 2303 	umull	r2, r3, r2, r3
 8006870:	095b      	lsrs	r3, r3, #5
 8006872:	f003 0207 	and.w	r2, r3, #7
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4442      	add	r2, r8
 800687c:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800687e:	e1b2      	b.n	8006be6 <UART_SetConfig+0x6e2>
 8006880:	40011000 	.word	0x40011000
 8006884:	40011400 	.word	0x40011400
 8006888:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4ad7      	ldr	r2, [pc, #860]	; (8006bf0 <UART_SetConfig+0x6ec>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d005      	beq.n	80068a2 <UART_SetConfig+0x39e>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4ad6      	ldr	r2, [pc, #856]	; (8006bf4 <UART_SetConfig+0x6f0>)
 800689c:	4293      	cmp	r3, r2
 800689e:	f040 80d1 	bne.w	8006a44 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 80068a2:	f7fe f977 	bl	8004b94 <HAL_RCC_GetPCLK2Freq>
 80068a6:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	469a      	mov	sl, r3
 80068ac:	f04f 0b00 	mov.w	fp, #0
 80068b0:	46d0      	mov	r8, sl
 80068b2:	46d9      	mov	r9, fp
 80068b4:	eb18 0308 	adds.w	r3, r8, r8
 80068b8:	eb49 0409 	adc.w	r4, r9, r9
 80068bc:	4698      	mov	r8, r3
 80068be:	46a1      	mov	r9, r4
 80068c0:	eb18 080a 	adds.w	r8, r8, sl
 80068c4:	eb49 090b 	adc.w	r9, r9, fp
 80068c8:	f04f 0100 	mov.w	r1, #0
 80068cc:	f04f 0200 	mov.w	r2, #0
 80068d0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068d4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068d8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068dc:	4688      	mov	r8, r1
 80068de:	4691      	mov	r9, r2
 80068e0:	eb1a 0508 	adds.w	r5, sl, r8
 80068e4:	eb4b 0609 	adc.w	r6, fp, r9
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	4619      	mov	r1, r3
 80068ee:	f04f 0200 	mov.w	r2, #0
 80068f2:	f04f 0300 	mov.w	r3, #0
 80068f6:	f04f 0400 	mov.w	r4, #0
 80068fa:	0094      	lsls	r4, r2, #2
 80068fc:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006900:	008b      	lsls	r3, r1, #2
 8006902:	461a      	mov	r2, r3
 8006904:	4623      	mov	r3, r4
 8006906:	4628      	mov	r0, r5
 8006908:	4631      	mov	r1, r6
 800690a:	f7fa f99f 	bl	8000c4c <__aeabi_uldivmod>
 800690e:	4603      	mov	r3, r0
 8006910:	460c      	mov	r4, r1
 8006912:	461a      	mov	r2, r3
 8006914:	4bb8      	ldr	r3, [pc, #736]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006916:	fba3 2302 	umull	r2, r3, r3, r2
 800691a:	095b      	lsrs	r3, r3, #5
 800691c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006920:	68bb      	ldr	r3, [r7, #8]
 8006922:	469b      	mov	fp, r3
 8006924:	f04f 0c00 	mov.w	ip, #0
 8006928:	46d9      	mov	r9, fp
 800692a:	46e2      	mov	sl, ip
 800692c:	eb19 0309 	adds.w	r3, r9, r9
 8006930:	eb4a 040a 	adc.w	r4, sl, sl
 8006934:	4699      	mov	r9, r3
 8006936:	46a2      	mov	sl, r4
 8006938:	eb19 090b 	adds.w	r9, r9, fp
 800693c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006940:	f04f 0100 	mov.w	r1, #0
 8006944:	f04f 0200 	mov.w	r2, #0
 8006948:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800694c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006950:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006954:	4689      	mov	r9, r1
 8006956:	4692      	mov	sl, r2
 8006958:	eb1b 0509 	adds.w	r5, fp, r9
 800695c:	eb4c 060a 	adc.w	r6, ip, sl
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	4619      	mov	r1, r3
 8006966:	f04f 0200 	mov.w	r2, #0
 800696a:	f04f 0300 	mov.w	r3, #0
 800696e:	f04f 0400 	mov.w	r4, #0
 8006972:	0094      	lsls	r4, r2, #2
 8006974:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006978:	008b      	lsls	r3, r1, #2
 800697a:	461a      	mov	r2, r3
 800697c:	4623      	mov	r3, r4
 800697e:	4628      	mov	r0, r5
 8006980:	4631      	mov	r1, r6
 8006982:	f7fa f963 	bl	8000c4c <__aeabi_uldivmod>
 8006986:	4603      	mov	r3, r0
 8006988:	460c      	mov	r4, r1
 800698a:	461a      	mov	r2, r3
 800698c:	4b9a      	ldr	r3, [pc, #616]	; (8006bf8 <UART_SetConfig+0x6f4>)
 800698e:	fba3 1302 	umull	r1, r3, r3, r2
 8006992:	095b      	lsrs	r3, r3, #5
 8006994:	2164      	movs	r1, #100	; 0x64
 8006996:	fb01 f303 	mul.w	r3, r1, r3
 800699a:	1ad3      	subs	r3, r2, r3
 800699c:	011b      	lsls	r3, r3, #4
 800699e:	3332      	adds	r3, #50	; 0x32
 80069a0:	4a95      	ldr	r2, [pc, #596]	; (8006bf8 <UART_SetConfig+0x6f4>)
 80069a2:	fba2 2303 	umull	r2, r3, r2, r3
 80069a6:	095b      	lsrs	r3, r3, #5
 80069a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80069ac:	4498      	add	r8, r3
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	469b      	mov	fp, r3
 80069b2:	f04f 0c00 	mov.w	ip, #0
 80069b6:	46d9      	mov	r9, fp
 80069b8:	46e2      	mov	sl, ip
 80069ba:	eb19 0309 	adds.w	r3, r9, r9
 80069be:	eb4a 040a 	adc.w	r4, sl, sl
 80069c2:	4699      	mov	r9, r3
 80069c4:	46a2      	mov	sl, r4
 80069c6:	eb19 090b 	adds.w	r9, r9, fp
 80069ca:	eb4a 0a0c 	adc.w	sl, sl, ip
 80069ce:	f04f 0100 	mov.w	r1, #0
 80069d2:	f04f 0200 	mov.w	r2, #0
 80069d6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069da:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069de:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069e2:	4689      	mov	r9, r1
 80069e4:	4692      	mov	sl, r2
 80069e6:	eb1b 0509 	adds.w	r5, fp, r9
 80069ea:	eb4c 060a 	adc.w	r6, ip, sl
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	4619      	mov	r1, r3
 80069f4:	f04f 0200 	mov.w	r2, #0
 80069f8:	f04f 0300 	mov.w	r3, #0
 80069fc:	f04f 0400 	mov.w	r4, #0
 8006a00:	0094      	lsls	r4, r2, #2
 8006a02:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a06:	008b      	lsls	r3, r1, #2
 8006a08:	461a      	mov	r2, r3
 8006a0a:	4623      	mov	r3, r4
 8006a0c:	4628      	mov	r0, r5
 8006a0e:	4631      	mov	r1, r6
 8006a10:	f7fa f91c 	bl	8000c4c <__aeabi_uldivmod>
 8006a14:	4603      	mov	r3, r0
 8006a16:	460c      	mov	r4, r1
 8006a18:	461a      	mov	r2, r3
 8006a1a:	4b77      	ldr	r3, [pc, #476]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006a1c:	fba3 1302 	umull	r1, r3, r3, r2
 8006a20:	095b      	lsrs	r3, r3, #5
 8006a22:	2164      	movs	r1, #100	; 0x64
 8006a24:	fb01 f303 	mul.w	r3, r1, r3
 8006a28:	1ad3      	subs	r3, r2, r3
 8006a2a:	011b      	lsls	r3, r3, #4
 8006a2c:	3332      	adds	r3, #50	; 0x32
 8006a2e:	4a72      	ldr	r2, [pc, #456]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006a30:	fba2 2303 	umull	r2, r3, r2, r3
 8006a34:	095b      	lsrs	r3, r3, #5
 8006a36:	f003 020f 	and.w	r2, r3, #15
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4442      	add	r2, r8
 8006a40:	609a      	str	r2, [r3, #8]
 8006a42:	e0d0      	b.n	8006be6 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006a44:	f7fe f892 	bl	8004b6c <HAL_RCC_GetPCLK1Freq>
 8006a48:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a4a:	68bb      	ldr	r3, [r7, #8]
 8006a4c:	469a      	mov	sl, r3
 8006a4e:	f04f 0b00 	mov.w	fp, #0
 8006a52:	46d0      	mov	r8, sl
 8006a54:	46d9      	mov	r9, fp
 8006a56:	eb18 0308 	adds.w	r3, r8, r8
 8006a5a:	eb49 0409 	adc.w	r4, r9, r9
 8006a5e:	4698      	mov	r8, r3
 8006a60:	46a1      	mov	r9, r4
 8006a62:	eb18 080a 	adds.w	r8, r8, sl
 8006a66:	eb49 090b 	adc.w	r9, r9, fp
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a76:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a7a:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a7e:	4688      	mov	r8, r1
 8006a80:	4691      	mov	r9, r2
 8006a82:	eb1a 0508 	adds.w	r5, sl, r8
 8006a86:	eb4b 0609 	adc.w	r6, fp, r9
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	685b      	ldr	r3, [r3, #4]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	f04f 0200 	mov.w	r2, #0
 8006a94:	f04f 0300 	mov.w	r3, #0
 8006a98:	f04f 0400 	mov.w	r4, #0
 8006a9c:	0094      	lsls	r4, r2, #2
 8006a9e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006aa2:	008b      	lsls	r3, r1, #2
 8006aa4:	461a      	mov	r2, r3
 8006aa6:	4623      	mov	r3, r4
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	4631      	mov	r1, r6
 8006aac:	f7fa f8ce 	bl	8000c4c <__aeabi_uldivmod>
 8006ab0:	4603      	mov	r3, r0
 8006ab2:	460c      	mov	r4, r1
 8006ab4:	461a      	mov	r2, r3
 8006ab6:	4b50      	ldr	r3, [pc, #320]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006ab8:	fba3 2302 	umull	r2, r3, r3, r2
 8006abc:	095b      	lsrs	r3, r3, #5
 8006abe:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	469b      	mov	fp, r3
 8006ac6:	f04f 0c00 	mov.w	ip, #0
 8006aca:	46d9      	mov	r9, fp
 8006acc:	46e2      	mov	sl, ip
 8006ace:	eb19 0309 	adds.w	r3, r9, r9
 8006ad2:	eb4a 040a 	adc.w	r4, sl, sl
 8006ad6:	4699      	mov	r9, r3
 8006ad8:	46a2      	mov	sl, r4
 8006ada:	eb19 090b 	adds.w	r9, r9, fp
 8006ade:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ae2:	f04f 0100 	mov.w	r1, #0
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006aee:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006af2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006af6:	4689      	mov	r9, r1
 8006af8:	4692      	mov	sl, r2
 8006afa:	eb1b 0509 	adds.w	r5, fp, r9
 8006afe:	eb4c 060a 	adc.w	r6, ip, sl
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	685b      	ldr	r3, [r3, #4]
 8006b06:	4619      	mov	r1, r3
 8006b08:	f04f 0200 	mov.w	r2, #0
 8006b0c:	f04f 0300 	mov.w	r3, #0
 8006b10:	f04f 0400 	mov.w	r4, #0
 8006b14:	0094      	lsls	r4, r2, #2
 8006b16:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b1a:	008b      	lsls	r3, r1, #2
 8006b1c:	461a      	mov	r2, r3
 8006b1e:	4623      	mov	r3, r4
 8006b20:	4628      	mov	r0, r5
 8006b22:	4631      	mov	r1, r6
 8006b24:	f7fa f892 	bl	8000c4c <__aeabi_uldivmod>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	460c      	mov	r4, r1
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b32      	ldr	r3, [pc, #200]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006b30:	fba3 1302 	umull	r1, r3, r3, r2
 8006b34:	095b      	lsrs	r3, r3, #5
 8006b36:	2164      	movs	r1, #100	; 0x64
 8006b38:	fb01 f303 	mul.w	r3, r1, r3
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	011b      	lsls	r3, r3, #4
 8006b40:	3332      	adds	r3, #50	; 0x32
 8006b42:	4a2d      	ldr	r2, [pc, #180]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006b44:	fba2 2303 	umull	r2, r3, r2, r3
 8006b48:	095b      	lsrs	r3, r3, #5
 8006b4a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b4e:	4498      	add	r8, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	469b      	mov	fp, r3
 8006b54:	f04f 0c00 	mov.w	ip, #0
 8006b58:	46d9      	mov	r9, fp
 8006b5a:	46e2      	mov	sl, ip
 8006b5c:	eb19 0309 	adds.w	r3, r9, r9
 8006b60:	eb4a 040a 	adc.w	r4, sl, sl
 8006b64:	4699      	mov	r9, r3
 8006b66:	46a2      	mov	sl, r4
 8006b68:	eb19 090b 	adds.w	r9, r9, fp
 8006b6c:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b70:	f04f 0100 	mov.w	r1, #0
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b7c:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b80:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b84:	4689      	mov	r9, r1
 8006b86:	4692      	mov	sl, r2
 8006b88:	eb1b 0509 	adds.w	r5, fp, r9
 8006b8c:	eb4c 060a 	adc.w	r6, ip, sl
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	685b      	ldr	r3, [r3, #4]
 8006b94:	4619      	mov	r1, r3
 8006b96:	f04f 0200 	mov.w	r2, #0
 8006b9a:	f04f 0300 	mov.w	r3, #0
 8006b9e:	f04f 0400 	mov.w	r4, #0
 8006ba2:	0094      	lsls	r4, r2, #2
 8006ba4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006ba8:	008b      	lsls	r3, r1, #2
 8006baa:	461a      	mov	r2, r3
 8006bac:	4623      	mov	r3, r4
 8006bae:	4628      	mov	r0, r5
 8006bb0:	4631      	mov	r1, r6
 8006bb2:	f7fa f84b 	bl	8000c4c <__aeabi_uldivmod>
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	460c      	mov	r4, r1
 8006bba:	461a      	mov	r2, r3
 8006bbc:	4b0e      	ldr	r3, [pc, #56]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006bbe:	fba3 1302 	umull	r1, r3, r3, r2
 8006bc2:	095b      	lsrs	r3, r3, #5
 8006bc4:	2164      	movs	r1, #100	; 0x64
 8006bc6:	fb01 f303 	mul.w	r3, r1, r3
 8006bca:	1ad3      	subs	r3, r2, r3
 8006bcc:	011b      	lsls	r3, r3, #4
 8006bce:	3332      	adds	r3, #50	; 0x32
 8006bd0:	4a09      	ldr	r2, [pc, #36]	; (8006bf8 <UART_SetConfig+0x6f4>)
 8006bd2:	fba2 2303 	umull	r2, r3, r2, r3
 8006bd6:	095b      	lsrs	r3, r3, #5
 8006bd8:	f003 020f 	and.w	r2, r3, #15
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	4442      	add	r2, r8
 8006be2:	609a      	str	r2, [r3, #8]
}
 8006be4:	e7ff      	b.n	8006be6 <UART_SetConfig+0x6e2>
 8006be6:	bf00      	nop
 8006be8:	3714      	adds	r7, #20
 8006bea:	46bd      	mov	sp, r7
 8006bec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bf0:	40011000 	.word	0x40011000
 8006bf4:	40011400 	.word	0x40011400
 8006bf8:	51eb851f 	.word	0x51eb851f

08006bfc <__errno>:
 8006bfc:	4b01      	ldr	r3, [pc, #4]	; (8006c04 <__errno+0x8>)
 8006bfe:	6818      	ldr	r0, [r3, #0]
 8006c00:	4770      	bx	lr
 8006c02:	bf00      	nop
 8006c04:	200000a0 	.word	0x200000a0

08006c08 <__libc_init_array>:
 8006c08:	b570      	push	{r4, r5, r6, lr}
 8006c0a:	4e0d      	ldr	r6, [pc, #52]	; (8006c40 <__libc_init_array+0x38>)
 8006c0c:	4c0d      	ldr	r4, [pc, #52]	; (8006c44 <__libc_init_array+0x3c>)
 8006c0e:	1ba4      	subs	r4, r4, r6
 8006c10:	10a4      	asrs	r4, r4, #2
 8006c12:	2500      	movs	r5, #0
 8006c14:	42a5      	cmp	r5, r4
 8006c16:	d109      	bne.n	8006c2c <__libc_init_array+0x24>
 8006c18:	4e0b      	ldr	r6, [pc, #44]	; (8006c48 <__libc_init_array+0x40>)
 8006c1a:	4c0c      	ldr	r4, [pc, #48]	; (8006c4c <__libc_init_array+0x44>)
 8006c1c:	f001 f944 	bl	8007ea8 <_init>
 8006c20:	1ba4      	subs	r4, r4, r6
 8006c22:	10a4      	asrs	r4, r4, #2
 8006c24:	2500      	movs	r5, #0
 8006c26:	42a5      	cmp	r5, r4
 8006c28:	d105      	bne.n	8006c36 <__libc_init_array+0x2e>
 8006c2a:	bd70      	pop	{r4, r5, r6, pc}
 8006c2c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c30:	4798      	blx	r3
 8006c32:	3501      	adds	r5, #1
 8006c34:	e7ee      	b.n	8006c14 <__libc_init_array+0xc>
 8006c36:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006c3a:	4798      	blx	r3
 8006c3c:	3501      	adds	r5, #1
 8006c3e:	e7f2      	b.n	8006c26 <__libc_init_array+0x1e>
 8006c40:	08008170 	.word	0x08008170
 8006c44:	08008170 	.word	0x08008170
 8006c48:	08008170 	.word	0x08008170
 8006c4c:	08008174 	.word	0x08008174

08006c50 <memset>:
 8006c50:	4402      	add	r2, r0
 8006c52:	4603      	mov	r3, r0
 8006c54:	4293      	cmp	r3, r2
 8006c56:	d100      	bne.n	8006c5a <memset+0xa>
 8006c58:	4770      	bx	lr
 8006c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8006c5e:	e7f9      	b.n	8006c54 <memset+0x4>

08006c60 <siscanf>:
 8006c60:	b40e      	push	{r1, r2, r3}
 8006c62:	b530      	push	{r4, r5, lr}
 8006c64:	b09c      	sub	sp, #112	; 0x70
 8006c66:	ac1f      	add	r4, sp, #124	; 0x7c
 8006c68:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006c6c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006c70:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006c74:	9002      	str	r0, [sp, #8]
 8006c76:	9006      	str	r0, [sp, #24]
 8006c78:	f7f9 faca 	bl	8000210 <strlen>
 8006c7c:	4b0b      	ldr	r3, [pc, #44]	; (8006cac <siscanf+0x4c>)
 8006c7e:	9003      	str	r0, [sp, #12]
 8006c80:	9007      	str	r0, [sp, #28]
 8006c82:	930b      	str	r3, [sp, #44]	; 0x2c
 8006c84:	480a      	ldr	r0, [pc, #40]	; (8006cb0 <siscanf+0x50>)
 8006c86:	9401      	str	r4, [sp, #4]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	930f      	str	r3, [sp, #60]	; 0x3c
 8006c8c:	9314      	str	r3, [sp, #80]	; 0x50
 8006c8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006c92:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c96:	462a      	mov	r2, r5
 8006c98:	4623      	mov	r3, r4
 8006c9a:	a902      	add	r1, sp, #8
 8006c9c:	6800      	ldr	r0, [r0, #0]
 8006c9e:	f000 f9e9 	bl	8007074 <__ssvfiscanf_r>
 8006ca2:	b01c      	add	sp, #112	; 0x70
 8006ca4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006ca8:	b003      	add	sp, #12
 8006caa:	4770      	bx	lr
 8006cac:	08006cb5 	.word	0x08006cb5
 8006cb0:	200000a0 	.word	0x200000a0

08006cb4 <__seofread>:
 8006cb4:	2000      	movs	r0, #0
 8006cb6:	4770      	bx	lr

08006cb8 <strncmp>:
 8006cb8:	b510      	push	{r4, lr}
 8006cba:	b16a      	cbz	r2, 8006cd8 <strncmp+0x20>
 8006cbc:	3901      	subs	r1, #1
 8006cbe:	1884      	adds	r4, r0, r2
 8006cc0:	f810 3b01 	ldrb.w	r3, [r0], #1
 8006cc4:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d103      	bne.n	8006cd4 <strncmp+0x1c>
 8006ccc:	42a0      	cmp	r0, r4
 8006cce:	d001      	beq.n	8006cd4 <strncmp+0x1c>
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d1f5      	bne.n	8006cc0 <strncmp+0x8>
 8006cd4:	1a98      	subs	r0, r3, r2
 8006cd6:	bd10      	pop	{r4, pc}
 8006cd8:	4610      	mov	r0, r2
 8006cda:	e7fc      	b.n	8006cd6 <strncmp+0x1e>

08006cdc <_vsiprintf_r>:
 8006cdc:	b500      	push	{lr}
 8006cde:	b09b      	sub	sp, #108	; 0x6c
 8006ce0:	9100      	str	r1, [sp, #0]
 8006ce2:	9104      	str	r1, [sp, #16]
 8006ce4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006ce8:	9105      	str	r1, [sp, #20]
 8006cea:	9102      	str	r1, [sp, #8]
 8006cec:	4905      	ldr	r1, [pc, #20]	; (8006d04 <_vsiprintf_r+0x28>)
 8006cee:	9103      	str	r1, [sp, #12]
 8006cf0:	4669      	mov	r1, sp
 8006cf2:	f000 f86d 	bl	8006dd0 <_svfiprintf_r>
 8006cf6:	9b00      	ldr	r3, [sp, #0]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	701a      	strb	r2, [r3, #0]
 8006cfc:	b01b      	add	sp, #108	; 0x6c
 8006cfe:	f85d fb04 	ldr.w	pc, [sp], #4
 8006d02:	bf00      	nop
 8006d04:	ffff0208 	.word	0xffff0208

08006d08 <vsiprintf>:
 8006d08:	4613      	mov	r3, r2
 8006d0a:	460a      	mov	r2, r1
 8006d0c:	4601      	mov	r1, r0
 8006d0e:	4802      	ldr	r0, [pc, #8]	; (8006d18 <vsiprintf+0x10>)
 8006d10:	6800      	ldr	r0, [r0, #0]
 8006d12:	f7ff bfe3 	b.w	8006cdc <_vsiprintf_r>
 8006d16:	bf00      	nop
 8006d18:	200000a0 	.word	0x200000a0

08006d1c <__ssputs_r>:
 8006d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d20:	688e      	ldr	r6, [r1, #8]
 8006d22:	429e      	cmp	r6, r3
 8006d24:	4682      	mov	sl, r0
 8006d26:	460c      	mov	r4, r1
 8006d28:	4690      	mov	r8, r2
 8006d2a:	4699      	mov	r9, r3
 8006d2c:	d837      	bhi.n	8006d9e <__ssputs_r+0x82>
 8006d2e:	898a      	ldrh	r2, [r1, #12]
 8006d30:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d34:	d031      	beq.n	8006d9a <__ssputs_r+0x7e>
 8006d36:	6825      	ldr	r5, [r4, #0]
 8006d38:	6909      	ldr	r1, [r1, #16]
 8006d3a:	1a6f      	subs	r7, r5, r1
 8006d3c:	6965      	ldr	r5, [r4, #20]
 8006d3e:	2302      	movs	r3, #2
 8006d40:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006d44:	fb95 f5f3 	sdiv	r5, r5, r3
 8006d48:	f109 0301 	add.w	r3, r9, #1
 8006d4c:	443b      	add	r3, r7
 8006d4e:	429d      	cmp	r5, r3
 8006d50:	bf38      	it	cc
 8006d52:	461d      	movcc	r5, r3
 8006d54:	0553      	lsls	r3, r2, #21
 8006d56:	d530      	bpl.n	8006dba <__ssputs_r+0x9e>
 8006d58:	4629      	mov	r1, r5
 8006d5a:	f000 ffd7 	bl	8007d0c <_malloc_r>
 8006d5e:	4606      	mov	r6, r0
 8006d60:	b950      	cbnz	r0, 8006d78 <__ssputs_r+0x5c>
 8006d62:	230c      	movs	r3, #12
 8006d64:	f8ca 3000 	str.w	r3, [sl]
 8006d68:	89a3      	ldrh	r3, [r4, #12]
 8006d6a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	f04f 30ff 	mov.w	r0, #4294967295
 8006d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d78:	463a      	mov	r2, r7
 8006d7a:	6921      	ldr	r1, [r4, #16]
 8006d7c:	f000 ff54 	bl	8007c28 <memcpy>
 8006d80:	89a3      	ldrh	r3, [r4, #12]
 8006d82:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006d86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d8a:	81a3      	strh	r3, [r4, #12]
 8006d8c:	6126      	str	r6, [r4, #16]
 8006d8e:	6165      	str	r5, [r4, #20]
 8006d90:	443e      	add	r6, r7
 8006d92:	1bed      	subs	r5, r5, r7
 8006d94:	6026      	str	r6, [r4, #0]
 8006d96:	60a5      	str	r5, [r4, #8]
 8006d98:	464e      	mov	r6, r9
 8006d9a:	454e      	cmp	r6, r9
 8006d9c:	d900      	bls.n	8006da0 <__ssputs_r+0x84>
 8006d9e:	464e      	mov	r6, r9
 8006da0:	4632      	mov	r2, r6
 8006da2:	4641      	mov	r1, r8
 8006da4:	6820      	ldr	r0, [r4, #0]
 8006da6:	f000 ff4a 	bl	8007c3e <memmove>
 8006daa:	68a3      	ldr	r3, [r4, #8]
 8006dac:	1b9b      	subs	r3, r3, r6
 8006dae:	60a3      	str	r3, [r4, #8]
 8006db0:	6823      	ldr	r3, [r4, #0]
 8006db2:	441e      	add	r6, r3
 8006db4:	6026      	str	r6, [r4, #0]
 8006db6:	2000      	movs	r0, #0
 8006db8:	e7dc      	b.n	8006d74 <__ssputs_r+0x58>
 8006dba:	462a      	mov	r2, r5
 8006dbc:	f001 f800 	bl	8007dc0 <_realloc_r>
 8006dc0:	4606      	mov	r6, r0
 8006dc2:	2800      	cmp	r0, #0
 8006dc4:	d1e2      	bne.n	8006d8c <__ssputs_r+0x70>
 8006dc6:	6921      	ldr	r1, [r4, #16]
 8006dc8:	4650      	mov	r0, sl
 8006dca:	f000 ff51 	bl	8007c70 <_free_r>
 8006dce:	e7c8      	b.n	8006d62 <__ssputs_r+0x46>

08006dd0 <_svfiprintf_r>:
 8006dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dd4:	461d      	mov	r5, r3
 8006dd6:	898b      	ldrh	r3, [r1, #12]
 8006dd8:	061f      	lsls	r7, r3, #24
 8006dda:	b09d      	sub	sp, #116	; 0x74
 8006ddc:	4680      	mov	r8, r0
 8006dde:	460c      	mov	r4, r1
 8006de0:	4616      	mov	r6, r2
 8006de2:	d50f      	bpl.n	8006e04 <_svfiprintf_r+0x34>
 8006de4:	690b      	ldr	r3, [r1, #16]
 8006de6:	b96b      	cbnz	r3, 8006e04 <_svfiprintf_r+0x34>
 8006de8:	2140      	movs	r1, #64	; 0x40
 8006dea:	f000 ff8f 	bl	8007d0c <_malloc_r>
 8006dee:	6020      	str	r0, [r4, #0]
 8006df0:	6120      	str	r0, [r4, #16]
 8006df2:	b928      	cbnz	r0, 8006e00 <_svfiprintf_r+0x30>
 8006df4:	230c      	movs	r3, #12
 8006df6:	f8c8 3000 	str.w	r3, [r8]
 8006dfa:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfe:	e0c8      	b.n	8006f92 <_svfiprintf_r+0x1c2>
 8006e00:	2340      	movs	r3, #64	; 0x40
 8006e02:	6163      	str	r3, [r4, #20]
 8006e04:	2300      	movs	r3, #0
 8006e06:	9309      	str	r3, [sp, #36]	; 0x24
 8006e08:	2320      	movs	r3, #32
 8006e0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e0e:	2330      	movs	r3, #48	; 0x30
 8006e10:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e14:	9503      	str	r5, [sp, #12]
 8006e16:	f04f 0b01 	mov.w	fp, #1
 8006e1a:	4637      	mov	r7, r6
 8006e1c:	463d      	mov	r5, r7
 8006e1e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006e22:	b10b      	cbz	r3, 8006e28 <_svfiprintf_r+0x58>
 8006e24:	2b25      	cmp	r3, #37	; 0x25
 8006e26:	d13e      	bne.n	8006ea6 <_svfiprintf_r+0xd6>
 8006e28:	ebb7 0a06 	subs.w	sl, r7, r6
 8006e2c:	d00b      	beq.n	8006e46 <_svfiprintf_r+0x76>
 8006e2e:	4653      	mov	r3, sl
 8006e30:	4632      	mov	r2, r6
 8006e32:	4621      	mov	r1, r4
 8006e34:	4640      	mov	r0, r8
 8006e36:	f7ff ff71 	bl	8006d1c <__ssputs_r>
 8006e3a:	3001      	adds	r0, #1
 8006e3c:	f000 80a4 	beq.w	8006f88 <_svfiprintf_r+0x1b8>
 8006e40:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e42:	4453      	add	r3, sl
 8006e44:	9309      	str	r3, [sp, #36]	; 0x24
 8006e46:	783b      	ldrb	r3, [r7, #0]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f000 809d 	beq.w	8006f88 <_svfiprintf_r+0x1b8>
 8006e4e:	2300      	movs	r3, #0
 8006e50:	f04f 32ff 	mov.w	r2, #4294967295
 8006e54:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006e58:	9304      	str	r3, [sp, #16]
 8006e5a:	9307      	str	r3, [sp, #28]
 8006e5c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006e60:	931a      	str	r3, [sp, #104]	; 0x68
 8006e62:	462f      	mov	r7, r5
 8006e64:	2205      	movs	r2, #5
 8006e66:	f817 1b01 	ldrb.w	r1, [r7], #1
 8006e6a:	4850      	ldr	r0, [pc, #320]	; (8006fac <_svfiprintf_r+0x1dc>)
 8006e6c:	f7f9 f9d8 	bl	8000220 <memchr>
 8006e70:	9b04      	ldr	r3, [sp, #16]
 8006e72:	b9d0      	cbnz	r0, 8006eaa <_svfiprintf_r+0xda>
 8006e74:	06d9      	lsls	r1, r3, #27
 8006e76:	bf44      	itt	mi
 8006e78:	2220      	movmi	r2, #32
 8006e7a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e7e:	071a      	lsls	r2, r3, #28
 8006e80:	bf44      	itt	mi
 8006e82:	222b      	movmi	r2, #43	; 0x2b
 8006e84:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8006e88:	782a      	ldrb	r2, [r5, #0]
 8006e8a:	2a2a      	cmp	r2, #42	; 0x2a
 8006e8c:	d015      	beq.n	8006eba <_svfiprintf_r+0xea>
 8006e8e:	9a07      	ldr	r2, [sp, #28]
 8006e90:	462f      	mov	r7, r5
 8006e92:	2000      	movs	r0, #0
 8006e94:	250a      	movs	r5, #10
 8006e96:	4639      	mov	r1, r7
 8006e98:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006e9c:	3b30      	subs	r3, #48	; 0x30
 8006e9e:	2b09      	cmp	r3, #9
 8006ea0:	d94d      	bls.n	8006f3e <_svfiprintf_r+0x16e>
 8006ea2:	b1b8      	cbz	r0, 8006ed4 <_svfiprintf_r+0x104>
 8006ea4:	e00f      	b.n	8006ec6 <_svfiprintf_r+0xf6>
 8006ea6:	462f      	mov	r7, r5
 8006ea8:	e7b8      	b.n	8006e1c <_svfiprintf_r+0x4c>
 8006eaa:	4a40      	ldr	r2, [pc, #256]	; (8006fac <_svfiprintf_r+0x1dc>)
 8006eac:	1a80      	subs	r0, r0, r2
 8006eae:	fa0b f000 	lsl.w	r0, fp, r0
 8006eb2:	4318      	orrs	r0, r3
 8006eb4:	9004      	str	r0, [sp, #16]
 8006eb6:	463d      	mov	r5, r7
 8006eb8:	e7d3      	b.n	8006e62 <_svfiprintf_r+0x92>
 8006eba:	9a03      	ldr	r2, [sp, #12]
 8006ebc:	1d11      	adds	r1, r2, #4
 8006ebe:	6812      	ldr	r2, [r2, #0]
 8006ec0:	9103      	str	r1, [sp, #12]
 8006ec2:	2a00      	cmp	r2, #0
 8006ec4:	db01      	blt.n	8006eca <_svfiprintf_r+0xfa>
 8006ec6:	9207      	str	r2, [sp, #28]
 8006ec8:	e004      	b.n	8006ed4 <_svfiprintf_r+0x104>
 8006eca:	4252      	negs	r2, r2
 8006ecc:	f043 0302 	orr.w	r3, r3, #2
 8006ed0:	9207      	str	r2, [sp, #28]
 8006ed2:	9304      	str	r3, [sp, #16]
 8006ed4:	783b      	ldrb	r3, [r7, #0]
 8006ed6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ed8:	d10c      	bne.n	8006ef4 <_svfiprintf_r+0x124>
 8006eda:	787b      	ldrb	r3, [r7, #1]
 8006edc:	2b2a      	cmp	r3, #42	; 0x2a
 8006ede:	d133      	bne.n	8006f48 <_svfiprintf_r+0x178>
 8006ee0:	9b03      	ldr	r3, [sp, #12]
 8006ee2:	1d1a      	adds	r2, r3, #4
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	9203      	str	r2, [sp, #12]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	bfb8      	it	lt
 8006eec:	f04f 33ff 	movlt.w	r3, #4294967295
 8006ef0:	3702      	adds	r7, #2
 8006ef2:	9305      	str	r3, [sp, #20]
 8006ef4:	4d2e      	ldr	r5, [pc, #184]	; (8006fb0 <_svfiprintf_r+0x1e0>)
 8006ef6:	7839      	ldrb	r1, [r7, #0]
 8006ef8:	2203      	movs	r2, #3
 8006efa:	4628      	mov	r0, r5
 8006efc:	f7f9 f990 	bl	8000220 <memchr>
 8006f00:	b138      	cbz	r0, 8006f12 <_svfiprintf_r+0x142>
 8006f02:	2340      	movs	r3, #64	; 0x40
 8006f04:	1b40      	subs	r0, r0, r5
 8006f06:	fa03 f000 	lsl.w	r0, r3, r0
 8006f0a:	9b04      	ldr	r3, [sp, #16]
 8006f0c:	4303      	orrs	r3, r0
 8006f0e:	3701      	adds	r7, #1
 8006f10:	9304      	str	r3, [sp, #16]
 8006f12:	7839      	ldrb	r1, [r7, #0]
 8006f14:	4827      	ldr	r0, [pc, #156]	; (8006fb4 <_svfiprintf_r+0x1e4>)
 8006f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f1a:	2206      	movs	r2, #6
 8006f1c:	1c7e      	adds	r6, r7, #1
 8006f1e:	f7f9 f97f 	bl	8000220 <memchr>
 8006f22:	2800      	cmp	r0, #0
 8006f24:	d038      	beq.n	8006f98 <_svfiprintf_r+0x1c8>
 8006f26:	4b24      	ldr	r3, [pc, #144]	; (8006fb8 <_svfiprintf_r+0x1e8>)
 8006f28:	bb13      	cbnz	r3, 8006f70 <_svfiprintf_r+0x1a0>
 8006f2a:	9b03      	ldr	r3, [sp, #12]
 8006f2c:	3307      	adds	r3, #7
 8006f2e:	f023 0307 	bic.w	r3, r3, #7
 8006f32:	3308      	adds	r3, #8
 8006f34:	9303      	str	r3, [sp, #12]
 8006f36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006f38:	444b      	add	r3, r9
 8006f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8006f3c:	e76d      	b.n	8006e1a <_svfiprintf_r+0x4a>
 8006f3e:	fb05 3202 	mla	r2, r5, r2, r3
 8006f42:	2001      	movs	r0, #1
 8006f44:	460f      	mov	r7, r1
 8006f46:	e7a6      	b.n	8006e96 <_svfiprintf_r+0xc6>
 8006f48:	2300      	movs	r3, #0
 8006f4a:	3701      	adds	r7, #1
 8006f4c:	9305      	str	r3, [sp, #20]
 8006f4e:	4619      	mov	r1, r3
 8006f50:	250a      	movs	r5, #10
 8006f52:	4638      	mov	r0, r7
 8006f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f58:	3a30      	subs	r2, #48	; 0x30
 8006f5a:	2a09      	cmp	r2, #9
 8006f5c:	d903      	bls.n	8006f66 <_svfiprintf_r+0x196>
 8006f5e:	2b00      	cmp	r3, #0
 8006f60:	d0c8      	beq.n	8006ef4 <_svfiprintf_r+0x124>
 8006f62:	9105      	str	r1, [sp, #20]
 8006f64:	e7c6      	b.n	8006ef4 <_svfiprintf_r+0x124>
 8006f66:	fb05 2101 	mla	r1, r5, r1, r2
 8006f6a:	2301      	movs	r3, #1
 8006f6c:	4607      	mov	r7, r0
 8006f6e:	e7f0      	b.n	8006f52 <_svfiprintf_r+0x182>
 8006f70:	ab03      	add	r3, sp, #12
 8006f72:	9300      	str	r3, [sp, #0]
 8006f74:	4622      	mov	r2, r4
 8006f76:	4b11      	ldr	r3, [pc, #68]	; (8006fbc <_svfiprintf_r+0x1ec>)
 8006f78:	a904      	add	r1, sp, #16
 8006f7a:	4640      	mov	r0, r8
 8006f7c:	f3af 8000 	nop.w
 8006f80:	f1b0 3fff 	cmp.w	r0, #4294967295
 8006f84:	4681      	mov	r9, r0
 8006f86:	d1d6      	bne.n	8006f36 <_svfiprintf_r+0x166>
 8006f88:	89a3      	ldrh	r3, [r4, #12]
 8006f8a:	065b      	lsls	r3, r3, #25
 8006f8c:	f53f af35 	bmi.w	8006dfa <_svfiprintf_r+0x2a>
 8006f90:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f92:	b01d      	add	sp, #116	; 0x74
 8006f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f98:	ab03      	add	r3, sp, #12
 8006f9a:	9300      	str	r3, [sp, #0]
 8006f9c:	4622      	mov	r2, r4
 8006f9e:	4b07      	ldr	r3, [pc, #28]	; (8006fbc <_svfiprintf_r+0x1ec>)
 8006fa0:	a904      	add	r1, sp, #16
 8006fa2:	4640      	mov	r0, r8
 8006fa4:	f000 fa2c 	bl	8007400 <_printf_i>
 8006fa8:	e7ea      	b.n	8006f80 <_svfiprintf_r+0x1b0>
 8006faa:	bf00      	nop
 8006fac:	08007fac 	.word	0x08007fac
 8006fb0:	08007fb2 	.word	0x08007fb2
 8006fb4:	08007fb6 	.word	0x08007fb6
 8006fb8:	00000000 	.word	0x00000000
 8006fbc:	08006d1d 	.word	0x08006d1d

08006fc0 <_sungetc_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	1c4b      	adds	r3, r1, #1
 8006fc4:	4614      	mov	r4, r2
 8006fc6:	d103      	bne.n	8006fd0 <_sungetc_r+0x10>
 8006fc8:	f04f 35ff 	mov.w	r5, #4294967295
 8006fcc:	4628      	mov	r0, r5
 8006fce:	bd38      	pop	{r3, r4, r5, pc}
 8006fd0:	8993      	ldrh	r3, [r2, #12]
 8006fd2:	f023 0320 	bic.w	r3, r3, #32
 8006fd6:	8193      	strh	r3, [r2, #12]
 8006fd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fda:	6852      	ldr	r2, [r2, #4]
 8006fdc:	b2cd      	uxtb	r5, r1
 8006fde:	b18b      	cbz	r3, 8007004 <_sungetc_r+0x44>
 8006fe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	dd08      	ble.n	8006ff8 <_sungetc_r+0x38>
 8006fe6:	6823      	ldr	r3, [r4, #0]
 8006fe8:	1e5a      	subs	r2, r3, #1
 8006fea:	6022      	str	r2, [r4, #0]
 8006fec:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006ff0:	6863      	ldr	r3, [r4, #4]
 8006ff2:	3301      	adds	r3, #1
 8006ff4:	6063      	str	r3, [r4, #4]
 8006ff6:	e7e9      	b.n	8006fcc <_sungetc_r+0xc>
 8006ff8:	4621      	mov	r1, r4
 8006ffa:	f000 fdb7 	bl	8007b6c <__submore>
 8006ffe:	2800      	cmp	r0, #0
 8007000:	d0f1      	beq.n	8006fe6 <_sungetc_r+0x26>
 8007002:	e7e1      	b.n	8006fc8 <_sungetc_r+0x8>
 8007004:	6921      	ldr	r1, [r4, #16]
 8007006:	6823      	ldr	r3, [r4, #0]
 8007008:	b151      	cbz	r1, 8007020 <_sungetc_r+0x60>
 800700a:	4299      	cmp	r1, r3
 800700c:	d208      	bcs.n	8007020 <_sungetc_r+0x60>
 800700e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8007012:	42a9      	cmp	r1, r5
 8007014:	d104      	bne.n	8007020 <_sungetc_r+0x60>
 8007016:	3b01      	subs	r3, #1
 8007018:	3201      	adds	r2, #1
 800701a:	6023      	str	r3, [r4, #0]
 800701c:	6062      	str	r2, [r4, #4]
 800701e:	e7d5      	b.n	8006fcc <_sungetc_r+0xc>
 8007020:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8007024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007028:	6363      	str	r3, [r4, #52]	; 0x34
 800702a:	2303      	movs	r3, #3
 800702c:	63a3      	str	r3, [r4, #56]	; 0x38
 800702e:	4623      	mov	r3, r4
 8007030:	f803 5f46 	strb.w	r5, [r3, #70]!
 8007034:	6023      	str	r3, [r4, #0]
 8007036:	2301      	movs	r3, #1
 8007038:	e7dc      	b.n	8006ff4 <_sungetc_r+0x34>

0800703a <__ssrefill_r>:
 800703a:	b510      	push	{r4, lr}
 800703c:	460c      	mov	r4, r1
 800703e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007040:	b169      	cbz	r1, 800705e <__ssrefill_r+0x24>
 8007042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007046:	4299      	cmp	r1, r3
 8007048:	d001      	beq.n	800704e <__ssrefill_r+0x14>
 800704a:	f000 fe11 	bl	8007c70 <_free_r>
 800704e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007050:	6063      	str	r3, [r4, #4]
 8007052:	2000      	movs	r0, #0
 8007054:	6360      	str	r0, [r4, #52]	; 0x34
 8007056:	b113      	cbz	r3, 800705e <__ssrefill_r+0x24>
 8007058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800705a:	6023      	str	r3, [r4, #0]
 800705c:	bd10      	pop	{r4, pc}
 800705e:	6923      	ldr	r3, [r4, #16]
 8007060:	6023      	str	r3, [r4, #0]
 8007062:	2300      	movs	r3, #0
 8007064:	6063      	str	r3, [r4, #4]
 8007066:	89a3      	ldrh	r3, [r4, #12]
 8007068:	f043 0320 	orr.w	r3, r3, #32
 800706c:	81a3      	strh	r3, [r4, #12]
 800706e:	f04f 30ff 	mov.w	r0, #4294967295
 8007072:	e7f3      	b.n	800705c <__ssrefill_r+0x22>

08007074 <__ssvfiscanf_r>:
 8007074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007078:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800707c:	460c      	mov	r4, r1
 800707e:	2100      	movs	r1, #0
 8007080:	9144      	str	r1, [sp, #272]	; 0x110
 8007082:	9145      	str	r1, [sp, #276]	; 0x114
 8007084:	499f      	ldr	r1, [pc, #636]	; (8007304 <__ssvfiscanf_r+0x290>)
 8007086:	91a0      	str	r1, [sp, #640]	; 0x280
 8007088:	f10d 0804 	add.w	r8, sp, #4
 800708c:	499e      	ldr	r1, [pc, #632]	; (8007308 <__ssvfiscanf_r+0x294>)
 800708e:	f8df 927c 	ldr.w	r9, [pc, #636]	; 800730c <__ssvfiscanf_r+0x298>
 8007092:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 8007096:	4606      	mov	r6, r0
 8007098:	4692      	mov	sl, r2
 800709a:	91a1      	str	r1, [sp, #644]	; 0x284
 800709c:	9300      	str	r3, [sp, #0]
 800709e:	270a      	movs	r7, #10
 80070a0:	f89a 3000 	ldrb.w	r3, [sl]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 812a 	beq.w	80072fe <__ssvfiscanf_r+0x28a>
 80070aa:	4655      	mov	r5, sl
 80070ac:	f000 fd9c 	bl	8007be8 <__locale_ctype_ptr>
 80070b0:	f815 bb01 	ldrb.w	fp, [r5], #1
 80070b4:	4458      	add	r0, fp
 80070b6:	7843      	ldrb	r3, [r0, #1]
 80070b8:	f013 0308 	ands.w	r3, r3, #8
 80070bc:	d01c      	beq.n	80070f8 <__ssvfiscanf_r+0x84>
 80070be:	6863      	ldr	r3, [r4, #4]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	dd12      	ble.n	80070ea <__ssvfiscanf_r+0x76>
 80070c4:	f000 fd90 	bl	8007be8 <__locale_ctype_ptr>
 80070c8:	6823      	ldr	r3, [r4, #0]
 80070ca:	781a      	ldrb	r2, [r3, #0]
 80070cc:	4410      	add	r0, r2
 80070ce:	7842      	ldrb	r2, [r0, #1]
 80070d0:	0712      	lsls	r2, r2, #28
 80070d2:	d401      	bmi.n	80070d8 <__ssvfiscanf_r+0x64>
 80070d4:	46aa      	mov	sl, r5
 80070d6:	e7e3      	b.n	80070a0 <__ssvfiscanf_r+0x2c>
 80070d8:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80070da:	3201      	adds	r2, #1
 80070dc:	9245      	str	r2, [sp, #276]	; 0x114
 80070de:	6862      	ldr	r2, [r4, #4]
 80070e0:	3301      	adds	r3, #1
 80070e2:	3a01      	subs	r2, #1
 80070e4:	6062      	str	r2, [r4, #4]
 80070e6:	6023      	str	r3, [r4, #0]
 80070e8:	e7e9      	b.n	80070be <__ssvfiscanf_r+0x4a>
 80070ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80070ec:	4621      	mov	r1, r4
 80070ee:	4630      	mov	r0, r6
 80070f0:	4798      	blx	r3
 80070f2:	2800      	cmp	r0, #0
 80070f4:	d0e6      	beq.n	80070c4 <__ssvfiscanf_r+0x50>
 80070f6:	e7ed      	b.n	80070d4 <__ssvfiscanf_r+0x60>
 80070f8:	f1bb 0f25 	cmp.w	fp, #37	; 0x25
 80070fc:	f040 8082 	bne.w	8007204 <__ssvfiscanf_r+0x190>
 8007100:	9343      	str	r3, [sp, #268]	; 0x10c
 8007102:	9341      	str	r3, [sp, #260]	; 0x104
 8007104:	f89a 3001 	ldrb.w	r3, [sl, #1]
 8007108:	2b2a      	cmp	r3, #42	; 0x2a
 800710a:	d103      	bne.n	8007114 <__ssvfiscanf_r+0xa0>
 800710c:	2310      	movs	r3, #16
 800710e:	9341      	str	r3, [sp, #260]	; 0x104
 8007110:	f10a 0502 	add.w	r5, sl, #2
 8007114:	46aa      	mov	sl, r5
 8007116:	f815 1b01 	ldrb.w	r1, [r5], #1
 800711a:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800711e:	2a09      	cmp	r2, #9
 8007120:	d922      	bls.n	8007168 <__ssvfiscanf_r+0xf4>
 8007122:	2203      	movs	r2, #3
 8007124:	4879      	ldr	r0, [pc, #484]	; (800730c <__ssvfiscanf_r+0x298>)
 8007126:	f7f9 f87b 	bl	8000220 <memchr>
 800712a:	b138      	cbz	r0, 800713c <__ssvfiscanf_r+0xc8>
 800712c:	eba0 0309 	sub.w	r3, r0, r9
 8007130:	2001      	movs	r0, #1
 8007132:	4098      	lsls	r0, r3
 8007134:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007136:	4318      	orrs	r0, r3
 8007138:	9041      	str	r0, [sp, #260]	; 0x104
 800713a:	46aa      	mov	sl, r5
 800713c:	f89a 3000 	ldrb.w	r3, [sl]
 8007140:	2b67      	cmp	r3, #103	; 0x67
 8007142:	f10a 0501 	add.w	r5, sl, #1
 8007146:	d82b      	bhi.n	80071a0 <__ssvfiscanf_r+0x12c>
 8007148:	2b65      	cmp	r3, #101	; 0x65
 800714a:	f080 809f 	bcs.w	800728c <__ssvfiscanf_r+0x218>
 800714e:	2b47      	cmp	r3, #71	; 0x47
 8007150:	d810      	bhi.n	8007174 <__ssvfiscanf_r+0x100>
 8007152:	2b45      	cmp	r3, #69	; 0x45
 8007154:	f080 809a 	bcs.w	800728c <__ssvfiscanf_r+0x218>
 8007158:	2b00      	cmp	r3, #0
 800715a:	d06c      	beq.n	8007236 <__ssvfiscanf_r+0x1c2>
 800715c:	2b25      	cmp	r3, #37	; 0x25
 800715e:	d051      	beq.n	8007204 <__ssvfiscanf_r+0x190>
 8007160:	2303      	movs	r3, #3
 8007162:	9347      	str	r3, [sp, #284]	; 0x11c
 8007164:	9742      	str	r7, [sp, #264]	; 0x108
 8007166:	e027      	b.n	80071b8 <__ssvfiscanf_r+0x144>
 8007168:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800716a:	fb07 1303 	mla	r3, r7, r3, r1
 800716e:	3b30      	subs	r3, #48	; 0x30
 8007170:	9343      	str	r3, [sp, #268]	; 0x10c
 8007172:	e7cf      	b.n	8007114 <__ssvfiscanf_r+0xa0>
 8007174:	2b5b      	cmp	r3, #91	; 0x5b
 8007176:	d06a      	beq.n	800724e <__ssvfiscanf_r+0x1da>
 8007178:	d80c      	bhi.n	8007194 <__ssvfiscanf_r+0x120>
 800717a:	2b58      	cmp	r3, #88	; 0x58
 800717c:	d1f0      	bne.n	8007160 <__ssvfiscanf_r+0xec>
 800717e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8007180:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8007184:	9241      	str	r2, [sp, #260]	; 0x104
 8007186:	2210      	movs	r2, #16
 8007188:	9242      	str	r2, [sp, #264]	; 0x108
 800718a:	2b6e      	cmp	r3, #110	; 0x6e
 800718c:	bf8c      	ite	hi
 800718e:	2304      	movhi	r3, #4
 8007190:	2303      	movls	r3, #3
 8007192:	e010      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 8007194:	2b63      	cmp	r3, #99	; 0x63
 8007196:	d065      	beq.n	8007264 <__ssvfiscanf_r+0x1f0>
 8007198:	2b64      	cmp	r3, #100	; 0x64
 800719a:	d1e1      	bne.n	8007160 <__ssvfiscanf_r+0xec>
 800719c:	9742      	str	r7, [sp, #264]	; 0x108
 800719e:	e7f4      	b.n	800718a <__ssvfiscanf_r+0x116>
 80071a0:	2b70      	cmp	r3, #112	; 0x70
 80071a2:	d04b      	beq.n	800723c <__ssvfiscanf_r+0x1c8>
 80071a4:	d826      	bhi.n	80071f4 <__ssvfiscanf_r+0x180>
 80071a6:	2b6e      	cmp	r3, #110	; 0x6e
 80071a8:	d062      	beq.n	8007270 <__ssvfiscanf_r+0x1fc>
 80071aa:	d84c      	bhi.n	8007246 <__ssvfiscanf_r+0x1d2>
 80071ac:	2b69      	cmp	r3, #105	; 0x69
 80071ae:	d1d7      	bne.n	8007160 <__ssvfiscanf_r+0xec>
 80071b0:	2300      	movs	r3, #0
 80071b2:	9342      	str	r3, [sp, #264]	; 0x108
 80071b4:	2303      	movs	r3, #3
 80071b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	dd68      	ble.n	8007290 <__ssvfiscanf_r+0x21c>
 80071be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80071c0:	0659      	lsls	r1, r3, #25
 80071c2:	d407      	bmi.n	80071d4 <__ssvfiscanf_r+0x160>
 80071c4:	f000 fd10 	bl	8007be8 <__locale_ctype_ptr>
 80071c8:	6823      	ldr	r3, [r4, #0]
 80071ca:	781a      	ldrb	r2, [r3, #0]
 80071cc:	4410      	add	r0, r2
 80071ce:	7842      	ldrb	r2, [r0, #1]
 80071d0:	0712      	lsls	r2, r2, #28
 80071d2:	d464      	bmi.n	800729e <__ssvfiscanf_r+0x22a>
 80071d4:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80071d6:	2b02      	cmp	r3, #2
 80071d8:	dc73      	bgt.n	80072c2 <__ssvfiscanf_r+0x24e>
 80071da:	466b      	mov	r3, sp
 80071dc:	4622      	mov	r2, r4
 80071de:	a941      	add	r1, sp, #260	; 0x104
 80071e0:	4630      	mov	r0, r6
 80071e2:	f000 fa1f 	bl	8007624 <_scanf_chars>
 80071e6:	2801      	cmp	r0, #1
 80071e8:	f000 8089 	beq.w	80072fe <__ssvfiscanf_r+0x28a>
 80071ec:	2802      	cmp	r0, #2
 80071ee:	f47f af71 	bne.w	80070d4 <__ssvfiscanf_r+0x60>
 80071f2:	e01d      	b.n	8007230 <__ssvfiscanf_r+0x1bc>
 80071f4:	2b75      	cmp	r3, #117	; 0x75
 80071f6:	d0d1      	beq.n	800719c <__ssvfiscanf_r+0x128>
 80071f8:	2b78      	cmp	r3, #120	; 0x78
 80071fa:	d0c0      	beq.n	800717e <__ssvfiscanf_r+0x10a>
 80071fc:	2b73      	cmp	r3, #115	; 0x73
 80071fe:	d1af      	bne.n	8007160 <__ssvfiscanf_r+0xec>
 8007200:	2302      	movs	r3, #2
 8007202:	e7d8      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 8007204:	6863      	ldr	r3, [r4, #4]
 8007206:	2b00      	cmp	r3, #0
 8007208:	dd0c      	ble.n	8007224 <__ssvfiscanf_r+0x1b0>
 800720a:	6823      	ldr	r3, [r4, #0]
 800720c:	781a      	ldrb	r2, [r3, #0]
 800720e:	455a      	cmp	r2, fp
 8007210:	d175      	bne.n	80072fe <__ssvfiscanf_r+0x28a>
 8007212:	3301      	adds	r3, #1
 8007214:	6862      	ldr	r2, [r4, #4]
 8007216:	6023      	str	r3, [r4, #0]
 8007218:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800721a:	3a01      	subs	r2, #1
 800721c:	3301      	adds	r3, #1
 800721e:	6062      	str	r2, [r4, #4]
 8007220:	9345      	str	r3, [sp, #276]	; 0x114
 8007222:	e757      	b.n	80070d4 <__ssvfiscanf_r+0x60>
 8007224:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007226:	4621      	mov	r1, r4
 8007228:	4630      	mov	r0, r6
 800722a:	4798      	blx	r3
 800722c:	2800      	cmp	r0, #0
 800722e:	d0ec      	beq.n	800720a <__ssvfiscanf_r+0x196>
 8007230:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007232:	2800      	cmp	r0, #0
 8007234:	d159      	bne.n	80072ea <__ssvfiscanf_r+0x276>
 8007236:	f04f 30ff 	mov.w	r0, #4294967295
 800723a:	e05c      	b.n	80072f6 <__ssvfiscanf_r+0x282>
 800723c:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800723e:	f042 0220 	orr.w	r2, r2, #32
 8007242:	9241      	str	r2, [sp, #260]	; 0x104
 8007244:	e79b      	b.n	800717e <__ssvfiscanf_r+0x10a>
 8007246:	2308      	movs	r3, #8
 8007248:	9342      	str	r3, [sp, #264]	; 0x108
 800724a:	2304      	movs	r3, #4
 800724c:	e7b3      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 800724e:	4629      	mov	r1, r5
 8007250:	4640      	mov	r0, r8
 8007252:	f000 fb3f 	bl	80078d4 <__sccl>
 8007256:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007258:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800725c:	9341      	str	r3, [sp, #260]	; 0x104
 800725e:	4605      	mov	r5, r0
 8007260:	2301      	movs	r3, #1
 8007262:	e7a8      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 8007264:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8007266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800726a:	9341      	str	r3, [sp, #260]	; 0x104
 800726c:	2300      	movs	r3, #0
 800726e:	e7a2      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 8007270:	9841      	ldr	r0, [sp, #260]	; 0x104
 8007272:	06c3      	lsls	r3, r0, #27
 8007274:	f53f af2e 	bmi.w	80070d4 <__ssvfiscanf_r+0x60>
 8007278:	9b00      	ldr	r3, [sp, #0]
 800727a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800727c:	1d19      	adds	r1, r3, #4
 800727e:	9100      	str	r1, [sp, #0]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	07c0      	lsls	r0, r0, #31
 8007284:	bf4c      	ite	mi
 8007286:	801a      	strhmi	r2, [r3, #0]
 8007288:	601a      	strpl	r2, [r3, #0]
 800728a:	e723      	b.n	80070d4 <__ssvfiscanf_r+0x60>
 800728c:	2305      	movs	r3, #5
 800728e:	e792      	b.n	80071b6 <__ssvfiscanf_r+0x142>
 8007290:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8007292:	4621      	mov	r1, r4
 8007294:	4630      	mov	r0, r6
 8007296:	4798      	blx	r3
 8007298:	2800      	cmp	r0, #0
 800729a:	d090      	beq.n	80071be <__ssvfiscanf_r+0x14a>
 800729c:	e7c8      	b.n	8007230 <__ssvfiscanf_r+0x1bc>
 800729e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80072a0:	3201      	adds	r2, #1
 80072a2:	9245      	str	r2, [sp, #276]	; 0x114
 80072a4:	6862      	ldr	r2, [r4, #4]
 80072a6:	3a01      	subs	r2, #1
 80072a8:	2a00      	cmp	r2, #0
 80072aa:	6062      	str	r2, [r4, #4]
 80072ac:	dd02      	ble.n	80072b4 <__ssvfiscanf_r+0x240>
 80072ae:	3301      	adds	r3, #1
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	e787      	b.n	80071c4 <__ssvfiscanf_r+0x150>
 80072b4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80072b6:	4621      	mov	r1, r4
 80072b8:	4630      	mov	r0, r6
 80072ba:	4798      	blx	r3
 80072bc:	2800      	cmp	r0, #0
 80072be:	d081      	beq.n	80071c4 <__ssvfiscanf_r+0x150>
 80072c0:	e7b6      	b.n	8007230 <__ssvfiscanf_r+0x1bc>
 80072c2:	2b04      	cmp	r3, #4
 80072c4:	dc06      	bgt.n	80072d4 <__ssvfiscanf_r+0x260>
 80072c6:	466b      	mov	r3, sp
 80072c8:	4622      	mov	r2, r4
 80072ca:	a941      	add	r1, sp, #260	; 0x104
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 fa0d 	bl	80076ec <_scanf_i>
 80072d2:	e788      	b.n	80071e6 <__ssvfiscanf_r+0x172>
 80072d4:	4b0e      	ldr	r3, [pc, #56]	; (8007310 <__ssvfiscanf_r+0x29c>)
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f43f aefc 	beq.w	80070d4 <__ssvfiscanf_r+0x60>
 80072dc:	466b      	mov	r3, sp
 80072de:	4622      	mov	r2, r4
 80072e0:	a941      	add	r1, sp, #260	; 0x104
 80072e2:	4630      	mov	r0, r6
 80072e4:	f3af 8000 	nop.w
 80072e8:	e77d      	b.n	80071e6 <__ssvfiscanf_r+0x172>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f013 0f40 	tst.w	r3, #64	; 0x40
 80072f0:	bf18      	it	ne
 80072f2:	f04f 30ff 	movne.w	r0, #4294967295
 80072f6:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80072fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072fe:	9844      	ldr	r0, [sp, #272]	; 0x110
 8007300:	e7f9      	b.n	80072f6 <__ssvfiscanf_r+0x282>
 8007302:	bf00      	nop
 8007304:	08006fc1 	.word	0x08006fc1
 8007308:	0800703b 	.word	0x0800703b
 800730c:	08007fb2 	.word	0x08007fb2
 8007310:	00000000 	.word	0x00000000

08007314 <_printf_common>:
 8007314:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007318:	4691      	mov	r9, r2
 800731a:	461f      	mov	r7, r3
 800731c:	688a      	ldr	r2, [r1, #8]
 800731e:	690b      	ldr	r3, [r1, #16]
 8007320:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007324:	4293      	cmp	r3, r2
 8007326:	bfb8      	it	lt
 8007328:	4613      	movlt	r3, r2
 800732a:	f8c9 3000 	str.w	r3, [r9]
 800732e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007332:	4606      	mov	r6, r0
 8007334:	460c      	mov	r4, r1
 8007336:	b112      	cbz	r2, 800733e <_printf_common+0x2a>
 8007338:	3301      	adds	r3, #1
 800733a:	f8c9 3000 	str.w	r3, [r9]
 800733e:	6823      	ldr	r3, [r4, #0]
 8007340:	0699      	lsls	r1, r3, #26
 8007342:	bf42      	ittt	mi
 8007344:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007348:	3302      	addmi	r3, #2
 800734a:	f8c9 3000 	strmi.w	r3, [r9]
 800734e:	6825      	ldr	r5, [r4, #0]
 8007350:	f015 0506 	ands.w	r5, r5, #6
 8007354:	d107      	bne.n	8007366 <_printf_common+0x52>
 8007356:	f104 0a19 	add.w	sl, r4, #25
 800735a:	68e3      	ldr	r3, [r4, #12]
 800735c:	f8d9 2000 	ldr.w	r2, [r9]
 8007360:	1a9b      	subs	r3, r3, r2
 8007362:	42ab      	cmp	r3, r5
 8007364:	dc28      	bgt.n	80073b8 <_printf_common+0xa4>
 8007366:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800736a:	6822      	ldr	r2, [r4, #0]
 800736c:	3300      	adds	r3, #0
 800736e:	bf18      	it	ne
 8007370:	2301      	movne	r3, #1
 8007372:	0692      	lsls	r2, r2, #26
 8007374:	d42d      	bmi.n	80073d2 <_printf_common+0xbe>
 8007376:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800737a:	4639      	mov	r1, r7
 800737c:	4630      	mov	r0, r6
 800737e:	47c0      	blx	r8
 8007380:	3001      	adds	r0, #1
 8007382:	d020      	beq.n	80073c6 <_printf_common+0xb2>
 8007384:	6823      	ldr	r3, [r4, #0]
 8007386:	68e5      	ldr	r5, [r4, #12]
 8007388:	f8d9 2000 	ldr.w	r2, [r9]
 800738c:	f003 0306 	and.w	r3, r3, #6
 8007390:	2b04      	cmp	r3, #4
 8007392:	bf08      	it	eq
 8007394:	1aad      	subeq	r5, r5, r2
 8007396:	68a3      	ldr	r3, [r4, #8]
 8007398:	6922      	ldr	r2, [r4, #16]
 800739a:	bf0c      	ite	eq
 800739c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80073a0:	2500      	movne	r5, #0
 80073a2:	4293      	cmp	r3, r2
 80073a4:	bfc4      	itt	gt
 80073a6:	1a9b      	subgt	r3, r3, r2
 80073a8:	18ed      	addgt	r5, r5, r3
 80073aa:	f04f 0900 	mov.w	r9, #0
 80073ae:	341a      	adds	r4, #26
 80073b0:	454d      	cmp	r5, r9
 80073b2:	d11a      	bne.n	80073ea <_printf_common+0xd6>
 80073b4:	2000      	movs	r0, #0
 80073b6:	e008      	b.n	80073ca <_printf_common+0xb6>
 80073b8:	2301      	movs	r3, #1
 80073ba:	4652      	mov	r2, sl
 80073bc:	4639      	mov	r1, r7
 80073be:	4630      	mov	r0, r6
 80073c0:	47c0      	blx	r8
 80073c2:	3001      	adds	r0, #1
 80073c4:	d103      	bne.n	80073ce <_printf_common+0xba>
 80073c6:	f04f 30ff 	mov.w	r0, #4294967295
 80073ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073ce:	3501      	adds	r5, #1
 80073d0:	e7c3      	b.n	800735a <_printf_common+0x46>
 80073d2:	18e1      	adds	r1, r4, r3
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	2030      	movs	r0, #48	; 0x30
 80073d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073dc:	4422      	add	r2, r4
 80073de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073e2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073e6:	3302      	adds	r3, #2
 80073e8:	e7c5      	b.n	8007376 <_printf_common+0x62>
 80073ea:	2301      	movs	r3, #1
 80073ec:	4622      	mov	r2, r4
 80073ee:	4639      	mov	r1, r7
 80073f0:	4630      	mov	r0, r6
 80073f2:	47c0      	blx	r8
 80073f4:	3001      	adds	r0, #1
 80073f6:	d0e6      	beq.n	80073c6 <_printf_common+0xb2>
 80073f8:	f109 0901 	add.w	r9, r9, #1
 80073fc:	e7d8      	b.n	80073b0 <_printf_common+0x9c>
	...

08007400 <_printf_i>:
 8007400:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007404:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007408:	460c      	mov	r4, r1
 800740a:	7e09      	ldrb	r1, [r1, #24]
 800740c:	b085      	sub	sp, #20
 800740e:	296e      	cmp	r1, #110	; 0x6e
 8007410:	4617      	mov	r7, r2
 8007412:	4606      	mov	r6, r0
 8007414:	4698      	mov	r8, r3
 8007416:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007418:	f000 80b3 	beq.w	8007582 <_printf_i+0x182>
 800741c:	d822      	bhi.n	8007464 <_printf_i+0x64>
 800741e:	2963      	cmp	r1, #99	; 0x63
 8007420:	d036      	beq.n	8007490 <_printf_i+0x90>
 8007422:	d80a      	bhi.n	800743a <_printf_i+0x3a>
 8007424:	2900      	cmp	r1, #0
 8007426:	f000 80b9 	beq.w	800759c <_printf_i+0x19c>
 800742a:	2958      	cmp	r1, #88	; 0x58
 800742c:	f000 8083 	beq.w	8007536 <_printf_i+0x136>
 8007430:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007434:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007438:	e032      	b.n	80074a0 <_printf_i+0xa0>
 800743a:	2964      	cmp	r1, #100	; 0x64
 800743c:	d001      	beq.n	8007442 <_printf_i+0x42>
 800743e:	2969      	cmp	r1, #105	; 0x69
 8007440:	d1f6      	bne.n	8007430 <_printf_i+0x30>
 8007442:	6820      	ldr	r0, [r4, #0]
 8007444:	6813      	ldr	r3, [r2, #0]
 8007446:	0605      	lsls	r5, r0, #24
 8007448:	f103 0104 	add.w	r1, r3, #4
 800744c:	d52a      	bpl.n	80074a4 <_printf_i+0xa4>
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6011      	str	r1, [r2, #0]
 8007452:	2b00      	cmp	r3, #0
 8007454:	da03      	bge.n	800745e <_printf_i+0x5e>
 8007456:	222d      	movs	r2, #45	; 0x2d
 8007458:	425b      	negs	r3, r3
 800745a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800745e:	486f      	ldr	r0, [pc, #444]	; (800761c <_printf_i+0x21c>)
 8007460:	220a      	movs	r2, #10
 8007462:	e039      	b.n	80074d8 <_printf_i+0xd8>
 8007464:	2973      	cmp	r1, #115	; 0x73
 8007466:	f000 809d 	beq.w	80075a4 <_printf_i+0x1a4>
 800746a:	d808      	bhi.n	800747e <_printf_i+0x7e>
 800746c:	296f      	cmp	r1, #111	; 0x6f
 800746e:	d020      	beq.n	80074b2 <_printf_i+0xb2>
 8007470:	2970      	cmp	r1, #112	; 0x70
 8007472:	d1dd      	bne.n	8007430 <_printf_i+0x30>
 8007474:	6823      	ldr	r3, [r4, #0]
 8007476:	f043 0320 	orr.w	r3, r3, #32
 800747a:	6023      	str	r3, [r4, #0]
 800747c:	e003      	b.n	8007486 <_printf_i+0x86>
 800747e:	2975      	cmp	r1, #117	; 0x75
 8007480:	d017      	beq.n	80074b2 <_printf_i+0xb2>
 8007482:	2978      	cmp	r1, #120	; 0x78
 8007484:	d1d4      	bne.n	8007430 <_printf_i+0x30>
 8007486:	2378      	movs	r3, #120	; 0x78
 8007488:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800748c:	4864      	ldr	r0, [pc, #400]	; (8007620 <_printf_i+0x220>)
 800748e:	e055      	b.n	800753c <_printf_i+0x13c>
 8007490:	6813      	ldr	r3, [r2, #0]
 8007492:	1d19      	adds	r1, r3, #4
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6011      	str	r1, [r2, #0]
 8007498:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800749c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80074a0:	2301      	movs	r3, #1
 80074a2:	e08c      	b.n	80075be <_printf_i+0x1be>
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	6011      	str	r1, [r2, #0]
 80074a8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074ac:	bf18      	it	ne
 80074ae:	b21b      	sxthne	r3, r3
 80074b0:	e7cf      	b.n	8007452 <_printf_i+0x52>
 80074b2:	6813      	ldr	r3, [r2, #0]
 80074b4:	6825      	ldr	r5, [r4, #0]
 80074b6:	1d18      	adds	r0, r3, #4
 80074b8:	6010      	str	r0, [r2, #0]
 80074ba:	0628      	lsls	r0, r5, #24
 80074bc:	d501      	bpl.n	80074c2 <_printf_i+0xc2>
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	e002      	b.n	80074c8 <_printf_i+0xc8>
 80074c2:	0668      	lsls	r0, r5, #25
 80074c4:	d5fb      	bpl.n	80074be <_printf_i+0xbe>
 80074c6:	881b      	ldrh	r3, [r3, #0]
 80074c8:	4854      	ldr	r0, [pc, #336]	; (800761c <_printf_i+0x21c>)
 80074ca:	296f      	cmp	r1, #111	; 0x6f
 80074cc:	bf14      	ite	ne
 80074ce:	220a      	movne	r2, #10
 80074d0:	2208      	moveq	r2, #8
 80074d2:	2100      	movs	r1, #0
 80074d4:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074d8:	6865      	ldr	r5, [r4, #4]
 80074da:	60a5      	str	r5, [r4, #8]
 80074dc:	2d00      	cmp	r5, #0
 80074de:	f2c0 8095 	blt.w	800760c <_printf_i+0x20c>
 80074e2:	6821      	ldr	r1, [r4, #0]
 80074e4:	f021 0104 	bic.w	r1, r1, #4
 80074e8:	6021      	str	r1, [r4, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d13d      	bne.n	800756a <_printf_i+0x16a>
 80074ee:	2d00      	cmp	r5, #0
 80074f0:	f040 808e 	bne.w	8007610 <_printf_i+0x210>
 80074f4:	4665      	mov	r5, ip
 80074f6:	2a08      	cmp	r2, #8
 80074f8:	d10b      	bne.n	8007512 <_printf_i+0x112>
 80074fa:	6823      	ldr	r3, [r4, #0]
 80074fc:	07db      	lsls	r3, r3, #31
 80074fe:	d508      	bpl.n	8007512 <_printf_i+0x112>
 8007500:	6923      	ldr	r3, [r4, #16]
 8007502:	6862      	ldr	r2, [r4, #4]
 8007504:	429a      	cmp	r2, r3
 8007506:	bfde      	ittt	le
 8007508:	2330      	movle	r3, #48	; 0x30
 800750a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800750e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007512:	ebac 0305 	sub.w	r3, ip, r5
 8007516:	6123      	str	r3, [r4, #16]
 8007518:	f8cd 8000 	str.w	r8, [sp]
 800751c:	463b      	mov	r3, r7
 800751e:	aa03      	add	r2, sp, #12
 8007520:	4621      	mov	r1, r4
 8007522:	4630      	mov	r0, r6
 8007524:	f7ff fef6 	bl	8007314 <_printf_common>
 8007528:	3001      	adds	r0, #1
 800752a:	d14d      	bne.n	80075c8 <_printf_i+0x1c8>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295
 8007530:	b005      	add	sp, #20
 8007532:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007536:	4839      	ldr	r0, [pc, #228]	; (800761c <_printf_i+0x21c>)
 8007538:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800753c:	6813      	ldr	r3, [r2, #0]
 800753e:	6821      	ldr	r1, [r4, #0]
 8007540:	1d1d      	adds	r5, r3, #4
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6015      	str	r5, [r2, #0]
 8007546:	060a      	lsls	r2, r1, #24
 8007548:	d50b      	bpl.n	8007562 <_printf_i+0x162>
 800754a:	07ca      	lsls	r2, r1, #31
 800754c:	bf44      	itt	mi
 800754e:	f041 0120 	orrmi.w	r1, r1, #32
 8007552:	6021      	strmi	r1, [r4, #0]
 8007554:	b91b      	cbnz	r3, 800755e <_printf_i+0x15e>
 8007556:	6822      	ldr	r2, [r4, #0]
 8007558:	f022 0220 	bic.w	r2, r2, #32
 800755c:	6022      	str	r2, [r4, #0]
 800755e:	2210      	movs	r2, #16
 8007560:	e7b7      	b.n	80074d2 <_printf_i+0xd2>
 8007562:	064d      	lsls	r5, r1, #25
 8007564:	bf48      	it	mi
 8007566:	b29b      	uxthmi	r3, r3
 8007568:	e7ef      	b.n	800754a <_printf_i+0x14a>
 800756a:	4665      	mov	r5, ip
 800756c:	fbb3 f1f2 	udiv	r1, r3, r2
 8007570:	fb02 3311 	mls	r3, r2, r1, r3
 8007574:	5cc3      	ldrb	r3, [r0, r3]
 8007576:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800757a:	460b      	mov	r3, r1
 800757c:	2900      	cmp	r1, #0
 800757e:	d1f5      	bne.n	800756c <_printf_i+0x16c>
 8007580:	e7b9      	b.n	80074f6 <_printf_i+0xf6>
 8007582:	6813      	ldr	r3, [r2, #0]
 8007584:	6825      	ldr	r5, [r4, #0]
 8007586:	6961      	ldr	r1, [r4, #20]
 8007588:	1d18      	adds	r0, r3, #4
 800758a:	6010      	str	r0, [r2, #0]
 800758c:	0628      	lsls	r0, r5, #24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	d501      	bpl.n	8007596 <_printf_i+0x196>
 8007592:	6019      	str	r1, [r3, #0]
 8007594:	e002      	b.n	800759c <_printf_i+0x19c>
 8007596:	066a      	lsls	r2, r5, #25
 8007598:	d5fb      	bpl.n	8007592 <_printf_i+0x192>
 800759a:	8019      	strh	r1, [r3, #0]
 800759c:	2300      	movs	r3, #0
 800759e:	6123      	str	r3, [r4, #16]
 80075a0:	4665      	mov	r5, ip
 80075a2:	e7b9      	b.n	8007518 <_printf_i+0x118>
 80075a4:	6813      	ldr	r3, [r2, #0]
 80075a6:	1d19      	adds	r1, r3, #4
 80075a8:	6011      	str	r1, [r2, #0]
 80075aa:	681d      	ldr	r5, [r3, #0]
 80075ac:	6862      	ldr	r2, [r4, #4]
 80075ae:	2100      	movs	r1, #0
 80075b0:	4628      	mov	r0, r5
 80075b2:	f7f8 fe35 	bl	8000220 <memchr>
 80075b6:	b108      	cbz	r0, 80075bc <_printf_i+0x1bc>
 80075b8:	1b40      	subs	r0, r0, r5
 80075ba:	6060      	str	r0, [r4, #4]
 80075bc:	6863      	ldr	r3, [r4, #4]
 80075be:	6123      	str	r3, [r4, #16]
 80075c0:	2300      	movs	r3, #0
 80075c2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c6:	e7a7      	b.n	8007518 <_printf_i+0x118>
 80075c8:	6923      	ldr	r3, [r4, #16]
 80075ca:	462a      	mov	r2, r5
 80075cc:	4639      	mov	r1, r7
 80075ce:	4630      	mov	r0, r6
 80075d0:	47c0      	blx	r8
 80075d2:	3001      	adds	r0, #1
 80075d4:	d0aa      	beq.n	800752c <_printf_i+0x12c>
 80075d6:	6823      	ldr	r3, [r4, #0]
 80075d8:	079b      	lsls	r3, r3, #30
 80075da:	d413      	bmi.n	8007604 <_printf_i+0x204>
 80075dc:	68e0      	ldr	r0, [r4, #12]
 80075de:	9b03      	ldr	r3, [sp, #12]
 80075e0:	4298      	cmp	r0, r3
 80075e2:	bfb8      	it	lt
 80075e4:	4618      	movlt	r0, r3
 80075e6:	e7a3      	b.n	8007530 <_printf_i+0x130>
 80075e8:	2301      	movs	r3, #1
 80075ea:	464a      	mov	r2, r9
 80075ec:	4639      	mov	r1, r7
 80075ee:	4630      	mov	r0, r6
 80075f0:	47c0      	blx	r8
 80075f2:	3001      	adds	r0, #1
 80075f4:	d09a      	beq.n	800752c <_printf_i+0x12c>
 80075f6:	3501      	adds	r5, #1
 80075f8:	68e3      	ldr	r3, [r4, #12]
 80075fa:	9a03      	ldr	r2, [sp, #12]
 80075fc:	1a9b      	subs	r3, r3, r2
 80075fe:	42ab      	cmp	r3, r5
 8007600:	dcf2      	bgt.n	80075e8 <_printf_i+0x1e8>
 8007602:	e7eb      	b.n	80075dc <_printf_i+0x1dc>
 8007604:	2500      	movs	r5, #0
 8007606:	f104 0919 	add.w	r9, r4, #25
 800760a:	e7f5      	b.n	80075f8 <_printf_i+0x1f8>
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1ac      	bne.n	800756a <_printf_i+0x16a>
 8007610:	7803      	ldrb	r3, [r0, #0]
 8007612:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007616:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800761a:	e76c      	b.n	80074f6 <_printf_i+0xf6>
 800761c:	08007fbd 	.word	0x08007fbd
 8007620:	08007fce 	.word	0x08007fce

08007624 <_scanf_chars>:
 8007624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007628:	4615      	mov	r5, r2
 800762a:	688a      	ldr	r2, [r1, #8]
 800762c:	4680      	mov	r8, r0
 800762e:	460c      	mov	r4, r1
 8007630:	b932      	cbnz	r2, 8007640 <_scanf_chars+0x1c>
 8007632:	698a      	ldr	r2, [r1, #24]
 8007634:	2a00      	cmp	r2, #0
 8007636:	bf14      	ite	ne
 8007638:	f04f 32ff 	movne.w	r2, #4294967295
 800763c:	2201      	moveq	r2, #1
 800763e:	608a      	str	r2, [r1, #8]
 8007640:	6822      	ldr	r2, [r4, #0]
 8007642:	06d1      	lsls	r1, r2, #27
 8007644:	bf5f      	itttt	pl
 8007646:	681a      	ldrpl	r2, [r3, #0]
 8007648:	1d11      	addpl	r1, r2, #4
 800764a:	6019      	strpl	r1, [r3, #0]
 800764c:	6817      	ldrpl	r7, [r2, #0]
 800764e:	2600      	movs	r6, #0
 8007650:	69a3      	ldr	r3, [r4, #24]
 8007652:	b1db      	cbz	r3, 800768c <_scanf_chars+0x68>
 8007654:	2b01      	cmp	r3, #1
 8007656:	d107      	bne.n	8007668 <_scanf_chars+0x44>
 8007658:	682b      	ldr	r3, [r5, #0]
 800765a:	6962      	ldr	r2, [r4, #20]
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	5cd3      	ldrb	r3, [r2, r3]
 8007660:	b9a3      	cbnz	r3, 800768c <_scanf_chars+0x68>
 8007662:	2e00      	cmp	r6, #0
 8007664:	d132      	bne.n	80076cc <_scanf_chars+0xa8>
 8007666:	e006      	b.n	8007676 <_scanf_chars+0x52>
 8007668:	2b02      	cmp	r3, #2
 800766a:	d007      	beq.n	800767c <_scanf_chars+0x58>
 800766c:	2e00      	cmp	r6, #0
 800766e:	d12d      	bne.n	80076cc <_scanf_chars+0xa8>
 8007670:	69a3      	ldr	r3, [r4, #24]
 8007672:	2b01      	cmp	r3, #1
 8007674:	d12a      	bne.n	80076cc <_scanf_chars+0xa8>
 8007676:	2001      	movs	r0, #1
 8007678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800767c:	f000 fab4 	bl	8007be8 <__locale_ctype_ptr>
 8007680:	682b      	ldr	r3, [r5, #0]
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4418      	add	r0, r3
 8007686:	7843      	ldrb	r3, [r0, #1]
 8007688:	071b      	lsls	r3, r3, #28
 800768a:	d4ef      	bmi.n	800766c <_scanf_chars+0x48>
 800768c:	6823      	ldr	r3, [r4, #0]
 800768e:	06da      	lsls	r2, r3, #27
 8007690:	bf5e      	ittt	pl
 8007692:	682b      	ldrpl	r3, [r5, #0]
 8007694:	781b      	ldrbpl	r3, [r3, #0]
 8007696:	703b      	strbpl	r3, [r7, #0]
 8007698:	682a      	ldr	r2, [r5, #0]
 800769a:	686b      	ldr	r3, [r5, #4]
 800769c:	f102 0201 	add.w	r2, r2, #1
 80076a0:	602a      	str	r2, [r5, #0]
 80076a2:	68a2      	ldr	r2, [r4, #8]
 80076a4:	f103 33ff 	add.w	r3, r3, #4294967295
 80076a8:	f102 32ff 	add.w	r2, r2, #4294967295
 80076ac:	606b      	str	r3, [r5, #4]
 80076ae:	f106 0601 	add.w	r6, r6, #1
 80076b2:	bf58      	it	pl
 80076b4:	3701      	addpl	r7, #1
 80076b6:	60a2      	str	r2, [r4, #8]
 80076b8:	b142      	cbz	r2, 80076cc <_scanf_chars+0xa8>
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	dcc8      	bgt.n	8007650 <_scanf_chars+0x2c>
 80076be:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80076c2:	4629      	mov	r1, r5
 80076c4:	4640      	mov	r0, r8
 80076c6:	4798      	blx	r3
 80076c8:	2800      	cmp	r0, #0
 80076ca:	d0c1      	beq.n	8007650 <_scanf_chars+0x2c>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	f013 0310 	ands.w	r3, r3, #16
 80076d2:	d105      	bne.n	80076e0 <_scanf_chars+0xbc>
 80076d4:	68e2      	ldr	r2, [r4, #12]
 80076d6:	3201      	adds	r2, #1
 80076d8:	60e2      	str	r2, [r4, #12]
 80076da:	69a2      	ldr	r2, [r4, #24]
 80076dc:	b102      	cbz	r2, 80076e0 <_scanf_chars+0xbc>
 80076de:	703b      	strb	r3, [r7, #0]
 80076e0:	6923      	ldr	r3, [r4, #16]
 80076e2:	441e      	add	r6, r3
 80076e4:	6126      	str	r6, [r4, #16]
 80076e6:	2000      	movs	r0, #0
 80076e8:	e7c6      	b.n	8007678 <_scanf_chars+0x54>
	...

080076ec <_scanf_i>:
 80076ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076f0:	469a      	mov	sl, r3
 80076f2:	4b74      	ldr	r3, [pc, #464]	; (80078c4 <_scanf_i+0x1d8>)
 80076f4:	460c      	mov	r4, r1
 80076f6:	4683      	mov	fp, r0
 80076f8:	4616      	mov	r6, r2
 80076fa:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80076fe:	b087      	sub	sp, #28
 8007700:	ab03      	add	r3, sp, #12
 8007702:	68a7      	ldr	r7, [r4, #8]
 8007704:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8007708:	4b6f      	ldr	r3, [pc, #444]	; (80078c8 <_scanf_i+0x1dc>)
 800770a:	69a1      	ldr	r1, [r4, #24]
 800770c:	4a6f      	ldr	r2, [pc, #444]	; (80078cc <_scanf_i+0x1e0>)
 800770e:	2903      	cmp	r1, #3
 8007710:	bf08      	it	eq
 8007712:	461a      	moveq	r2, r3
 8007714:	1e7b      	subs	r3, r7, #1
 8007716:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 800771a:	bf84      	itt	hi
 800771c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007720:	60a3      	strhi	r3, [r4, #8]
 8007722:	6823      	ldr	r3, [r4, #0]
 8007724:	9200      	str	r2, [sp, #0]
 8007726:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800772a:	bf88      	it	hi
 800772c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007730:	f104 091c 	add.w	r9, r4, #28
 8007734:	6023      	str	r3, [r4, #0]
 8007736:	bf8c      	ite	hi
 8007738:	197f      	addhi	r7, r7, r5
 800773a:	2700      	movls	r7, #0
 800773c:	464b      	mov	r3, r9
 800773e:	f04f 0800 	mov.w	r8, #0
 8007742:	9301      	str	r3, [sp, #4]
 8007744:	6831      	ldr	r1, [r6, #0]
 8007746:	ab03      	add	r3, sp, #12
 8007748:	2202      	movs	r2, #2
 800774a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800774e:	7809      	ldrb	r1, [r1, #0]
 8007750:	f7f8 fd66 	bl	8000220 <memchr>
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	b330      	cbz	r0, 80077a6 <_scanf_i+0xba>
 8007758:	f1b8 0f01 	cmp.w	r8, #1
 800775c:	d15a      	bne.n	8007814 <_scanf_i+0x128>
 800775e:	6862      	ldr	r2, [r4, #4]
 8007760:	b92a      	cbnz	r2, 800776e <_scanf_i+0x82>
 8007762:	6822      	ldr	r2, [r4, #0]
 8007764:	2108      	movs	r1, #8
 8007766:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800776a:	6061      	str	r1, [r4, #4]
 800776c:	6022      	str	r2, [r4, #0]
 800776e:	6822      	ldr	r2, [r4, #0]
 8007770:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8007774:	6022      	str	r2, [r4, #0]
 8007776:	68a2      	ldr	r2, [r4, #8]
 8007778:	1e51      	subs	r1, r2, #1
 800777a:	60a1      	str	r1, [r4, #8]
 800777c:	b19a      	cbz	r2, 80077a6 <_scanf_i+0xba>
 800777e:	6832      	ldr	r2, [r6, #0]
 8007780:	1c51      	adds	r1, r2, #1
 8007782:	6031      	str	r1, [r6, #0]
 8007784:	7812      	ldrb	r2, [r2, #0]
 8007786:	701a      	strb	r2, [r3, #0]
 8007788:	1c5d      	adds	r5, r3, #1
 800778a:	6873      	ldr	r3, [r6, #4]
 800778c:	3b01      	subs	r3, #1
 800778e:	2b00      	cmp	r3, #0
 8007790:	6073      	str	r3, [r6, #4]
 8007792:	dc07      	bgt.n	80077a4 <_scanf_i+0xb8>
 8007794:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007798:	4631      	mov	r1, r6
 800779a:	4658      	mov	r0, fp
 800779c:	4798      	blx	r3
 800779e:	2800      	cmp	r0, #0
 80077a0:	f040 8086 	bne.w	80078b0 <_scanf_i+0x1c4>
 80077a4:	462b      	mov	r3, r5
 80077a6:	f108 0801 	add.w	r8, r8, #1
 80077aa:	f1b8 0f03 	cmp.w	r8, #3
 80077ae:	d1c8      	bne.n	8007742 <_scanf_i+0x56>
 80077b0:	6862      	ldr	r2, [r4, #4]
 80077b2:	b90a      	cbnz	r2, 80077b8 <_scanf_i+0xcc>
 80077b4:	220a      	movs	r2, #10
 80077b6:	6062      	str	r2, [r4, #4]
 80077b8:	6862      	ldr	r2, [r4, #4]
 80077ba:	4945      	ldr	r1, [pc, #276]	; (80078d0 <_scanf_i+0x1e4>)
 80077bc:	6960      	ldr	r0, [r4, #20]
 80077be:	9301      	str	r3, [sp, #4]
 80077c0:	1a89      	subs	r1, r1, r2
 80077c2:	f000 f887 	bl	80078d4 <__sccl>
 80077c6:	9b01      	ldr	r3, [sp, #4]
 80077c8:	f04f 0800 	mov.w	r8, #0
 80077cc:	461d      	mov	r5, r3
 80077ce:	68a3      	ldr	r3, [r4, #8]
 80077d0:	6822      	ldr	r2, [r4, #0]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d03a      	beq.n	800784c <_scanf_i+0x160>
 80077d6:	6831      	ldr	r1, [r6, #0]
 80077d8:	6960      	ldr	r0, [r4, #20]
 80077da:	f891 c000 	ldrb.w	ip, [r1]
 80077de:	f810 000c 	ldrb.w	r0, [r0, ip]
 80077e2:	2800      	cmp	r0, #0
 80077e4:	d032      	beq.n	800784c <_scanf_i+0x160>
 80077e6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 80077ea:	d121      	bne.n	8007830 <_scanf_i+0x144>
 80077ec:	0510      	lsls	r0, r2, #20
 80077ee:	d51f      	bpl.n	8007830 <_scanf_i+0x144>
 80077f0:	f108 0801 	add.w	r8, r8, #1
 80077f4:	b117      	cbz	r7, 80077fc <_scanf_i+0x110>
 80077f6:	3301      	adds	r3, #1
 80077f8:	3f01      	subs	r7, #1
 80077fa:	60a3      	str	r3, [r4, #8]
 80077fc:	6873      	ldr	r3, [r6, #4]
 80077fe:	3b01      	subs	r3, #1
 8007800:	2b00      	cmp	r3, #0
 8007802:	6073      	str	r3, [r6, #4]
 8007804:	dd1b      	ble.n	800783e <_scanf_i+0x152>
 8007806:	6833      	ldr	r3, [r6, #0]
 8007808:	3301      	adds	r3, #1
 800780a:	6033      	str	r3, [r6, #0]
 800780c:	68a3      	ldr	r3, [r4, #8]
 800780e:	3b01      	subs	r3, #1
 8007810:	60a3      	str	r3, [r4, #8]
 8007812:	e7dc      	b.n	80077ce <_scanf_i+0xe2>
 8007814:	f1b8 0f02 	cmp.w	r8, #2
 8007818:	d1ad      	bne.n	8007776 <_scanf_i+0x8a>
 800781a:	6822      	ldr	r2, [r4, #0]
 800781c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007820:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007824:	d1bf      	bne.n	80077a6 <_scanf_i+0xba>
 8007826:	2110      	movs	r1, #16
 8007828:	6061      	str	r1, [r4, #4]
 800782a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800782e:	e7a1      	b.n	8007774 <_scanf_i+0x88>
 8007830:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007834:	6022      	str	r2, [r4, #0]
 8007836:	780b      	ldrb	r3, [r1, #0]
 8007838:	702b      	strb	r3, [r5, #0]
 800783a:	3501      	adds	r5, #1
 800783c:	e7de      	b.n	80077fc <_scanf_i+0x110>
 800783e:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007842:	4631      	mov	r1, r6
 8007844:	4658      	mov	r0, fp
 8007846:	4798      	blx	r3
 8007848:	2800      	cmp	r0, #0
 800784a:	d0df      	beq.n	800780c <_scanf_i+0x120>
 800784c:	6823      	ldr	r3, [r4, #0]
 800784e:	05d9      	lsls	r1, r3, #23
 8007850:	d50c      	bpl.n	800786c <_scanf_i+0x180>
 8007852:	454d      	cmp	r5, r9
 8007854:	d908      	bls.n	8007868 <_scanf_i+0x17c>
 8007856:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800785a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800785e:	4632      	mov	r2, r6
 8007860:	4658      	mov	r0, fp
 8007862:	4798      	blx	r3
 8007864:	1e6f      	subs	r7, r5, #1
 8007866:	463d      	mov	r5, r7
 8007868:	454d      	cmp	r5, r9
 800786a:	d029      	beq.n	80078c0 <_scanf_i+0x1d4>
 800786c:	6822      	ldr	r2, [r4, #0]
 800786e:	f012 0210 	ands.w	r2, r2, #16
 8007872:	d113      	bne.n	800789c <_scanf_i+0x1b0>
 8007874:	702a      	strb	r2, [r5, #0]
 8007876:	6863      	ldr	r3, [r4, #4]
 8007878:	9e00      	ldr	r6, [sp, #0]
 800787a:	4649      	mov	r1, r9
 800787c:	4658      	mov	r0, fp
 800787e:	47b0      	blx	r6
 8007880:	f8da 3000 	ldr.w	r3, [sl]
 8007884:	6821      	ldr	r1, [r4, #0]
 8007886:	1d1a      	adds	r2, r3, #4
 8007888:	f8ca 2000 	str.w	r2, [sl]
 800788c:	f011 0f20 	tst.w	r1, #32
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	d010      	beq.n	80078b6 <_scanf_i+0x1ca>
 8007894:	6018      	str	r0, [r3, #0]
 8007896:	68e3      	ldr	r3, [r4, #12]
 8007898:	3301      	adds	r3, #1
 800789a:	60e3      	str	r3, [r4, #12]
 800789c:	eba5 0509 	sub.w	r5, r5, r9
 80078a0:	44a8      	add	r8, r5
 80078a2:	6925      	ldr	r5, [r4, #16]
 80078a4:	4445      	add	r5, r8
 80078a6:	6125      	str	r5, [r4, #16]
 80078a8:	2000      	movs	r0, #0
 80078aa:	b007      	add	sp, #28
 80078ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078b0:	f04f 0800 	mov.w	r8, #0
 80078b4:	e7ca      	b.n	800784c <_scanf_i+0x160>
 80078b6:	07ca      	lsls	r2, r1, #31
 80078b8:	bf4c      	ite	mi
 80078ba:	8018      	strhmi	r0, [r3, #0]
 80078bc:	6018      	strpl	r0, [r3, #0]
 80078be:	e7ea      	b.n	8007896 <_scanf_i+0x1aa>
 80078c0:	2001      	movs	r0, #1
 80078c2:	e7f2      	b.n	80078aa <_scanf_i+0x1be>
 80078c4:	08007f80 	.word	0x08007f80
 80078c8:	08007a31 	.word	0x08007a31
 80078cc:	08007b49 	.word	0x08007b49
 80078d0:	08007fef 	.word	0x08007fef

080078d4 <__sccl>:
 80078d4:	b570      	push	{r4, r5, r6, lr}
 80078d6:	780b      	ldrb	r3, [r1, #0]
 80078d8:	2b5e      	cmp	r3, #94	; 0x5e
 80078da:	bf13      	iteet	ne
 80078dc:	1c4a      	addne	r2, r1, #1
 80078de:	1c8a      	addeq	r2, r1, #2
 80078e0:	784b      	ldrbeq	r3, [r1, #1]
 80078e2:	2100      	movne	r1, #0
 80078e4:	bf08      	it	eq
 80078e6:	2101      	moveq	r1, #1
 80078e8:	1e44      	subs	r4, r0, #1
 80078ea:	f100 05ff 	add.w	r5, r0, #255	; 0xff
 80078ee:	f804 1f01 	strb.w	r1, [r4, #1]!
 80078f2:	42ac      	cmp	r4, r5
 80078f4:	d1fb      	bne.n	80078ee <__sccl+0x1a>
 80078f6:	b913      	cbnz	r3, 80078fe <__sccl+0x2a>
 80078f8:	3a01      	subs	r2, #1
 80078fa:	4610      	mov	r0, r2
 80078fc:	bd70      	pop	{r4, r5, r6, pc}
 80078fe:	f081 0401 	eor.w	r4, r1, #1
 8007902:	54c4      	strb	r4, [r0, r3]
 8007904:	1c51      	adds	r1, r2, #1
 8007906:	f811 5c01 	ldrb.w	r5, [r1, #-1]
 800790a:	2d2d      	cmp	r5, #45	; 0x2d
 800790c:	f101 36ff 	add.w	r6, r1, #4294967295
 8007910:	460a      	mov	r2, r1
 8007912:	d006      	beq.n	8007922 <__sccl+0x4e>
 8007914:	2d5d      	cmp	r5, #93	; 0x5d
 8007916:	d0f0      	beq.n	80078fa <__sccl+0x26>
 8007918:	b90d      	cbnz	r5, 800791e <__sccl+0x4a>
 800791a:	4632      	mov	r2, r6
 800791c:	e7ed      	b.n	80078fa <__sccl+0x26>
 800791e:	462b      	mov	r3, r5
 8007920:	e7ef      	b.n	8007902 <__sccl+0x2e>
 8007922:	780e      	ldrb	r6, [r1, #0]
 8007924:	2e5d      	cmp	r6, #93	; 0x5d
 8007926:	d0fa      	beq.n	800791e <__sccl+0x4a>
 8007928:	42b3      	cmp	r3, r6
 800792a:	dcf8      	bgt.n	800791e <__sccl+0x4a>
 800792c:	3301      	adds	r3, #1
 800792e:	429e      	cmp	r6, r3
 8007930:	54c4      	strb	r4, [r0, r3]
 8007932:	dcfb      	bgt.n	800792c <__sccl+0x58>
 8007934:	3102      	adds	r1, #2
 8007936:	e7e6      	b.n	8007906 <__sccl+0x32>

08007938 <_strtol_l.isra.0>:
 8007938:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800793c:	4680      	mov	r8, r0
 800793e:	4689      	mov	r9, r1
 8007940:	4692      	mov	sl, r2
 8007942:	461e      	mov	r6, r3
 8007944:	460f      	mov	r7, r1
 8007946:	463d      	mov	r5, r7
 8007948:	9808      	ldr	r0, [sp, #32]
 800794a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800794e:	f000 f947 	bl	8007be0 <__locale_ctype_ptr_l>
 8007952:	4420      	add	r0, r4
 8007954:	7843      	ldrb	r3, [r0, #1]
 8007956:	f013 0308 	ands.w	r3, r3, #8
 800795a:	d132      	bne.n	80079c2 <_strtol_l.isra.0+0x8a>
 800795c:	2c2d      	cmp	r4, #45	; 0x2d
 800795e:	d132      	bne.n	80079c6 <_strtol_l.isra.0+0x8e>
 8007960:	787c      	ldrb	r4, [r7, #1]
 8007962:	1cbd      	adds	r5, r7, #2
 8007964:	2201      	movs	r2, #1
 8007966:	2e00      	cmp	r6, #0
 8007968:	d05d      	beq.n	8007a26 <_strtol_l.isra.0+0xee>
 800796a:	2e10      	cmp	r6, #16
 800796c:	d109      	bne.n	8007982 <_strtol_l.isra.0+0x4a>
 800796e:	2c30      	cmp	r4, #48	; 0x30
 8007970:	d107      	bne.n	8007982 <_strtol_l.isra.0+0x4a>
 8007972:	782b      	ldrb	r3, [r5, #0]
 8007974:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007978:	2b58      	cmp	r3, #88	; 0x58
 800797a:	d14f      	bne.n	8007a1c <_strtol_l.isra.0+0xe4>
 800797c:	786c      	ldrb	r4, [r5, #1]
 800797e:	2610      	movs	r6, #16
 8007980:	3502      	adds	r5, #2
 8007982:	2a00      	cmp	r2, #0
 8007984:	bf14      	ite	ne
 8007986:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 800798a:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 800798e:	2700      	movs	r7, #0
 8007990:	fbb1 fcf6 	udiv	ip, r1, r6
 8007994:	4638      	mov	r0, r7
 8007996:	fb06 1e1c 	mls	lr, r6, ip, r1
 800799a:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 800799e:	2b09      	cmp	r3, #9
 80079a0:	d817      	bhi.n	80079d2 <_strtol_l.isra.0+0x9a>
 80079a2:	461c      	mov	r4, r3
 80079a4:	42a6      	cmp	r6, r4
 80079a6:	dd23      	ble.n	80079f0 <_strtol_l.isra.0+0xb8>
 80079a8:	1c7b      	adds	r3, r7, #1
 80079aa:	d007      	beq.n	80079bc <_strtol_l.isra.0+0x84>
 80079ac:	4584      	cmp	ip, r0
 80079ae:	d31c      	bcc.n	80079ea <_strtol_l.isra.0+0xb2>
 80079b0:	d101      	bne.n	80079b6 <_strtol_l.isra.0+0x7e>
 80079b2:	45a6      	cmp	lr, r4
 80079b4:	db19      	blt.n	80079ea <_strtol_l.isra.0+0xb2>
 80079b6:	fb00 4006 	mla	r0, r0, r6, r4
 80079ba:	2701      	movs	r7, #1
 80079bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80079c0:	e7eb      	b.n	800799a <_strtol_l.isra.0+0x62>
 80079c2:	462f      	mov	r7, r5
 80079c4:	e7bf      	b.n	8007946 <_strtol_l.isra.0+0xe>
 80079c6:	2c2b      	cmp	r4, #43	; 0x2b
 80079c8:	bf04      	itt	eq
 80079ca:	1cbd      	addeq	r5, r7, #2
 80079cc:	787c      	ldrbeq	r4, [r7, #1]
 80079ce:	461a      	mov	r2, r3
 80079d0:	e7c9      	b.n	8007966 <_strtol_l.isra.0+0x2e>
 80079d2:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80079d6:	2b19      	cmp	r3, #25
 80079d8:	d801      	bhi.n	80079de <_strtol_l.isra.0+0xa6>
 80079da:	3c37      	subs	r4, #55	; 0x37
 80079dc:	e7e2      	b.n	80079a4 <_strtol_l.isra.0+0x6c>
 80079de:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80079e2:	2b19      	cmp	r3, #25
 80079e4:	d804      	bhi.n	80079f0 <_strtol_l.isra.0+0xb8>
 80079e6:	3c57      	subs	r4, #87	; 0x57
 80079e8:	e7dc      	b.n	80079a4 <_strtol_l.isra.0+0x6c>
 80079ea:	f04f 37ff 	mov.w	r7, #4294967295
 80079ee:	e7e5      	b.n	80079bc <_strtol_l.isra.0+0x84>
 80079f0:	1c7b      	adds	r3, r7, #1
 80079f2:	d108      	bne.n	8007a06 <_strtol_l.isra.0+0xce>
 80079f4:	2322      	movs	r3, #34	; 0x22
 80079f6:	f8c8 3000 	str.w	r3, [r8]
 80079fa:	4608      	mov	r0, r1
 80079fc:	f1ba 0f00 	cmp.w	sl, #0
 8007a00:	d107      	bne.n	8007a12 <_strtol_l.isra.0+0xda>
 8007a02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a06:	b102      	cbz	r2, 8007a0a <_strtol_l.isra.0+0xd2>
 8007a08:	4240      	negs	r0, r0
 8007a0a:	f1ba 0f00 	cmp.w	sl, #0
 8007a0e:	d0f8      	beq.n	8007a02 <_strtol_l.isra.0+0xca>
 8007a10:	b10f      	cbz	r7, 8007a16 <_strtol_l.isra.0+0xde>
 8007a12:	f105 39ff 	add.w	r9, r5, #4294967295
 8007a16:	f8ca 9000 	str.w	r9, [sl]
 8007a1a:	e7f2      	b.n	8007a02 <_strtol_l.isra.0+0xca>
 8007a1c:	2430      	movs	r4, #48	; 0x30
 8007a1e:	2e00      	cmp	r6, #0
 8007a20:	d1af      	bne.n	8007982 <_strtol_l.isra.0+0x4a>
 8007a22:	2608      	movs	r6, #8
 8007a24:	e7ad      	b.n	8007982 <_strtol_l.isra.0+0x4a>
 8007a26:	2c30      	cmp	r4, #48	; 0x30
 8007a28:	d0a3      	beq.n	8007972 <_strtol_l.isra.0+0x3a>
 8007a2a:	260a      	movs	r6, #10
 8007a2c:	e7a9      	b.n	8007982 <_strtol_l.isra.0+0x4a>
	...

08007a30 <_strtol_r>:
 8007a30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a32:	4c06      	ldr	r4, [pc, #24]	; (8007a4c <_strtol_r+0x1c>)
 8007a34:	4d06      	ldr	r5, [pc, #24]	; (8007a50 <_strtol_r+0x20>)
 8007a36:	6824      	ldr	r4, [r4, #0]
 8007a38:	6a24      	ldr	r4, [r4, #32]
 8007a3a:	2c00      	cmp	r4, #0
 8007a3c:	bf08      	it	eq
 8007a3e:	462c      	moveq	r4, r5
 8007a40:	9400      	str	r4, [sp, #0]
 8007a42:	f7ff ff79 	bl	8007938 <_strtol_l.isra.0>
 8007a46:	b003      	add	sp, #12
 8007a48:	bd30      	pop	{r4, r5, pc}
 8007a4a:	bf00      	nop
 8007a4c:	200000a0 	.word	0x200000a0
 8007a50:	20000104 	.word	0x20000104

08007a54 <_strtoul_l.isra.0>:
 8007a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a58:	4680      	mov	r8, r0
 8007a5a:	4689      	mov	r9, r1
 8007a5c:	4692      	mov	sl, r2
 8007a5e:	461e      	mov	r6, r3
 8007a60:	460f      	mov	r7, r1
 8007a62:	463d      	mov	r5, r7
 8007a64:	9808      	ldr	r0, [sp, #32]
 8007a66:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007a6a:	f000 f8b9 	bl	8007be0 <__locale_ctype_ptr_l>
 8007a6e:	4420      	add	r0, r4
 8007a70:	7843      	ldrb	r3, [r0, #1]
 8007a72:	f013 0308 	ands.w	r3, r3, #8
 8007a76:	d130      	bne.n	8007ada <_strtoul_l.isra.0+0x86>
 8007a78:	2c2d      	cmp	r4, #45	; 0x2d
 8007a7a:	d130      	bne.n	8007ade <_strtoul_l.isra.0+0x8a>
 8007a7c:	787c      	ldrb	r4, [r7, #1]
 8007a7e:	1cbd      	adds	r5, r7, #2
 8007a80:	2101      	movs	r1, #1
 8007a82:	2e00      	cmp	r6, #0
 8007a84:	d05c      	beq.n	8007b40 <_strtoul_l.isra.0+0xec>
 8007a86:	2e10      	cmp	r6, #16
 8007a88:	d109      	bne.n	8007a9e <_strtoul_l.isra.0+0x4a>
 8007a8a:	2c30      	cmp	r4, #48	; 0x30
 8007a8c:	d107      	bne.n	8007a9e <_strtoul_l.isra.0+0x4a>
 8007a8e:	782b      	ldrb	r3, [r5, #0]
 8007a90:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007a94:	2b58      	cmp	r3, #88	; 0x58
 8007a96:	d14e      	bne.n	8007b36 <_strtoul_l.isra.0+0xe2>
 8007a98:	786c      	ldrb	r4, [r5, #1]
 8007a9a:	2610      	movs	r6, #16
 8007a9c:	3502      	adds	r5, #2
 8007a9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	fbb2 f2f6 	udiv	r2, r2, r6
 8007aa8:	fb06 fc02 	mul.w	ip, r6, r2
 8007aac:	ea6f 0c0c 	mvn.w	ip, ip
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007ab6:	2f09      	cmp	r7, #9
 8007ab8:	d817      	bhi.n	8007aea <_strtoul_l.isra.0+0x96>
 8007aba:	463c      	mov	r4, r7
 8007abc:	42a6      	cmp	r6, r4
 8007abe:	dd23      	ble.n	8007b08 <_strtoul_l.isra.0+0xb4>
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	db1e      	blt.n	8007b02 <_strtoul_l.isra.0+0xae>
 8007ac4:	4282      	cmp	r2, r0
 8007ac6:	d31c      	bcc.n	8007b02 <_strtoul_l.isra.0+0xae>
 8007ac8:	d101      	bne.n	8007ace <_strtoul_l.isra.0+0x7a>
 8007aca:	45a4      	cmp	ip, r4
 8007acc:	db19      	blt.n	8007b02 <_strtoul_l.isra.0+0xae>
 8007ace:	fb00 4006 	mla	r0, r0, r6, r4
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007ad8:	e7eb      	b.n	8007ab2 <_strtoul_l.isra.0+0x5e>
 8007ada:	462f      	mov	r7, r5
 8007adc:	e7c1      	b.n	8007a62 <_strtoul_l.isra.0+0xe>
 8007ade:	2c2b      	cmp	r4, #43	; 0x2b
 8007ae0:	bf04      	itt	eq
 8007ae2:	1cbd      	addeq	r5, r7, #2
 8007ae4:	787c      	ldrbeq	r4, [r7, #1]
 8007ae6:	4619      	mov	r1, r3
 8007ae8:	e7cb      	b.n	8007a82 <_strtoul_l.isra.0+0x2e>
 8007aea:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007aee:	2f19      	cmp	r7, #25
 8007af0:	d801      	bhi.n	8007af6 <_strtoul_l.isra.0+0xa2>
 8007af2:	3c37      	subs	r4, #55	; 0x37
 8007af4:	e7e2      	b.n	8007abc <_strtoul_l.isra.0+0x68>
 8007af6:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007afa:	2f19      	cmp	r7, #25
 8007afc:	d804      	bhi.n	8007b08 <_strtoul_l.isra.0+0xb4>
 8007afe:	3c57      	subs	r4, #87	; 0x57
 8007b00:	e7dc      	b.n	8007abc <_strtoul_l.isra.0+0x68>
 8007b02:	f04f 33ff 	mov.w	r3, #4294967295
 8007b06:	e7e5      	b.n	8007ad4 <_strtoul_l.isra.0+0x80>
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	da09      	bge.n	8007b20 <_strtoul_l.isra.0+0xcc>
 8007b0c:	2322      	movs	r3, #34	; 0x22
 8007b0e:	f8c8 3000 	str.w	r3, [r8]
 8007b12:	f04f 30ff 	mov.w	r0, #4294967295
 8007b16:	f1ba 0f00 	cmp.w	sl, #0
 8007b1a:	d107      	bne.n	8007b2c <_strtoul_l.isra.0+0xd8>
 8007b1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b20:	b101      	cbz	r1, 8007b24 <_strtoul_l.isra.0+0xd0>
 8007b22:	4240      	negs	r0, r0
 8007b24:	f1ba 0f00 	cmp.w	sl, #0
 8007b28:	d0f8      	beq.n	8007b1c <_strtoul_l.isra.0+0xc8>
 8007b2a:	b10b      	cbz	r3, 8007b30 <_strtoul_l.isra.0+0xdc>
 8007b2c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007b30:	f8ca 9000 	str.w	r9, [sl]
 8007b34:	e7f2      	b.n	8007b1c <_strtoul_l.isra.0+0xc8>
 8007b36:	2430      	movs	r4, #48	; 0x30
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	d1b0      	bne.n	8007a9e <_strtoul_l.isra.0+0x4a>
 8007b3c:	2608      	movs	r6, #8
 8007b3e:	e7ae      	b.n	8007a9e <_strtoul_l.isra.0+0x4a>
 8007b40:	2c30      	cmp	r4, #48	; 0x30
 8007b42:	d0a4      	beq.n	8007a8e <_strtoul_l.isra.0+0x3a>
 8007b44:	260a      	movs	r6, #10
 8007b46:	e7aa      	b.n	8007a9e <_strtoul_l.isra.0+0x4a>

08007b48 <_strtoul_r>:
 8007b48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007b4a:	4c06      	ldr	r4, [pc, #24]	; (8007b64 <_strtoul_r+0x1c>)
 8007b4c:	4d06      	ldr	r5, [pc, #24]	; (8007b68 <_strtoul_r+0x20>)
 8007b4e:	6824      	ldr	r4, [r4, #0]
 8007b50:	6a24      	ldr	r4, [r4, #32]
 8007b52:	2c00      	cmp	r4, #0
 8007b54:	bf08      	it	eq
 8007b56:	462c      	moveq	r4, r5
 8007b58:	9400      	str	r4, [sp, #0]
 8007b5a:	f7ff ff7b 	bl	8007a54 <_strtoul_l.isra.0>
 8007b5e:	b003      	add	sp, #12
 8007b60:	bd30      	pop	{r4, r5, pc}
 8007b62:	bf00      	nop
 8007b64:	200000a0 	.word	0x200000a0
 8007b68:	20000104 	.word	0x20000104

08007b6c <__submore>:
 8007b6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b70:	460c      	mov	r4, r1
 8007b72:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007b74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007b78:	4299      	cmp	r1, r3
 8007b7a:	d11d      	bne.n	8007bb8 <__submore+0x4c>
 8007b7c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007b80:	f000 f8c4 	bl	8007d0c <_malloc_r>
 8007b84:	b918      	cbnz	r0, 8007b8e <__submore+0x22>
 8007b86:	f04f 30ff 	mov.w	r0, #4294967295
 8007b8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007b92:	63a3      	str	r3, [r4, #56]	; 0x38
 8007b94:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007b98:	6360      	str	r0, [r4, #52]	; 0x34
 8007b9a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8007b9e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007ba2:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8007ba6:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8007baa:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8007bae:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007bb2:	6020      	str	r0, [r4, #0]
 8007bb4:	2000      	movs	r0, #0
 8007bb6:	e7e8      	b.n	8007b8a <__submore+0x1e>
 8007bb8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007bba:	0077      	lsls	r7, r6, #1
 8007bbc:	463a      	mov	r2, r7
 8007bbe:	f000 f8ff 	bl	8007dc0 <_realloc_r>
 8007bc2:	4605      	mov	r5, r0
 8007bc4:	2800      	cmp	r0, #0
 8007bc6:	d0de      	beq.n	8007b86 <__submore+0x1a>
 8007bc8:	eb00 0806 	add.w	r8, r0, r6
 8007bcc:	4601      	mov	r1, r0
 8007bce:	4632      	mov	r2, r6
 8007bd0:	4640      	mov	r0, r8
 8007bd2:	f000 f829 	bl	8007c28 <memcpy>
 8007bd6:	f8c4 8000 	str.w	r8, [r4]
 8007bda:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007bde:	e7e9      	b.n	8007bb4 <__submore+0x48>

08007be0 <__locale_ctype_ptr_l>:
 8007be0:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007be4:	4770      	bx	lr
	...

08007be8 <__locale_ctype_ptr>:
 8007be8:	4b04      	ldr	r3, [pc, #16]	; (8007bfc <__locale_ctype_ptr+0x14>)
 8007bea:	4a05      	ldr	r2, [pc, #20]	; (8007c00 <__locale_ctype_ptr+0x18>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	6a1b      	ldr	r3, [r3, #32]
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	bf08      	it	eq
 8007bf4:	4613      	moveq	r3, r2
 8007bf6:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
 8007bfa:	4770      	bx	lr
 8007bfc:	200000a0 	.word	0x200000a0
 8007c00:	20000104 	.word	0x20000104

08007c04 <__ascii_mbtowc>:
 8007c04:	b082      	sub	sp, #8
 8007c06:	b901      	cbnz	r1, 8007c0a <__ascii_mbtowc+0x6>
 8007c08:	a901      	add	r1, sp, #4
 8007c0a:	b142      	cbz	r2, 8007c1e <__ascii_mbtowc+0x1a>
 8007c0c:	b14b      	cbz	r3, 8007c22 <__ascii_mbtowc+0x1e>
 8007c0e:	7813      	ldrb	r3, [r2, #0]
 8007c10:	600b      	str	r3, [r1, #0]
 8007c12:	7812      	ldrb	r2, [r2, #0]
 8007c14:	1c10      	adds	r0, r2, #0
 8007c16:	bf18      	it	ne
 8007c18:	2001      	movne	r0, #1
 8007c1a:	b002      	add	sp, #8
 8007c1c:	4770      	bx	lr
 8007c1e:	4610      	mov	r0, r2
 8007c20:	e7fb      	b.n	8007c1a <__ascii_mbtowc+0x16>
 8007c22:	f06f 0001 	mvn.w	r0, #1
 8007c26:	e7f8      	b.n	8007c1a <__ascii_mbtowc+0x16>

08007c28 <memcpy>:
 8007c28:	b510      	push	{r4, lr}
 8007c2a:	1e43      	subs	r3, r0, #1
 8007c2c:	440a      	add	r2, r1
 8007c2e:	4291      	cmp	r1, r2
 8007c30:	d100      	bne.n	8007c34 <memcpy+0xc>
 8007c32:	bd10      	pop	{r4, pc}
 8007c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c3c:	e7f7      	b.n	8007c2e <memcpy+0x6>

08007c3e <memmove>:
 8007c3e:	4288      	cmp	r0, r1
 8007c40:	b510      	push	{r4, lr}
 8007c42:	eb01 0302 	add.w	r3, r1, r2
 8007c46:	d807      	bhi.n	8007c58 <memmove+0x1a>
 8007c48:	1e42      	subs	r2, r0, #1
 8007c4a:	4299      	cmp	r1, r3
 8007c4c:	d00a      	beq.n	8007c64 <memmove+0x26>
 8007c4e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c52:	f802 4f01 	strb.w	r4, [r2, #1]!
 8007c56:	e7f8      	b.n	8007c4a <memmove+0xc>
 8007c58:	4283      	cmp	r3, r0
 8007c5a:	d9f5      	bls.n	8007c48 <memmove+0xa>
 8007c5c:	1881      	adds	r1, r0, r2
 8007c5e:	1ad2      	subs	r2, r2, r3
 8007c60:	42d3      	cmn	r3, r2
 8007c62:	d100      	bne.n	8007c66 <memmove+0x28>
 8007c64:	bd10      	pop	{r4, pc}
 8007c66:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007c6a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8007c6e:	e7f7      	b.n	8007c60 <memmove+0x22>

08007c70 <_free_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4605      	mov	r5, r0
 8007c74:	2900      	cmp	r1, #0
 8007c76:	d045      	beq.n	8007d04 <_free_r+0x94>
 8007c78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c7c:	1f0c      	subs	r4, r1, #4
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	bfb8      	it	lt
 8007c82:	18e4      	addlt	r4, r4, r3
 8007c84:	f000 f8df 	bl	8007e46 <__malloc_lock>
 8007c88:	4a1f      	ldr	r2, [pc, #124]	; (8007d08 <_free_r+0x98>)
 8007c8a:	6813      	ldr	r3, [r2, #0]
 8007c8c:	4610      	mov	r0, r2
 8007c8e:	b933      	cbnz	r3, 8007c9e <_free_r+0x2e>
 8007c90:	6063      	str	r3, [r4, #4]
 8007c92:	6014      	str	r4, [r2, #0]
 8007c94:	4628      	mov	r0, r5
 8007c96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c9a:	f000 b8d5 	b.w	8007e48 <__malloc_unlock>
 8007c9e:	42a3      	cmp	r3, r4
 8007ca0:	d90c      	bls.n	8007cbc <_free_r+0x4c>
 8007ca2:	6821      	ldr	r1, [r4, #0]
 8007ca4:	1862      	adds	r2, r4, r1
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	bf04      	itt	eq
 8007caa:	681a      	ldreq	r2, [r3, #0]
 8007cac:	685b      	ldreq	r3, [r3, #4]
 8007cae:	6063      	str	r3, [r4, #4]
 8007cb0:	bf04      	itt	eq
 8007cb2:	1852      	addeq	r2, r2, r1
 8007cb4:	6022      	streq	r2, [r4, #0]
 8007cb6:	6004      	str	r4, [r0, #0]
 8007cb8:	e7ec      	b.n	8007c94 <_free_r+0x24>
 8007cba:	4613      	mov	r3, r2
 8007cbc:	685a      	ldr	r2, [r3, #4]
 8007cbe:	b10a      	cbz	r2, 8007cc4 <_free_r+0x54>
 8007cc0:	42a2      	cmp	r2, r4
 8007cc2:	d9fa      	bls.n	8007cba <_free_r+0x4a>
 8007cc4:	6819      	ldr	r1, [r3, #0]
 8007cc6:	1858      	adds	r0, r3, r1
 8007cc8:	42a0      	cmp	r0, r4
 8007cca:	d10b      	bne.n	8007ce4 <_free_r+0x74>
 8007ccc:	6820      	ldr	r0, [r4, #0]
 8007cce:	4401      	add	r1, r0
 8007cd0:	1858      	adds	r0, r3, r1
 8007cd2:	4282      	cmp	r2, r0
 8007cd4:	6019      	str	r1, [r3, #0]
 8007cd6:	d1dd      	bne.n	8007c94 <_free_r+0x24>
 8007cd8:	6810      	ldr	r0, [r2, #0]
 8007cda:	6852      	ldr	r2, [r2, #4]
 8007cdc:	605a      	str	r2, [r3, #4]
 8007cde:	4401      	add	r1, r0
 8007ce0:	6019      	str	r1, [r3, #0]
 8007ce2:	e7d7      	b.n	8007c94 <_free_r+0x24>
 8007ce4:	d902      	bls.n	8007cec <_free_r+0x7c>
 8007ce6:	230c      	movs	r3, #12
 8007ce8:	602b      	str	r3, [r5, #0]
 8007cea:	e7d3      	b.n	8007c94 <_free_r+0x24>
 8007cec:	6820      	ldr	r0, [r4, #0]
 8007cee:	1821      	adds	r1, r4, r0
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	bf04      	itt	eq
 8007cf4:	6811      	ldreq	r1, [r2, #0]
 8007cf6:	6852      	ldreq	r2, [r2, #4]
 8007cf8:	6062      	str	r2, [r4, #4]
 8007cfa:	bf04      	itt	eq
 8007cfc:	1809      	addeq	r1, r1, r0
 8007cfe:	6021      	streq	r1, [r4, #0]
 8007d00:	605c      	str	r4, [r3, #4]
 8007d02:	e7c7      	b.n	8007c94 <_free_r+0x24>
 8007d04:	bd38      	pop	{r3, r4, r5, pc}
 8007d06:	bf00      	nop
 8007d08:	200002e0 	.word	0x200002e0

08007d0c <_malloc_r>:
 8007d0c:	b570      	push	{r4, r5, r6, lr}
 8007d0e:	1ccd      	adds	r5, r1, #3
 8007d10:	f025 0503 	bic.w	r5, r5, #3
 8007d14:	3508      	adds	r5, #8
 8007d16:	2d0c      	cmp	r5, #12
 8007d18:	bf38      	it	cc
 8007d1a:	250c      	movcc	r5, #12
 8007d1c:	2d00      	cmp	r5, #0
 8007d1e:	4606      	mov	r6, r0
 8007d20:	db01      	blt.n	8007d26 <_malloc_r+0x1a>
 8007d22:	42a9      	cmp	r1, r5
 8007d24:	d903      	bls.n	8007d2e <_malloc_r+0x22>
 8007d26:	230c      	movs	r3, #12
 8007d28:	6033      	str	r3, [r6, #0]
 8007d2a:	2000      	movs	r0, #0
 8007d2c:	bd70      	pop	{r4, r5, r6, pc}
 8007d2e:	f000 f88a 	bl	8007e46 <__malloc_lock>
 8007d32:	4a21      	ldr	r2, [pc, #132]	; (8007db8 <_malloc_r+0xac>)
 8007d34:	6814      	ldr	r4, [r2, #0]
 8007d36:	4621      	mov	r1, r4
 8007d38:	b991      	cbnz	r1, 8007d60 <_malloc_r+0x54>
 8007d3a:	4c20      	ldr	r4, [pc, #128]	; (8007dbc <_malloc_r+0xb0>)
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	b91b      	cbnz	r3, 8007d48 <_malloc_r+0x3c>
 8007d40:	4630      	mov	r0, r6
 8007d42:	f000 f863 	bl	8007e0c <_sbrk_r>
 8007d46:	6020      	str	r0, [r4, #0]
 8007d48:	4629      	mov	r1, r5
 8007d4a:	4630      	mov	r0, r6
 8007d4c:	f000 f85e 	bl	8007e0c <_sbrk_r>
 8007d50:	1c43      	adds	r3, r0, #1
 8007d52:	d124      	bne.n	8007d9e <_malloc_r+0x92>
 8007d54:	230c      	movs	r3, #12
 8007d56:	6033      	str	r3, [r6, #0]
 8007d58:	4630      	mov	r0, r6
 8007d5a:	f000 f875 	bl	8007e48 <__malloc_unlock>
 8007d5e:	e7e4      	b.n	8007d2a <_malloc_r+0x1e>
 8007d60:	680b      	ldr	r3, [r1, #0]
 8007d62:	1b5b      	subs	r3, r3, r5
 8007d64:	d418      	bmi.n	8007d98 <_malloc_r+0x8c>
 8007d66:	2b0b      	cmp	r3, #11
 8007d68:	d90f      	bls.n	8007d8a <_malloc_r+0x7e>
 8007d6a:	600b      	str	r3, [r1, #0]
 8007d6c:	50cd      	str	r5, [r1, r3]
 8007d6e:	18cc      	adds	r4, r1, r3
 8007d70:	4630      	mov	r0, r6
 8007d72:	f000 f869 	bl	8007e48 <__malloc_unlock>
 8007d76:	f104 000b 	add.w	r0, r4, #11
 8007d7a:	1d23      	adds	r3, r4, #4
 8007d7c:	f020 0007 	bic.w	r0, r0, #7
 8007d80:	1ac3      	subs	r3, r0, r3
 8007d82:	d0d3      	beq.n	8007d2c <_malloc_r+0x20>
 8007d84:	425a      	negs	r2, r3
 8007d86:	50e2      	str	r2, [r4, r3]
 8007d88:	e7d0      	b.n	8007d2c <_malloc_r+0x20>
 8007d8a:	428c      	cmp	r4, r1
 8007d8c:	684b      	ldr	r3, [r1, #4]
 8007d8e:	bf16      	itet	ne
 8007d90:	6063      	strne	r3, [r4, #4]
 8007d92:	6013      	streq	r3, [r2, #0]
 8007d94:	460c      	movne	r4, r1
 8007d96:	e7eb      	b.n	8007d70 <_malloc_r+0x64>
 8007d98:	460c      	mov	r4, r1
 8007d9a:	6849      	ldr	r1, [r1, #4]
 8007d9c:	e7cc      	b.n	8007d38 <_malloc_r+0x2c>
 8007d9e:	1cc4      	adds	r4, r0, #3
 8007da0:	f024 0403 	bic.w	r4, r4, #3
 8007da4:	42a0      	cmp	r0, r4
 8007da6:	d005      	beq.n	8007db4 <_malloc_r+0xa8>
 8007da8:	1a21      	subs	r1, r4, r0
 8007daa:	4630      	mov	r0, r6
 8007dac:	f000 f82e 	bl	8007e0c <_sbrk_r>
 8007db0:	3001      	adds	r0, #1
 8007db2:	d0cf      	beq.n	8007d54 <_malloc_r+0x48>
 8007db4:	6025      	str	r5, [r4, #0]
 8007db6:	e7db      	b.n	8007d70 <_malloc_r+0x64>
 8007db8:	200002e0 	.word	0x200002e0
 8007dbc:	200002e4 	.word	0x200002e4

08007dc0 <_realloc_r>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	4607      	mov	r7, r0
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	460e      	mov	r6, r1
 8007dc8:	b921      	cbnz	r1, 8007dd4 <_realloc_r+0x14>
 8007dca:	4611      	mov	r1, r2
 8007dcc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8007dd0:	f7ff bf9c 	b.w	8007d0c <_malloc_r>
 8007dd4:	b922      	cbnz	r2, 8007de0 <_realloc_r+0x20>
 8007dd6:	f7ff ff4b 	bl	8007c70 <_free_r>
 8007dda:	4625      	mov	r5, r4
 8007ddc:	4628      	mov	r0, r5
 8007dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007de0:	f000 f833 	bl	8007e4a <_malloc_usable_size_r>
 8007de4:	42a0      	cmp	r0, r4
 8007de6:	d20f      	bcs.n	8007e08 <_realloc_r+0x48>
 8007de8:	4621      	mov	r1, r4
 8007dea:	4638      	mov	r0, r7
 8007dec:	f7ff ff8e 	bl	8007d0c <_malloc_r>
 8007df0:	4605      	mov	r5, r0
 8007df2:	2800      	cmp	r0, #0
 8007df4:	d0f2      	beq.n	8007ddc <_realloc_r+0x1c>
 8007df6:	4631      	mov	r1, r6
 8007df8:	4622      	mov	r2, r4
 8007dfa:	f7ff ff15 	bl	8007c28 <memcpy>
 8007dfe:	4631      	mov	r1, r6
 8007e00:	4638      	mov	r0, r7
 8007e02:	f7ff ff35 	bl	8007c70 <_free_r>
 8007e06:	e7e9      	b.n	8007ddc <_realloc_r+0x1c>
 8007e08:	4635      	mov	r5, r6
 8007e0a:	e7e7      	b.n	8007ddc <_realloc_r+0x1c>

08007e0c <_sbrk_r>:
 8007e0c:	b538      	push	{r3, r4, r5, lr}
 8007e0e:	4c06      	ldr	r4, [pc, #24]	; (8007e28 <_sbrk_r+0x1c>)
 8007e10:	2300      	movs	r3, #0
 8007e12:	4605      	mov	r5, r0
 8007e14:	4608      	mov	r0, r1
 8007e16:	6023      	str	r3, [r4, #0]
 8007e18:	f7fb f9ee 	bl	80031f8 <_sbrk>
 8007e1c:	1c43      	adds	r3, r0, #1
 8007e1e:	d102      	bne.n	8007e26 <_sbrk_r+0x1a>
 8007e20:	6823      	ldr	r3, [r4, #0]
 8007e22:	b103      	cbz	r3, 8007e26 <_sbrk_r+0x1a>
 8007e24:	602b      	str	r3, [r5, #0]
 8007e26:	bd38      	pop	{r3, r4, r5, pc}
 8007e28:	20000a58 	.word	0x20000a58

08007e2c <__ascii_wctomb>:
 8007e2c:	b149      	cbz	r1, 8007e42 <__ascii_wctomb+0x16>
 8007e2e:	2aff      	cmp	r2, #255	; 0xff
 8007e30:	bf85      	ittet	hi
 8007e32:	238a      	movhi	r3, #138	; 0x8a
 8007e34:	6003      	strhi	r3, [r0, #0]
 8007e36:	700a      	strbls	r2, [r1, #0]
 8007e38:	f04f 30ff 	movhi.w	r0, #4294967295
 8007e3c:	bf98      	it	ls
 8007e3e:	2001      	movls	r0, #1
 8007e40:	4770      	bx	lr
 8007e42:	4608      	mov	r0, r1
 8007e44:	4770      	bx	lr

08007e46 <__malloc_lock>:
 8007e46:	4770      	bx	lr

08007e48 <__malloc_unlock>:
 8007e48:	4770      	bx	lr

08007e4a <_malloc_usable_size_r>:
 8007e4a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e4e:	1f18      	subs	r0, r3, #4
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	bfbc      	itt	lt
 8007e54:	580b      	ldrlt	r3, [r1, r0]
 8007e56:	18c0      	addlt	r0, r0, r3
 8007e58:	4770      	bx	lr
	...

08007e5c <roundf>:
 8007e5c:	ee10 0a10 	vmov	r0, s0
 8007e60:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8007e64:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8007e68:	2a16      	cmp	r2, #22
 8007e6a:	dc15      	bgt.n	8007e98 <roundf+0x3c>
 8007e6c:	2a00      	cmp	r2, #0
 8007e6e:	da08      	bge.n	8007e82 <roundf+0x26>
 8007e70:	3201      	adds	r2, #1
 8007e72:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8007e76:	d101      	bne.n	8007e7c <roundf+0x20>
 8007e78:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8007e7c:	ee00 3a10 	vmov	s0, r3
 8007e80:	4770      	bx	lr
 8007e82:	4908      	ldr	r1, [pc, #32]	; (8007ea4 <roundf+0x48>)
 8007e84:	4111      	asrs	r1, r2
 8007e86:	4208      	tst	r0, r1
 8007e88:	d0fa      	beq.n	8007e80 <roundf+0x24>
 8007e8a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8007e8e:	4113      	asrs	r3, r2
 8007e90:	4403      	add	r3, r0
 8007e92:	ea23 0301 	bic.w	r3, r3, r1
 8007e96:	e7f1      	b.n	8007e7c <roundf+0x20>
 8007e98:	2a80      	cmp	r2, #128	; 0x80
 8007e9a:	d1f1      	bne.n	8007e80 <roundf+0x24>
 8007e9c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8007ea0:	4770      	bx	lr
 8007ea2:	bf00      	nop
 8007ea4:	007fffff 	.word	0x007fffff

08007ea8 <_init>:
 8007ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eaa:	bf00      	nop
 8007eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eae:	bc08      	pop	{r3}
 8007eb0:	469e      	mov	lr, r3
 8007eb2:	4770      	bx	lr

08007eb4 <_fini>:
 8007eb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007eb6:	bf00      	nop
 8007eb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007eba:	bc08      	pop	{r3}
 8007ebc:	469e      	mov	lr, r3
 8007ebe:	4770      	bx	lr
